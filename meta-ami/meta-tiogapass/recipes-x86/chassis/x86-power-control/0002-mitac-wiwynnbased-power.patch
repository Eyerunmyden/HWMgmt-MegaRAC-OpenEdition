diff -Naur a/power-control-x86/src/power_control.cpp b/power-control-x86/src/power_control.cpp
--- a/power-control-x86/src/power_control.cpp	2021-03-23 13:24:33.046716060 +0530
+++ b/power-control-x86/src/power_control.cpp	2021-03-24 18:22:45.134869860 +0530
@@ -33,6 +33,16 @@
 #include <iostream>
 #include <string_view>
 
+#define MITAC	0
+#define WIWYNN	1
+
+#define SKU_ID_pin		121	//P1
+#define GPIO_CHIP		"0"	//gpio-chip0 of g5
+#define	MITAC_PWROK_PIN		26	//A2 
+#define MITAC_POSTCMP_PIN	2	//D2
+#define WIWYNN_PWROK_PIN	14	//B6
+#define	WIWYNN_POSTCMP_PIN	215	//AA7
+
 namespace power_control
 {
 static boost::asio::io_service io;
@@ -40,6 +50,9 @@
 
 static std::string node = "0";
 
+static std::uint8_t powerOkPin;
+static std::uint8_t postCompletePin;
+
 static std::string powerOutName;
 static std::string powerOkName;
 static std::string resetOutName;
@@ -148,6 +161,34 @@
         "xyz.openbmc_project.BeepCode", "Beep", uint8_t(beepPriority));
 }
 
+static int8_t PlatformId(void)
+{
+    gpiod::chip chip(GPIO_CHIP);
+    auto line = chip.get_line(SKU_ID_pin);
+    if (!line)
+    {
+        std::cerr << "Failed to find the " << SKU_ID_pin << " line\n";
+        return -1;
+    }
+
+    try
+    {
+	line.request(
+            {"power-control", gpiod::line_request::DIRECTION_INPUT});
+    }
+    catch (std::exception&)
+    {
+        std::cerr << "Failed to request dir for " << SKU_ID_pin << "\n";
+        return -1;
+    }
+
+    if(line.get_value() == 1){
+	return WIWYNN;
+    }else{
+	return MITAC;
+    }
+}
+
 enum class PowerState
 {
     on,
@@ -989,6 +1030,57 @@
     return true;
 }
 
+static bool requestTPGPIOEvents(
+    const std::uint8_t pin, const std::function<void()>& handler,
+    gpiod::line& gpioLine,
+    boost::asio::posix::stream_descriptor& gpioEventDescriptor)
+{
+    gpiod::chip chip(GPIO_CHIP);
+
+    // Find the GPIO line
+    gpioLine = chip.get_line(pin);
+    if (!gpioLine)
+    {
+        std::cerr << "Failed to find the " << pin << " line\n";
+
+        return false;
+    }
+
+    try
+    {
+        gpioLine.request(
+            {"power-control", gpiod::line_request::EVENT_BOTH_EDGES});
+    }
+    catch (std::exception&)
+    {
+        std::cerr << "Failed to request events for " << pin << "\n";
+        return false;
+    }
+
+    int gpioLineFd = gpioLine.event_get_fd();
+    if (gpioLineFd < 0)
+    {
+        std::cerr << "Failed to get " << pin << " fd\n";
+        return false;
+    }
+
+    gpioEventDescriptor.assign(gpioLineFd);
+
+    gpioEventDescriptor.async_wait(
+        boost::asio::posix::stream_descriptor::wait_read,
+        [&pin, handler](const boost::system::error_code ec) {
+            if (ec)
+            {
+                std::cerr << pin << " fd handler error: " << ec.message()
+                          << "\n";
+                // TODO: throw here to force power-control to restart?
+                return;
+            }
+            handler();
+        });
+    return true;
+}
+
 static bool setGPIOOutput(const std::string& name, const int value,
                           gpiod::line& gpioLine)
 {
@@ -2180,21 +2272,21 @@
         std::cerr << "SIO control GPIOs not defined, disable SIO support.\n";
     }
 
-    // Request PS_PWROK GPIO events
-    if (!power_control::powerOkName.empty())
+    if(power_control::PlatformId() == MITAC)
     {
-        if (!power_control::requestGPIOEvents(
-                power_control::powerOkName, power_control::psPowerOKHandler,
-                power_control::psPowerOKLine, power_control::psPowerOKEvent))
-        {
-            return -1;
-        }
+	power_control::powerOkPin = MITAC_PWROK_PIN;
+	power_control::postCompletePin = MITAC_POSTCMP_PIN;
+    }else{
+	power_control::powerOkPin = WIWYNN_PWROK_PIN;
+        power_control::postCompletePin = WIWYNN_POSTCMP_PIN;
     }
-    else
+
+    // Request PS_PWROK GPIO events
+    if (!power_control::requestTPGPIOEvents(
+			    power_control::powerOkPin, power_control::psPowerOKHandler,
+			    power_control::psPowerOKLine, power_control::psPowerOKEvent))
     {
-        std::cerr
-            << "PowerOk name should be configured from json config file\n";
-        return -1;
+	    return -1;
     }
 
     if (power_control::sioEnabled == true)
@@ -2279,22 +2371,13 @@
     }
 
     // Request POST_COMPLETE GPIO events
-    if (!power_control::postCompleteName.empty())
-    {
-        if (!power_control::requestGPIOEvents(
-                power_control::postCompleteName,
+    if (!power_control::requestTPGPIOEvents(
+                power_control::postCompletePin,
                 power_control::postCompleteHandler,
                 power_control::postCompleteLine,
                 power_control::postCompleteEvent))
-        {
-            return -1;
-        }
-    }
-    else
     {
-        std::cerr
-            << "postComplete name should be configured from json config file\n";
-        return -1;
+	return -1;
     }
 
     // initialize NMI_OUT GPIO.
