--- linux/drivers/usb/gadget/function/f_mass_storage.h	2019-08-21 00:37:56.000000000 +0800
+++ linux_new/drivers/usb/gadget/function/f_mass_storage.h	2020-01-15 15:45:37.815070000 +0800
@@ -5,6 +5,8 @@
 #include <linux/usb/composite.h>
 #include "storage_common.h"
 
+#define ENABLE_MASS_STORAGE_NODE	(1)	// let bind() able to create a node(name: usb) under /dev/. refer to f_hid.c...
+
 struct fsg_module_parameters {
 	char		*file[FSG_MAX_LUNS];
 	bool		ro[FSG_MAX_LUNS];
@@ -82,6 +84,9 @@
 	 */
 	struct mutex			lock;
 	int				refcnt;
+#if (1 == ENABLE_MASS_STORAGE_NODE)
+	int minor;
+#endif // end #if (1 == ENABLE_MASS_STORAGE_NODE)
 };
 
 struct fsg_lun_config {
@@ -141,4 +146,20 @@
 			    const struct fsg_module_parameters *params,
 			    unsigned int fsg_num_buffers);
 
+#if (1 == ENABLE_MASS_STORAGE_NODE)
+#include "ami_gadget_ioctl.h"	// for ami media redirection.
+#include <linux/cdev.h>	// need for struct cdev...
+#define  usb_long(x)	(x)
+#define MAX_SCSI_DATA 	(64*2048)
+void gmsg_ami_init_device(const unsigned int Instance);
+int gmsg_setup(struct usb_gadget *g, int count);
+void gmsg_cleanup(void);
+
+typedef struct LUN_INFO_CMD {
+	u8 type;	// device type:cd/hd.
+	u8 lun;	// lun idx.
+	u8 mode;	// redirect mode.
+}PACKED LUN_INFO_CMD;
+#endif // end #if (1 == ENABLE_MASS_STORAGE_NODE)
+
 #endif /* USB_F_MASS_STORAGE_H */
