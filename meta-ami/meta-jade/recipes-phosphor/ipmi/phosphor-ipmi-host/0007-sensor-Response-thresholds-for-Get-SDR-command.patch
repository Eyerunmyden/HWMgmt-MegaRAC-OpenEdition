From d9e11793317969a120bb0475551028a017931473 Mon Sep 17 00:00:00 2001
From: Thu Ba Nguyen <tbnguyen@amperecomputing.com>
Date: Thu, 22 Jul 2021 14:40:38 +0700
Subject: [PATCH] sensor: Response thresholds for "Get SDR command"

Section 33.12 in Ipmi spec v2.0 details about "Get SDR" command. When
the byte_to_read byte of this command is 0xFF, the response data have
to include the sensor thresholds. The phosphor-ipmi-host does not
support that. This commit updates phosphor-ipmi-host to support
responding the sensor thresholds. There are many data bytes in sensor
record. The commit only updates values for settable/readable threshold
mask bytes and threshold bits in sensor initialization/capabilities
bytes.

Bz: https://den-bugzilla.amperecomputing.com/show_bug.cgi?id=86032

Tested:
    1. Run "ipmitool sdr get <sensor name>".
    2. The sensor thresholds should be included in output message.

Signed-off-by: Thu Ba Nguyen <tbnguyen@amperecomputing.com>

%% original patch: 0007-sensor-Response-thresholds-for-Get-SDR-command.patch

%% original patch: 0007-sensor-Response-thresholds-for-Get-SDR-command.patch
---
 sensorhandler.cpp | 31 +++++++++++++++++++++++++++++++
 sensorhandler.hpp |  8 ++++++++
 2 files changed, 39 insertions(+)

diff --git a/sensorhandler.cpp b/sensorhandler.cpp
index d0a6d19..702c8cf 100644
--- a/sensorhandler.cpp
+++ b/sensorhandler.cpp
@@ -976,6 +976,37 @@ ipmi_ret_t ipmi_sen_get_sdr(ipmi_netfn_t netfn, ipmi_cmd_t cmd,
         get_sdr::body::init_settable_state(true, &(record.body));
     }
 
+    /*
+     * read entire sensor record
+     * or read sensor data section
+     */
+    if (req->bytes_to_read == 0xff || (req->offset + req->bytes_to_read) > 5)
+    {
+        /* Read entire record */
+        get_sdr::GetSensorThresholdsResponse thresh{};
+        try
+        {
+            thresh = getSensorThresholds(recordID);
+        }
+        catch (std::exception& e)
+        {
+            // Mask if the property is not present
+        }
+        if (thresh.validMask != 0)
+        {
+            get_sdr::body::init_thresh_state(true, &(record.body));
+            get_sdr::body::init_thresh_cap(2, &(record.body));
+        }
+        record.body.discrete_reading_setting_mask[0] = thresh.validMask;
+        record.body.discrete_reading_setting_mask[1] = thresh.validMask;
+        record.body.upper_nonrecoverable_threshold = thresh.upperNonCritical;
+        record.body.upper_critical_threshold = thresh.upperCritical;
+        record.body.upper_noncritical_threshold = thresh.upperNonRecoverable;
+        record.body.lower_nonrecoverable_threshold = thresh.lowerNonCritical;
+        record.body.lower_critical_threshold = thresh.lowerCritical;
+        record.body.lower_noncritical_threshold = thresh.lowerNonRecoverable;
+    }
+
     // Set the type-specific details given the DBus interface
     ret =
         populate_record_from_dbus(&(record.body), &(sensor->second), data_len);
diff --git a/sensorhandler.hpp b/sensorhandler.hpp
index ea9fa3c..b816a75 100644
--- a/sensorhandler.hpp
+++ b/sensorhandler.hpp
@@ -461,6 +461,14 @@ inline void init_thresh_state(bool enabled, SensorDataFullRecordBody* body)
         body->sensor_initialization &= ~(1 << 4);
     }
 };
+inline void init_thresh_cap(uint8_t mode, SensorDataFullRecordBody* body)
+{
+    body->sensor_capabilities &= ~(3 << 2);
+    if ((mode > 0) && (mode <= 3))
+    {
+        body->sensor_capabilities |= mode << 2;
+    }
+};
 inline void init_events_state(bool enabled, SensorDataFullRecordBody* body)
 {
     if (enabled)
-- 
2.17.1

