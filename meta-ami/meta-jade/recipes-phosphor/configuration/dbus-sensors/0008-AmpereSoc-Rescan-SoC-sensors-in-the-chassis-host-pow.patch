From 35e0b06dbbb8c6830e29af4efc8d87e018635e71 Mon Sep 17 00:00:00 2001
From: ThuBaNguyen <thu@os.amperecomputing.com>
Date: Fri, 30 Apr 2021 22:45:20 +0700
Subject: [PATCH] AmpereSoc: Rescan SoC sensors in the chassis/host power
 changing

When the chassis/host states are changed, the sensors list will be mutated.
This commit supports updating SoC sensors list when there is
the propertiesChanged signal in the CurrentHostState and
CurrentPowerState properties.

Tested:
	1. Turn off the host.
	2. Dbus xyz.openbmc_project.SoCSensor should be empty.
	3. Turn on the host.
	4. The host sesors should be listed in xyz.openbmc_project.SoCSensor.

Signed-off-by: ThuBaNguyen <thu@os.amperecomputing.com>

%% original patch: 0010-AmpereSoc-Handle-CurrentHostState-and-CurrentPowerSt.patch
---
 src/AmpereSoCMain.cpp | 86 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 86 insertions(+)

diff --git a/src/AmpereSoCMain.cpp b/src/AmpereSoCMain.cpp
index d744fe9..9cda8b6 100644
--- a/src/AmpereSoCMain.cpp
+++ b/src/AmpereSoCMain.cpp
@@ -851,6 +851,78 @@ int main()
             });
         };
 
+    std::function<void(sdbusplus::message::message&)> hostStateHandler =
+        [&](sdbusplus::message::message& message) {
+            std::string objectName;
+            boost::container::flat_map<std::string, std::variant<std::string>>
+                values;
+            if (message.is_method_error())
+            {
+                std::cerr << "callback method error\n";
+                return;
+            }
+
+            message.read(objectName, values);
+            auto findState = values.find(power::property);
+            if (findState == values.end())
+            {
+                return;
+            }
+            if constexpr (debug)
+            {
+                std::cerr << power::property << " change to " <<
+                            std::get<std::string>(findState->second) << "\n";
+            }
+
+            filterTimer.expires_from_now(boost::posix_time::seconds(5));
+            filterTimer.async_wait([&](const boost::system::error_code& ec) {
+                if (ec == boost::asio::error::operation_aborted)
+                {
+                    return;
+                }
+                if (ec)
+                {
+                    std::cerr << "timer error\n";
+                }
+                createSensors(io, objectServer, systemBus, nullptr);
+            });
+        };
+
+    std::function<void(sdbusplus::message::message&)> chassisStateHandler =
+        [&](sdbusplus::message::message& message) {
+            std::string objectName;
+            boost::container::flat_map<std::string, std::variant<std::string>>
+                values;
+            if (message.is_method_error())
+            {
+                std::cerr << "callback method error\n";
+                return;
+            }
+            message.read(objectName, values);
+            auto findState = values.find(chassis::property);
+            if (findState == values.end())
+            {
+                return;
+            }
+            if constexpr (debug)
+            {
+                std::cerr << chassis::property << " change to " <<
+                            std::get<std::string>(findState->second) << "\n";
+            }
+            filterTimer.expires_from_now(boost::posix_time::seconds(5));
+            filterTimer.async_wait([&](const boost::system::error_code& ec) {
+                if (ec == boost::asio::error::operation_aborted)
+                {
+                    return;
+                }
+                if (ec)
+                {
+                    std::cerr << "timer error\n";
+                }
+                createSensors(io, objectServer, systemBus, nullptr);
+            });
+        };
+
     for (const char* type : sensorTypes)
     {
         auto match = std::make_unique<sdbusplus::bus::match::match>(
@@ -859,6 +931,20 @@ int main()
                 std::string(inventoryPath) + "',arg0namespace='" + type + "'",
             eventHandler);
         matches.emplace_back(std::move(match));
+        match = std::make_unique<sdbusplus::bus::match::match>(
+            static_cast<sdbusplus::bus::bus&>(*systemBus),
+            "type='signal',interface='" + std::string(properties::interface) +
+            "',path='" + std::string(chassis::path) + "',arg0='" +
+            std::string(chassis::interface) + "'",
+            chassisStateHandler);
+        matches.emplace_back(std::move(match));
+        match = std::make_unique<sdbusplus::bus::match::match>(
+            static_cast<sdbusplus::bus::bus&>(*systemBus),
+            "type='signal',interface='" + std::string(properties::interface) +
+            "',path='" + std::string(power::path) + "',arg0='" +
+            std::string(power::interface) + "'",
+            hostStateHandler);
+        matches.emplace_back(std::move(match));
     }
 
     io.run();
-- 
2.17.1

