From 9d6617662cdd2c85a75a3e6bcb5f6f92ec7cdd77 Mon Sep 17 00:00:00 2001
From: pranoygoru <gorumanip@amiindia.co.in>
Date: Thu, 3 Jun 2021 11:46:42 +0530
Subject: [PATCH] Added new interface to save Vmedia Credentials

---
 src/main.cpp | 125 ++++++++++++++++++++++++++++++++++++-
 1 file changed, 124 insertions(+), 1 deletion(-)

diff --git a/src/main.cpp b/src/main.cpp
index 629c9b7..4abdfd4 100755
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -440,6 +440,57 @@ class Process : public std::enable_shared_from_this<Process>
         return false;
     }
 
+    static bool setCredentials(const std::string& device_name, const std::string& instance)
+    {
+        std::ifstream fileWriter;
+        fileWriter.open("/etc/nbd-proxy/vmedia_credentials", std::ios::in);
+        if(fileWriter)
+        {
+           std::string temp_buf;
+           std::vector<std::string> filedata;
+           while(std::getline(fileWriter,temp_buf))
+           {
+              if((temp_buf.size() > 0) && (temp_buf.find(device_name) != std::string::npos))
+              {
+                 std::string outbuf;;
+                 outbuf = device_name + std::string("=") + instance;
+                 filedata.push_back(outbuf);
+              }
+              else if((temp_buf.size() > 0))
+              filedata.push_back(temp_buf);
+           }
+           fileWriter.close();
+           std::ofstream fileWriter ("/etc/nbd-proxy/vmedia_credentials",  std::ios::out | std::ios::trunc);
+           std::ostream_iterator<std::string> output_iterator(fileWriter,"\n");
+           std::copy(filedata.begin(), filedata.end(), output_iterator);
+           fileWriter.close();
+           return true;
+        }
+        return false;
+    }
+
+    static std::string getCredentials(const std::string& name)
+    {
+        std::ifstream fileWriter;
+        fileWriter.open("/etc/nbd-proxy/vmedia_credentials");
+        std::string temp_buf;
+	std::string value = "";
+        if(fileWriter)
+        {
+             while(std::getline(fileWriter,temp_buf))
+             {
+                if(temp_buf.find(name) != std::string::npos)
+		{
+		   std::size_t pos = temp_buf.find("=");
+		   value = temp_buf.substr (pos +1 );
+		   break;
+                }
+             }
+             fileWriter.close();
+        }
+        return value;
+    }
+    
     static int getmediasessionid(const std::string& file_path)
     {
     
@@ -770,7 +821,9 @@ class App
         addNBDProcessInterface("nbd4");
         addNBDProcessInterface("nbd5");
 	addmediasessionid("mediasession");
+        savecredentials("isocredentials");
         prepareNBDFile();
+        prepareCredentailsFile();
         devMonitor.run([this](const std::string& device, StateChange change) {
             configureUsbGadget(device, change);
         });
@@ -1397,7 +1450,23 @@ class App
        }
        return ret;
     }
-    
+
+    void prepareCredentailsFile(void)
+    {
+        std::ofstream fileWriter;
+        fileWriter.open("/etc/nbd-proxy/vmedia_credentials", std::ios::out | std::ios::trunc);
+        if(fileWriter)
+        {
+           fileWriter << "UserName=\n";
+           fileWriter << "PassWord=\n";
+           fileWriter << "MountType=\n";
+           fileWriter << "HostIP=\n";
+           fileWriter << "ImagePath=\n";
+           fileWriter.close();
+         }
+     }
+
+ 
     void prepareNBDFile(void)
     {
         std::ofstream fileWriter;
@@ -1586,6 +1655,60 @@ class App
         iface->initialize();
     }
 
+    void savecredentials(const std::string& name)
+    {
+        auto iface = objServer->add_interface(
+            "/xyz/openbmc_project/VirtualMedia/Credentials/" + name,
+            "xyz.openbmc_project.Credentials.Process");
+        iface->register_property(
+            "User", std::string(""),
+            [](const std::string& req, std::string& property){
+                        return Process::setCredentials("UserName",req);
+            },
+            [](const std::string& property){
+                   return Process::getCredentials("UserName");
+            });
+
+        iface->register_property(
+            "PassWord", std::string(""),
+            [](const std::string& req, std::string& property){
+                        return Process::setCredentials("PassWord",req);
+            },
+            [](const std::string& property){
+                   return Process::getCredentials("PassWord");
+            });
+
+        iface->register_property(
+            "MountType", std::string(""),
+            [](const std::string& req, std::string& property){
+                        return Process::setCredentials("MountType",req);
+            },
+            [](const std::string& property){
+                   return Process::getCredentials("MountType");
+            });
+
+        iface->register_property(
+            "HostIP", std::string(""),
+            [](const std::string& req, std::string& property){
+                        return Process::setCredentials("HostIP",req);
+            },
+            [](const std::string& property){
+                   return Process::getCredentials("HostIP");
+            });
+
+        iface->register_property(
+            "ImagePath", std::string(""),
+            [](const std::string& req, std::string& property){
+                        return Process::setCredentials("ImagePath",req);
+            },
+            [](const std::string& property){
+                   return Process::getCredentials("ImagePath");
+            });
+
+
+        iface->initialize();
+    }
+
     boost::asio::io_context& ioc;
     DeviceMonitor devMonitor;
     std::shared_ptr<sdbusplus::asio::connection> bus;
