diff -Naur a/image_manager.cpp b/image_manager.cpp
--- a/image_manager.cpp	2020-08-28 20:23:35.749002440 +0530
+++ b/image_manager.cpp	2020-08-28 20:27:45.064558883 +0530
@@ -14,6 +14,9 @@
 #include <elog-errors.hpp>
 #include <phosphor-logging/elog.hpp>
 #include <phosphor-logging/log.hpp>
+#include <fstream>
+#include <iostream>
+#include <sstream>
 #include <xyz/openbmc_project/Software/Image/error.hpp>
 
 #include <algorithm>
@@ -68,6 +71,34 @@
     return paths;
 }
 
+static std::string functionalImageVersion(const std::string& releaseFilePath)
+{
+    std::string versionKey = "VERSION_ID=";
+    std::string version{};
+    std::ifstream efile;
+    std::string line;
+    efile.open(releaseFilePath);
+
+    while (getline(efile, line))
+    {
+        if (line.substr(0, versionKey.size()).find(versionKey) !=
+            std::string::npos)
+        {
+            std::size_t pos = line.find_first_of('"') + 1;
+            version = line.substr(pos, line.find_last_of('"') - pos);
+            break;
+        }
+    }
+    efile.close();
+
+    if (version.empty())
+    {
+        log<level::ERR>("Error BMC current version is empty");
+    }
+
+    return version;
+}
+
 } // namespace
 
 int Manager::processImage(const std::string& tarFilePath)
@@ -177,17 +208,7 @@
     fs::path imageDirPath = std::string{IMG_UPLOAD_DIR};
     imageDirPath /= id;
 
-    if (fs::exists(imageDirPath))
-    {
-        fs::remove_all(imageDirPath);
-    }
-
-    // Rename the temp dir to image dir
-    fs::rename(tmpDirPath, imageDirPath);
-
-    // Clear the path, so it does not attemp to remove a non-existing path
-    tmpDirToRemove.path.clear();
-
+    // Create Version object
     auto objPath = std::string{SOFTWARE_OBJPATH} + '/' + id;
 
     // This service only manages the uploaded versions, and there could be
@@ -196,9 +217,16 @@
     auto allSoftwareObjs = getSoftwareObjects(bus);
     auto it =
         std::find(allSoftwareObjs.begin(), allSoftwareObjs.end(), objPath);
-    if (versions.find(id) == versions.end() && it == allSoftwareObjs.end())
-    {
-        // Create Version object
+
+    const std::string uploadVersion = version.c_str();
+    const std::string currentfunctionalVersion = functionalImageVersion(OS_RELEASE_FILE);
+    
+    if (versions.find(id) == versions.end() && it == allSoftwareObjs.end() && uploadVersion != currentfunctionalVersion )
+    {
+    	// Rename the temp dir to image dir
+    	fs::rename(tmpDirPath, imageDirPath);
+    	// Clear the path, so it does not attemp to remove a non-existing path
+    	tmpDirToRemove.path.clear();
         auto versionPtr = std::make_unique<Version>(
             bus, objPath, version, purpose, imageDirPath.string(),
             std::bind(&Manager::erase, this, std::placeholders::_1));
@@ -209,7 +237,14 @@
     }
     else
     {
-        log<level::INFO>("Software Object with the same version already exists",
+    	if (fs::exists(tmpDirPath))
+	{
+		//remove the tmpdir because that image is already present
+	        fs::remove_all(tmpDirPath);
+	}
+	// Clear the path, so it does not attemp to remove a non-existing path
+    	tmpDirToRemove.path.clear();
+	log<level::INFO>("Software Object with the same version already exists",
                          entry("VERSION_ID=%s", id.c_str()));
     }
     return 0;
