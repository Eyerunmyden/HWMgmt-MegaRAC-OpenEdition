diff -Naur a/image_manager.cpp b/image_manager.cpp
--- a/image_manager.cpp	2020-09-17 20:27:33.553827449 +0530
+++ b/image_manager.cpp	2020-09-17 20:25:05.493851466 +0530
@@ -71,34 +71,6 @@
     return paths;
 }
 
-static std::string functionalImageVersion(const std::string& releaseFilePath)
-{
-    std::string versionKey = "VERSION_ID=";
-    std::string version{};
-    std::ifstream efile;
-    std::string line;
-    efile.open(releaseFilePath);
-
-    while (getline(efile, line))
-    {
-        if (line.substr(0, versionKey.size()).find(versionKey) !=
-            std::string::npos)
-        {
-            std::size_t pos = line.find_first_of('"') + 1;
-            version = line.substr(pos, line.find_last_of('"') - pos);
-            break;
-        }
-    }
-    efile.close();
-
-    if (version.empty())
-    {
-        log<level::ERR>("Error BMC current version is empty");
-    }
-
-    return version;
-}
-
 } // namespace
 
 int Manager::processImage(const std::string& tarFilePath)
@@ -219,7 +191,7 @@
         std::find(allSoftwareObjs.begin(), allSoftwareObjs.end(), objPath);
 
     const std::string uploadVersion = version.c_str();
-    const std::string currentfunctionalVersion = functionalImageVersion(OS_RELEASE_FILE);
+    const std::string currentfunctionalVersion = Version::getBMCVersion(OS_RELEASE_FILE);
     
     if (versions.find(id) == versions.end() && it == allSoftwareObjs.end() && uploadVersion != currentfunctionalVersion )
     {
diff -Naur a/image_verify.cpp b/image_verify.cpp
--- a/image_verify.cpp	2020-09-16 20:13:47.902637414 +0530
+++ b/image_verify.cpp	2020-09-16 20:16:50.550471474 +0530
@@ -101,25 +101,50 @@
         fs::path publicKeyFile(imageDirPath / PUBLICKEY_FILE_NAME);
 
         // Validate the BMC image files.
-        for (const auto& bmcImage : bmcImages)
-        {
-            // Build Image File name
-            fs::path file(imageDirPath);
-            file /= bmcImage;
-
-            // Build Signature File name
-            fs::path sigFile(file);
-            sigFile.replace_extension(SIGNATURE_FILE_EXT);
-
-            // Verify the signature.
-            auto valid = verifyFile(file, sigFile, publicKeyFile, hashType);
-            if (valid == false)
-            {
-                log<level::ERR>("Image file Signature Validation failed",
-                                entry("IMAGE=%s", bmcImage.c_str()));
-                return false;
-            }
-        }
+	fs::path bmcFullImageFile (imageDirPath);
+	bmcFullImageFile /= imageBmc;
+	std::ifstream bmcFullImage(bmcFullImageFile);
+	if(bmcFullImage.good() != 1)
+	{
+		for (const auto& bmcImage : bmcImages)
+		{
+		    // Build Image File name
+		    fs::path file(imageDirPath);
+		    file /= bmcImage;
+	
+		    // Build Signature File name
+		    fs::path sigFile(file);
+		    sigFile.replace_extension(SIGNATURE_FILE_EXT);
+	
+		    // Verify the signature.
+		    auto valid = verifyFile(file, sigFile, publicKeyFile, hashType);
+		    if (valid == false)
+		    {
+		        log<level::ERR>("Image file Signature Validation failed",
+		                        entry("IMAGE=%s", bmcImage.c_str()));
+		        return false;
+		    }
+		}
+	}
+	else
+	{
+		// Build Image File name
+		    fs::path file(imageDirPath);
+		    file /= imageBmc;
+	
+		    // Build Signature File name
+		    fs::path sigFile(file);
+		    sigFile.replace_extension(SIGNATURE_FILE_EXT);
+	
+		    // Verify the signature.
+		    auto valid = verifyFile(file, sigFile, publicKeyFile, hashType);
+		    if (valid == false)
+		    {
+		        log<level::ERR>("Image file Signature Validation failed",
+		                        entry("IMAGE=%s", imageBmc.c_str()));
+		        return false;
+		    }
+	}
         // Validate the optional image files.
         auto optionalImages = getOptionalImages();
         for (const auto& optionalImage : optionalImages)
@@ -127,14 +152,13 @@
             // Build Image File name
             fs::path file(imageDirPath);
             file /= optionalImage;
-
             if (fs::exists(file))
             {
                 // Build Signature File name
                 fs::path sigFile(file);
                 sigFile.replace_extension(SIGNATURE_FILE_EXT);
-
-                // Verify the signature.
+        
+		// Verify the signature.
                 auto valid = verifyFile(file, sigFile, publicKeyFile, hashType);
                 if (valid == false)
                 {
@@ -146,7 +170,6 @@
         }
 
         log<level::DEBUG>("Successfully completed Signature vaildation.");
-
         return true;
     }
     catch (const InternalFailure& e)
