diff -Naur a/include/authorization.hpp b/include/authorization.hpp
--- a/include/authorization.hpp	2021-03-02 19:56:21.658768781 +0530
+++ b/include/authorization.hpp	2021-03-02 19:50:42.040934411 +0530
@@ -21,6 +21,8 @@
 namespace authorization
 {
 
+bool BadRequest=false;
+
 static void cleanupTempSession(Request& req)
 {
     // TODO(ed) THis should really be handled by the persistent data
@@ -44,11 +46,13 @@
     std::string_view param = auth_header.substr(strlen("Basic "));
     if (!crow::utility::base64Decode(param, authData))
     {
+	BadRequest=true;
         return nullptr;
     }
     std::size_t separator = authData.find(':');
     if (separator == std::string::npos)
     {
+	BadRequest=true;
         return nullptr;
     }
 
@@ -56,10 +60,15 @@
     separator += 1;
     if (separator > authData.size())
     {
+	BadRequest=true;
         return nullptr;
     }
     std::string pass = authData.substr(separator);
 
+    if( user.empty() || pass.empty() )
+    	BadRequest=true;
+
+
     BMCWEB_LOG_DEBUG << "[AuthMiddleware] Authenticating user: " << user;
 
     int pamrc = pamAuthenticateUser(user, pass);
@@ -293,7 +302,19 @@
         }
         else
         {
-            res.result(boost::beast::http::status::unauthorized);
+
+           //res.result(boost::beast::http::status::unauthorized);
+            if(BadRequest)
+            {
+               res.result(boost::beast::http::status::bad_request);
+               BadRequest=false;
+            }
+            else
+            {
+               res.result(boost::beast::http::status::unauthorized);
+            }
+
+
             // only send the WWW-authenticate header if this isn't a xhr
             // from the browser.  most scripts,
             if (req.getHeaderValue("User-Agent").empty())
