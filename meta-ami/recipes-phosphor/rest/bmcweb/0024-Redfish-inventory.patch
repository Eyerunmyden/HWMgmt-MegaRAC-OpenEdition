diff -Naur /home/chandru/OPENBMC/21-10-20-OSP2.1/osp/build/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/bmcweb/1.0+gitAUTOINC-r0/bmcweb/redfish-core/lib/inventory.hpp bmcweb/redfish-core/lib/inventory.hpp
--- /home/chandru/OPENBMC/21-10-20-OSP2.1/osp/build/tmp/work/armv7ahf-vfpv4d16-openbmc-linux-gnueabi/bmcweb/1.0+gitAUTOINC-r0/bmcweb/redfish-core/lib/inventory.hpp	2020-11-09 15:25:43.377614399 +0530
+++ bmcweb/redfish-core/lib/inventory.hpp	2020-11-09 12:47:41.243761072 +0530
@@ -53,12 +53,6 @@
             {boost::beast::http::verb::put, {{"ConfigureComponents"}}},
             {boost::beast::http::verb::delete_, {{"ConfigureComponents"}}},
             {boost::beast::http::verb::post, {{"ConfigureComponents"}}}};
-	    /*{boost::beast::http::verb::get, {}},
-            {boost::beast::http::verb::head, {}},
-            {boost::beast::http::verb::patch, {}},
-            {boost::beast::http::verb::put, {}},
-            {boost::beast::http::verb::delete_, {}},
-            {boost::beast::http::verb::post, {}}};*/
 
     }
 
@@ -69,30 +63,48 @@
     {
 	    res.jsonValue["@odata.id"] = "/redfish/v1/Oem/Ami/InventoryData";
 	    res.jsonValue["@odata.context"] = "/redfish/v1/$metadata";
-	    cout << "from doGet inv data  111";
-	    std::ifstream hinv_json_file("/etc/redfish/inventory.json");
+	    std::ifstream hinv_json_file("/etc/redfish/host-inventory.json");
 
-	    cout << " from doGet inv data  22222\n";
 	    //host inventory json data file, will get from host interface feature
 	    //json inven_json;
 
 	    if( !hinv_json_file.good())
 	    {
-		    cout<<"file open failed exiting from inv fn "<<endl;
+
+		    //system uris
+		    res.jsonValue["System"] = {{"@odata.id", "/redfish/v1/Systems/system"}};
+		    res.jsonValue["System"]["Bios"] = {{"@odata.id", "/redfish/v1/Systems/system/Bios"}};
+		    res.jsonValue["System"]["EthernetInterfaces"] = {{"@odata.id", "/redfish/v1/Systems/system/EthernetInterfaces"}};
+		    res.jsonValue["System"]["LogServices"] = {{"@odata.id", "/redfish/v1/Systems/system/LogServices"}};
+		    res.jsonValue["System"]["Memory"] = {{"@odata.id", "/redfish/v1/Systems/system/Memory"}};
+		    res.jsonValue["System"]["NetworkInterfaces"] = {{"@odata.id", "/redfish/v1/Systems/system/NetworkInterfaces"}};
+		    res.jsonValue["System"]["Processors"] = {{"@odata.id", "/redfish/v1/Systems/system/Processors"}};
+		    res.jsonValue["System"]["SecureBoot"] = {{"@odata.id", "/redfish/v1/Systems/system/SecureBoot"}};
+		    res.jsonValue["System"]["Storage"] = {{"@odata.id", "/redfish/v1/Systems/system/Storage"}};
+
+
+		    //registry uris
+		    res.jsonValue["Registries"]  = {{"Members",
+			    {{{"@odata.id", "/redfish/v1/Registries/Base"}},
+				    {{"@odata.id", "/redfish/v1/Registries/TaskEvent"}},
+				    {{"@odata.id", "/redfish/v1/Registries/OpenBMC"}}}}};
+
+
+		    //chassis uris
+		    res.jsonValue["Chassis"] = {{"@odata.id", "/redfish/v1/Chassis/WFP_Baseboard"}};
+		    res.jsonValue["Chassis"]["Power"] = {{"@odata.id", "/redfish/v1/Chassis/WFP_Baseboard/Power"}};
+		    res.jsonValue["Chassis"]["Sensors"] = {{"@odata.id", "/redfish/v1/Chassis/WFP_Baseboard/Sensors"}};
+		    res.jsonValue["Chassis"]["Thermal"] = {{"@odata.id", "/redfish/v1/Chassis/WFP_Baseboard/Thermal"}};
+
+
 		    res.end();		    	
 		    return ;
 	    }
 	    else
 	    {
-		    cout<<"file open success"<<endl;
-		    /*inven_json["GroupCrcList"]["DIMM"];
-		      inven_json["GroupCrcList"]["CPU"];
-		      inven_json["GroupCrcList"]["PCIE"];
-		      inven_json["GroupCrcList"]["CERTIFICATE"];*/
 
 		    json inven_json;
 		    hinv_json_file >> inven_json;
-		    //hinv_json_file >> inven_json;
 		    nlohmann::json& crcArray = res.jsonValue["System"]["Oem"]["Ami"]["Bios"]["Inventory"]["Crc"]["GroupCrcList"];
 		    //crcArray.push_back({{"CERTIFICATE","1518931307"}});
 		    crcArray.push_back({{"DIMM",inven_json["GroupCrcList"]["DIMM"]}});
@@ -113,27 +125,25 @@
     void doPost(crow::Response &res, const crow::Request &req,
                 const std::vector<std::string> &params) override
     {
-        auto asyncResp = std::make_shared<AsyncResp>(res);
-	std::ofstream RedfishFilePtr;
-	int ret;
-
-        nlohmann::json reqJson =
-                nlohmann::json::parse(req.body, nullptr, false);
-
-
-	
-	ret = mkdir(Redfish_Inventory_Dir.c_str(), 0777);
-	if (ret < 0)
-	{
-	    BMCWEB_LOG_DEBUG <<
-		    "Redfish directory already present. ";
-	}
-
-	RedfishFilePtr.open (Redfish_Inventory_Dir + Redfish_Inventory,
-			     std::ios::out | std::ios::trunc);
-        RedfishFilePtr << req.body;
+	    auto asyncResp = std::make_shared<AsyncResp>(res);
+	    std::ofstream RedfishFilePtr;
+	    int ret;
+
+	    nlohmann::json reqJson =
+		    nlohmann::json::parse(req.body, nullptr, false);
+
+	    ret = mkdir(Redfish_Inventory_Dir.c_str(), 0777);
+	    if (ret < 0)
+	    {
+		    BMCWEB_LOG_DEBUG <<
+			    "Redfish directory already present. ";
+	    }
+
+	    RedfishFilePtr.open (Redfish_Inventory_Dir + Redfish_Inventory,
+			    std::ios::out | std::ios::trunc);
+	    RedfishFilePtr << req.body;
 
-	RedfishFilePtr.close();
+	    RedfishFilePtr.close();
     }
 };
 } //namespace redfish 
