diff -Naur a/include/cpld_image_upload.hpp b/include/cpld_image_upload.hpp
--- a/include/cpld_image_upload.hpp	1970-01-01 05:30:00.000000000 +0530
+++ b/include/cpld_image_upload.hpp	2021-03-02 17:28:57.703052726 +0530
@@ -0,0 +1,133 @@
+#pragma once
+
+#include <app.h>
+
+#include <boost/uuid/uuid.hpp>
+#include <boost/uuid/uuid_generators.hpp>
+#include <boost/uuid/uuid_io.hpp>
+#include <dbus_singleton.hpp>
+
+#include <cstdio>
+#include <fstream>
+#include <memory>
+
+namespace crow
+{
+namespace cpld_image_upload
+{
+
+std::unique_ptr<sdbusplus::bus::match::match> fwUpdateMatcher;
+
+inline void uploadCpldImageHandler(const crow::Request& req, crow::Response& res,
+                               const std::string& filename)
+{
+    // Only allow one FW update at a time
+
+    if (fwUpdateMatcher != nullptr)
+    {
+        res.addHeader("Retry-After", "30");
+        res.result(boost::beast::http::status::service_unavailable);
+        res.end();
+        return;
+    }
+    // Make this const static so it survives outside this method
+    static boost::asio::steady_timer timeout(*req.ioService,
+                                             std::chrono::seconds(5));
+
+    timeout.expires_after(std::chrono::seconds(15));
+
+    auto timeoutHandler = [&res](const boost::system::error_code& ec) {
+        fwUpdateMatcher = nullptr;
+        if (ec == asio::error::operation_aborted)
+        {
+            // expected, we were canceled before the timer completed.
+            return;
+        }
+        BMCWEB_LOG_ERROR << "Timed out waiting for Version interface";
+
+        if (ec)
+        {
+            BMCWEB_LOG_ERROR << "Async_wait failed " << ec;
+            return;
+        }
+
+        res.result(boost::beast::http::status::bad_request);
+        res.jsonValue = {
+            {"data",
+             {{"description",
+               "Version already exists or failed to extracted tar file or CPLD device is not connected or upload image is failed"}}},
+            {"message", "400 Bad Request"},
+            {"status", "error"}};
+        res.end();
+    };
+
+    std::function<void(sdbusplus::message::message&)> callback =
+        [&res](sdbusplus::message::message& m) {
+            BMCWEB_LOG_DEBUG << "Match fired";
+
+            sdbusplus::message::object_path path;
+            std::vector<std::pair<
+                std::string,
+                std::vector<std::pair<std::string, std::variant<std::string>>>>>
+                interfaces;
+            m.read(path, interfaces);
+
+            if (std::find_if(interfaces.begin(), interfaces.end(),
+                             [](const auto& i) {
+                                 return i.first ==
+                                        "xyz.openbmc_project.Cpld.Version";
+                             }) != interfaces.end())
+            {
+                timeout.cancel();
+
+                std::size_t index = path.str.rfind('/');
+                if (index != std::string::npos)
+                {
+                    path.str.erase(0, index + 1);
+                }
+                res.jsonValue = {{"data", std::move(path.str)},
+                                 {"message", "200 OK"},
+                                 {"status", "ok"}};
+                BMCWEB_LOG_DEBUG << "ending response";
+                res.end();
+                fwUpdateMatcher = nullptr;
+            }
+        };
+
+    fwUpdateMatcher = std::make_unique<sdbusplus::bus::match::match>(
+        *crow::connections::systemBus,
+        "interface='org.freedesktop.DBus.ObjectManager',type='signal',"
+        "member='InterfacesAdded',path='/xyz/openbmc_project/cpld'",
+        callback);
+
+    std::string filepath(
+        "/tmp/cpld/" +
+        boost::uuids::to_string(boost::uuids::random_generator()()));
+    BMCWEB_LOG_DEBUG << "Writing file to " << filepath;
+    std::ofstream out(filepath, std::ofstream::out | std::ofstream::binary |
+                                    std::ofstream::trunc);
+    out << req.body;
+    out.close();
+    timeout.async_wait(timeoutHandler);
+}
+
+template <typename... Middlewares>
+void requestRoutes(Crow<Middlewares...>& app)
+{
+    BMCWEB_ROUTE(app, "/new/cpldimage/<str>")
+	 .requires({"ConfigureComponents", "ConfigureManager"})
+        .methods(boost::beast::http::verb::post, boost::beast::http::verb::put)(
+            [](const crow::Request& req, crow::Response& res,
+               const std::string& filename) {
+                uploadCpldImageHandler(req, res, filename);
+            });
+
+    BMCWEB_ROUTE(app, "/new/cpldimage")
+	 .requires({"ConfigureComponents", "ConfigureManager"})
+        .methods(boost::beast::http::verb::post, boost::beast::http::verb::put)(
+            [](const crow::Request& req, crow::Response& res) {
+                uploadCpldImageHandler(req, res, "");
+            });
+}
+} // namespace cpld_image_upload
+} // namespace crow
diff -Naur a/src/webserver_main.cpp b/src/webserver_main.cpp
--- a/src/webserver_main.cpp	2021-03-02 17:33:12.007771170 +0530
+++ b/src/webserver_main.cpp	2021-03-02 17:28:57.707052734 +0530
@@ -5,6 +5,7 @@
 #include <dbus_monitor.hpp>
 #include <dbus_singleton.hpp>
 #include <image_upload.hpp>
+#include <cpld_image_upload.hpp>
 #include <kvm_websocket.hpp>
 #include <login_routes.hpp>
 #include <obmc_console.hpp>
@@ -88,6 +89,7 @@
 #ifdef BMCWEB_ENABLE_DBUS_REST
     crow::dbus_monitor::requestRoutes(app);
     crow::image_upload::requestRoutes(app);
+    crow::cpld_image_upload::requestRoutes(app);
     crow::openbmc_mapper::requestRoutes(app);
 #endif
 
