--- a/include/pam_authenticate.hpp	2021-03-23 20:27:28.437257701 -0400
+++ b/include/pam_authenticate.hpp	2021-03-23 20:22:37.762581616 -0400
@@ -7,6 +7,7 @@
 #include <cstring>
 #include <memory>
 
+inline int passwordPolicy=0;
 // function used to get user input
 inline int pamFunctionConversation(int numMsg, const struct pam_message** msg,
                                    struct pam_response** resp, void* appdataPtr)
@@ -64,8 +65,16 @@
         pamFunctionConversation, const_cast<char*>(passStr.c_str())};
     pam_handle_t* localAuthHandle = nullptr; // this gets set by pam_start
 
-    int retval = pam_start("webserver", userStr.c_str(), &localConversation,
-                           &localAuthHandle);
+    int retval = 0;
+    if(passwordPolicy)
+      {
+	retval = pam_start("webservercomplex", userStr.c_str(), &localConversation, &localAuthHandle);
+      }
+    else
+      {
+	retval = pam_start("webserver", userStr.c_str(), &localConversation, &localAuthHandle);
+      }
+
     if (retval != PAM_SUCCESS)
     {
         return retval;
@@ -97,9 +106,16 @@
         pamFunctionConversation, const_cast<char*>(password.c_str())};
     pam_handle_t* localAuthHandle = nullptr; // this gets set by pam_start
 
-    int retval = pam_start("webserver", username.c_str(), &localConversation,
-                           &localAuthHandle);
+    int retval = 0;
+    if(passwordPolicy)
+      {
+	retval = pam_start("webservercomplex", username.c_str(), &localConversation, &localAuthHandle);
+      }
+    else
+      {
+	retval = pam_start("webserver", username.c_str(), &localConversation, &localAuthHandle);
+      }
 
     if (retval != PAM_SUCCESS)
     {


--- a/redfish-core/lib/account_service.hpp       2021-03-25 13:14:11.754587737 -0400
+++ b/redfish-core/lib/account_service.hpp     2021-03-25 13:12:23.629654593 -0400
@@ -1250,6 +1250,17 @@
                                 .jsonValue["AccountLockoutThreshold"] = *value;
                         }
                     }
+                   if (property.first == "PasswordPolicy")
+                    {
+                        const uint16_t* value =
+                            std::get_if<uint16_t>(&property.second);
+                       passwordPolicy = *value;
+                        if (value != nullptr)
+                        {
+                            asyncResp->res
+                                .jsonValue["PasswordPolicyComplexity"] = *value;
+                        }
+                    }
                 }
             },
             "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
