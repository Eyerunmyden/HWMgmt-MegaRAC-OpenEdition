diff -Naur a/redfish-core/include/event_service_manager.hpp b/redfish-core/include/event_service_manager.hpp
--- a/redfish-core/include/event_service_manager.hpp	2021-03-29 15:28:43.585954016 +0530
+++ b/redfish-core/include/event_service_manager.hpp	2021-03-29 15:20:35.405498936 +0530
@@ -50,8 +50,8 @@
 
 #ifndef BMCWEB_ENABLE_REDFISH_DBUS_LOG_ENTRIES
 static std::optional<boost::asio::posix::stream_descriptor> inotifyConn;
-static constexpr const char* redfishEventLogDir = "/var/log";
-static constexpr const char* redfishEventLogFile = "/var/log/redfish";
+static constexpr const char* redfishEventLogDir = "/var/sellog";
+static constexpr const char* redfishEventLogFile = "/var/sellog/redfish";
 static constexpr const size_t iEventSize = sizeof(inotify_event);
 static int inotifyFd = -1;
 static int dirWatchDesc = -1;
diff -Naur a/redfish-core/lib/log_services.hpp b/redfish-core/lib/log_services.hpp
--- a/redfish-core/lib/log_services.hpp	2021-03-29 15:28:35.806010255 +0530
+++ b/redfish-core/lib/log_services.hpp	2021-03-29 15:20:58.545329892 +0530
@@ -373,10 +373,66 @@
     return true;
 }
 
+static void genevent(){
+
+    static constexpr auto SEN_SEL_SERVICE =
+        "xyz.openbmc_project.Eventsensor";
+    static constexpr auto SEN_SEL_ROOT =
+        "/xyz/openbmc_project/sensors/event_logging_disabled/SEL";
+    static constexpr auto SEN_SEL_INTERFACE =
+        "xyz.openbmc_project.Sensor.Discrete.State";
+    static constexpr auto SEN_SET_INTERFACE = "org.freedesktop.DBus.Properties";
+    static constexpr auto SEN_SEL_STATPROP = "ActiveAlarmState";
+    static constexpr auto SEN_SEL_DATAPROP = "EventData";
+
+    std::vector<uint8_t> d = {0x02, 0xFF, 0xFF};
+    uint8_t al = 0x04;
+
+    for(int  i = 0; i < 0x1fff; i++){
+      //to reload rsyslog.service
+    }
+    try
+    {
+       d = {0xff, 0xff, 0xff};
+       al = 0x00;
+       sdbusplus::message::message method =
+            crow::connections::systemBus->new_method_call(SEN_SEL_SERVICE, SEN_SEL_ROOT,
+					SEN_SET_INTERFACE, "Set");
+        method.append(SEN_SEL_INTERFACE,SEN_SEL_DATAPROP,std::variant<std::vector<std::uint8_t>>{d});
+        crow::connections::systemBus->call_noreply(method);
+
+        method =
+            crow::connections::systemBus->new_method_call(SEN_SEL_SERVICE, SEN_SEL_ROOT,
+                                SEN_SET_INTERFACE, "Set");
+        method.append(SEN_SEL_INTERFACE,SEN_SEL_STATPROP,std::variant<uint8_t>{al});
+        crow::connections::systemBus->call_noreply(method);
+
+       d = {0x02, 0xff, 0xff};
+       al = 0x04;
+        method =
+            crow::connections::systemBus->new_method_call(SEN_SEL_SERVICE, SEN_SEL_ROOT,
+                                SEN_SET_INTERFACE, "Set");
+        method.append(SEN_SEL_INTERFACE,SEN_SEL_DATAPROP,std::variant<std::vector<uint8_t>>{d});
+        crow::connections::systemBus->call_noreply(method);
+
+       method =
+            crow::connections::systemBus->new_method_call(SEN_SEL_SERVICE, SEN_SEL_ROOT,
+                                SEN_SET_INTERFACE, "Set");
+
+	method.append(SEN_SEL_INTERFACE,SEN_SEL_STATPROP,std::variant<uint8_t>{al});
+        crow::connections::systemBus->call_noreply(method);
+    }
+    catch (sdbusplus::exception_t& e)
+    {
+	    BMCWEB_LOG_ERROR << "Set clear prop error\n";
+    }
+
+}
+
 static bool
     getRedfishLogFiles(std::vector<std::filesystem::path>& redfishLogFiles)
 {
-    static const std::filesystem::path redfishLogDir = "/var/log";
+    static const std::filesystem::path redfishLogDir = "/var/sellog";
     static const std::string redfishLogFilename = "redfish";
 
     // Loop through the directory looking for redfish log files
@@ -398,6 +454,32 @@
     return !redfishLogFiles.empty();
 }
 
+static bool
+    getIpmiSelLogFiles(std::vector<std::filesystem::path>& IpmiSelLogFiles)
+{
+    static const std::filesystem::path IpmiSelLogDir = "/var/sellog";
+    static const std::string IpmiSelLogFilename = "ipmi_sel";
+
+    // Loop through the directory looking for IPMI SEL log files
+    for (const std::filesystem::directory_entry& dirEnt :
+         std::filesystem::directory_iterator(IpmiSelLogDir))
+    {
+        // If we find a IPMI SEL log file, save the path
+        std::string filename = dirEnt.path().filename();
+        if (boost::starts_with(filename, IpmiSelLogFilename))
+        {
+            IpmiSelLogFiles.emplace_back(IpmiSelLogDir / filename);
+        }
+    }
+    // As the log files rotate, they are appended with a ".#" that is higher for
+    // the older logs. Since we don't expect more than 10 log files, we
+    // can just sort the list to get them in order from newest to oldest
+    std::sort(IpmiSelLogFiles.begin(), IpmiSelLogFiles.end());
+
+    return !IpmiSelLogFiles.empty();
+}
+
+
 inline void getDumpEntryCollection(std::shared_ptr<AsyncResp>& asyncResp,
                                    const std::string& dumpType)
 {
@@ -860,6 +942,8 @@
                                    dumpType});
 }
 
+
+
 static void parseCrashdumpParameters(
     const std::vector<std::pair<std::string, VariantType>>& params,
     std::string& filename, std::string& timestamp, std::string& logfile)
@@ -1055,6 +1139,17 @@
     {
         std::shared_ptr<AsyncResp> asyncResp = std::make_shared<AsyncResp>(res);
 
+	// Clear the IPMI SEL Log by deleting the log files
+        std::vector<std::filesystem::path> IpmiSelLogFiles;
+        if (getIpmiSelLogFiles(IpmiSelLogFiles))
+        {
+            for (const std::filesystem::path& file : IpmiSelLogFiles)
+            {
+                std::error_code ec;
+                std::filesystem::remove(file, ec);
+            }
+        }
+
         // Clear the EventLog by deleting the log files
         std::vector<std::filesystem::path> redfishLogFiles;
         if (getRedfishLogFiles(redfishLogFiles))
@@ -1081,6 +1176,7 @@
             "org.freedesktop.systemd1", "/org/freedesktop/systemd1",
             "org.freedesktop.systemd1.Manager", "ReloadUnit", "rsyslog.service",
             "replace");
+	genevent();
     }
 };
 
