diff -Naur a/http/http_response.hpp b/http/http_response.hpp
--- a/http/http_response.hpp	2021-02-16 09:45:11.254402423 +0000
+++ b/http/http_response.hpp	2021-02-16 09:49:13.423680461 +0000
@@ -142,7 +142,7 @@
     // In case of a JSON object, set the Content-Type header
     void jsonMode()
     {
-        addHeader("Content-Type", "application/json");
+        addHeader("Content-Type", "application/json; charset=UTF-8");
     }
 };
 } // namespace crow
diff -Naur a/include/security_headers.hpp b/include/security_headers.hpp
--- a/include/security_headers.hpp	2021-02-16 09:45:11.258402521 +0000
+++ b/include/security_headers.hpp	2021-02-16 09:57:57.234786230 +0000
@@ -10,6 +10,7 @@
      javascript file.  It doesn't hurt anything, it's just ugly.
      */
     using bf = boost::beast::http::field;
+#if 0    
     res.addHeader(bf::strict_transport_security, "max-age=31536000; "
                                                  "includeSubdomains; "
                                                  "preload");
@@ -21,7 +22,14 @@
     res.addHeader("X-XSS-Protection", "1; "
                                       "mode=block");
     res.addHeader("X-Content-Type-Options", "nosniff");
+#endif
 
+    res.addHeader(bf::access_control_allow_origin, "*");
+    res.addHeader(bf::access_control_expose_headers, "X-Auth-Token");
+    res.addHeader(bf::access_control_allow_headers, "X-Auth-Token");
+    res.addHeader(bf::access_control_allow_credentials, "true");
+    res.addHeader(bf::cache_control, "no-cache, must-revalidate");
+    
 #ifndef BMCWEB_INSECURE_DISABLE_XSS_PREVENTION
     res.addHeader("Content-Security-Policy", "default-src 'none'; "
                                              "img-src 'self' data:; "
@@ -56,6 +64,5 @@
                                                     "Accept, "
                                                     "Cookie, "
                                                     "X-XSRF-TOKEN");
-
 #endif
 }
diff -Naur a/redfish-core/include/headers.hpp b/redfish-core/include/headers.hpp
--- a/redfish-core/include/headers.hpp	1970-01-01 00:00:00.000000000 +0000
+++ b/redfish-core/include/headers.hpp	2021-02-16 10:08:58.425970009 +0000
@@ -0,0 +1,79 @@
+/*
+// Copyright (c) 2018 Intel Corporation
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+#pragma once
+
+#include <vector>
+
+namespace redfish
+{
+
+/**
+ * @brief  Abstract class used for implementing Redfish headers.
+ *
+ */
+namespace Header
+{
+    static constexpr char const *RedfishSchemaPath = "/usr/share/www/redfish/v1/schema/";
+
+    /**
+     * @brief Get all the supported allow headers for the URI. 
+     * @param[in] Redfish Schema file for that URI.
+     * 
+     * @return supported allow headers string
+     */
+    std::string GetAllowHeaders (const std::string& SchemaFile) 
+    {
+        std::ifstream fileWriter;
+	std::vector <std::string> allow_header;
+        std::string temp_buf, HeaderBuf;
+    
+        const char *allow_schema_buf[3] = {"Insertable","Updatable","Deletable"};
+        const char *allow_method_buf[3] = {"POST","PATCH","DELETE"};
+    
+        fileWriter.open(RedfishSchemaPath + SchemaFile);
+        allow_header.emplace_back("GET");
+
+	if(fileWriter)
+	{
+           for(int i=0; i<3; i++)
+           {
+               while(std::getline(fileWriter,temp_buf))
+               {
+                   if(temp_buf.find(allow_schema_buf[i]) != std::string::npos)
+                   {
+                      if(temp_buf.find("true") != std::string::npos)
+                      {
+                         allow_header.emplace_back(std::string(",") + allow_method_buf[i]);
+                         break;
+                      }
+                   }
+               }
+               fileWriter.clear();
+               fileWriter.seekg(0);
+           }
+	}
+        fileWriter.close();
+
+        for (auto const&it : allow_header)
+        {
+           HeaderBuf += it;
+        }
+	return HeaderBuf;
+    }
+
+}
+
+} // namespace redfish
diff -Naur a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
--- a/redfish-core/lib/account_service.hpp	2021-02-16 09:45:11.258402521 +0000
+++ b/redfish-core/lib/account_service.hpp	2021-02-16 10:23:29.751730569 +0000
@@ -15,6 +15,7 @@
 */
 #pragma once
 #include "node.hpp"
+#include "headers.hpp"
 
 #include <dbus_utility.hpp>
 #include <error_messages.hpp>
@@ -1220,6 +1221,8 @@
 
         getLDAPConfigData("LDAP", callback);
         getLDAPConfigData("ActiveDirectory", callback);
+	res.addHeader(boost::beast::http::field::allow,
+		                redfish::Header::GetAllowHeaders("AccountService_v1.xml"));
     }
 
     void doPatch(crow::Response& res, const crow::Request& req,
@@ -1315,6 +1318,9 @@
                 "MaxLoginAttemptBeforeLockout",
                 std::variant<uint16_t>(*lockoutThreshold));
         }
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+		                 redfish::Header::GetAllowHeaders("AccountService_v1.xml"));
     }
 };
 
@@ -1393,6 +1399,8 @@
                 }
                 asyncResp->res.jsonValue["Members@odata.count"] =
                     memberArray.size();
+	        asyncResp->res.addHeader(boost::beast::http::field::allow,
+			                 redfish::Header::GetAllowHeaders("ManagerAccountCollection_v1.xml"));
             },
             "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
             "org.freedesktop.DBus.ObjectManager", "GetManagedObjects");
@@ -1495,6 +1503,8 @@
                         asyncResp->res.addHeader(
                             "Location",
                             "/redfish/v1/AccountService/Accounts/" + username);
+	                asyncResp->res.addHeader(boost::beast::http::field::allow,
+			      			 redfish::Header::GetAllowHeaders("ManagerAccountCollection_v1.xml"));
                     },
                     "xyz.openbmc_project.User.Manager",
                     "/xyz/openbmc_project/user",
@@ -1674,6 +1684,8 @@
                     "/redfish/v1/AccountService/Accounts/" + accountName;
                 asyncResp->res.jsonValue["Id"] = accountName;
                 asyncResp->res.jsonValue["UserName"] = accountName;
+	        asyncResp->res.addHeader(boost::beast::http::field::allow,
+			                 redfish::Header::GetAllowHeaders("ManagerAccountCollection_v1.xml"));
             },
             "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
             "org.freedesktop.DBus.ObjectManager", "GetManagedObjects");
@@ -1751,6 +1763,8 @@
             "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
             "xyz.openbmc_project.User.Manager", "RenameUser", username,
             *newUserName);
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+		                 redfish::Header::GetAllowHeaders("ManagerAccountCollection_v1.xml"));
     }
 
     void updateUserProperties(std::shared_ptr<AsyncResp> asyncResp,
@@ -1912,6 +1926,8 @@
                 }
 
                 messages::accountRemoved(asyncResp->res);
+	        asyncResp->res.addHeader(boost::beast::http::field::allow,
+	        	                 redfish::Header::GetAllowHeaders("ManagerAccountCollection_v1.xml"));
             },
             "xyz.openbmc_project.User.Manager", userPath,
             "xyz.openbmc_project.Object.Delete", "Delete");
diff -Naur a/redfish-core/lib/bios.hpp b/redfish-core/lib/bios.hpp
--- a/redfish-core/lib/bios.hpp	2021-02-16 09:45:11.258402521 +0000
+++ b/redfish-core/lib/bios.hpp	2021-02-16 10:24:58.129165371 +0000
@@ -1,6 +1,7 @@
 #pragma once
 
 #include "node.hpp"
+#include "headers.hpp"
 
 #include <utils/fw_utils.hpp>
 namespace redfish
@@ -35,6 +36,8 @@
         // Get the ActiveSoftwareImage and SoftwareImages
         fw_util::populateFirmwareInformation(asyncResp, fw_util::biosPurpose,
                                              "", true);
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("Bios_v1.xml"));
     }
 };
 /**
@@ -69,6 +72,8 @@
                     messages::internalError(asyncResp->res);
                     return;
                 }
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	                         redfish::Header::GetAllowHeaders("Bios_v1.xml"));
             },
             "org.open_power.Software.Host.Updater",
             "/xyz/openbmc_project/software",
diff -Naur a/redfish-core/lib/certificate_service.hpp b/redfish-core/lib/certificate_service.hpp
--- a/redfish-core/lib/certificate_service.hpp	2021-02-16 09:45:11.258402521 +0000
+++ b/redfish-core/lib/certificate_service.hpp	2021-02-16 10:27:30.899575160 +0000
@@ -16,6 +16,7 @@
 #pragma once
 
 #include "node.hpp"
+#include "headers.hpp"
 
 #include <boost/convert.hpp>
 #include <boost/convert/strtol.hpp>
@@ -87,6 +88,8 @@
         res.jsonValue["Actions"]["#CertificateService.GenerateCSR"] = {
             {"target", "/redfish/v1/CertificateService/Actions/"
                        "CertificateService.GenerateCSR"}};
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("CertificateService_v1.xml"));	
         res.end();
     }
 }; // CertificateService
@@ -488,6 +491,8 @@
                     messages::internalError(asyncResp->res);
                     return;
                 }
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	           	         redfish::Header::GetAllowHeaders("CertificateService_v1.xml"));	
             },
             service, objectPath, "xyz.openbmc_project.Certs.CSR.Create",
             "GenerateCSR", *optAlternativeNames, *optChallengePassword, city,
@@ -796,6 +801,8 @@
                 }
                 getCertificateProperties(asyncResp, objectPath, service, id,
                                          certURI, name);
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	           	         redfish::Header::GetAllowHeaders("CertificateService_v1.xml"));	
                 BMCWEB_LOG_DEBUG << "HTTPS certificate install file="
                                  << certFile->getCertFilePath();
             },
@@ -846,6 +853,8 @@
         objectPath += std::to_string(id);
         getCertificateProperties(asyncResp, objectPath, certs::httpsServiceName,
                                  id, certURL, "HTTPS Certificate");
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                   	         redfish::Header::GetAllowHeaders("ManagerNetworkProtocol_v1.xml"));	
     }
 
 }; // namespace redfish
@@ -903,6 +912,8 @@
                 }
                 asyncResp->res.jsonValue["Members@odata.count"] =
                     members.size();
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	           	         redfish::Header::GetAllowHeaders("CertificateCollection_v1.xml"));	
             },
             certs::httpsServiceName, certs::httpsObjectPath,
             certs::dbusObjManagerIntf, "GetManagedObjects");
@@ -952,6 +963,8 @@
                 getCertificateProperties(asyncResp, objectPath,
                                          certs::httpsServiceName, certId,
                                          certURL, "HTTPS Certificate");
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	           	         redfish::Header::GetAllowHeaders("CertificateCollection_v1.xml"));	
                 BMCWEB_LOG_DEBUG << "HTTPS certificate install file="
                                  << certFile->getCertFilePath();
             },
@@ -1007,6 +1020,8 @@
         getCertificateLocations(
             asyncResp, "/redfish/v1/Managers/bmc/Truststore/Certificates/",
             certs::authorityObjectPath, certs::authorityServiceName);
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("CertificateLocations_v1.xml"));
     }
     /**
      * @brief Retrieve the certificates installed list and append to the
@@ -1101,6 +1116,9 @@
                 }
                 asyncResp->res.jsonValue["Members@odata.count"] =
                     members.size();
+
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                         redfish::Header::GetAllowHeaders("CertificateCollection_v1.xml"));
             },
             certs::ldapServiceName, certs::ldapObjectPath,
             certs::dbusObjManagerIntf, "GetManagedObjects");
diff -Naur a/redfish-core/lib/chassis.hpp b/redfish-core/lib/chassis.hpp
--- a/redfish-core/lib/chassis.hpp	2021-02-16 09:45:11.258402521 +0000
+++ b/redfish-core/lib/chassis.hpp	2021-02-16 10:29:03.865006443 +0000
@@ -18,6 +18,7 @@
 #include "health.hpp"
 #include "led.hpp"
 #include "node.hpp"
+#include "headers.hpp"
 
 #include <boost/container/flat_map.hpp>
 #include <utils/collection.hpp>
@@ -184,7 +185,8 @@
         res.jsonValue["Name"] = "Chassis Collection";
 
         auto asyncResp = std::make_shared<AsyncResp>(res);
-
+        asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders(" "));
         collection_util::getCollectionMembers(
             asyncResp, "/redfish/v1/Chassis",
             {"xyz.openbmc_project.Inventory.Item.Board",
@@ -373,6 +375,8 @@
                             asyncResp->res.jsonValue["Links"]["ManagedBy"] = {
                                 {{"@odata.id", "/redfish/v1/Managers/bmc"}}};
                             getChassisState(asyncResp);
+			    asyncResp->res.addHeader(boost::beast::http::field::allow,
+                	                             redfish::Header::GetAllowHeaders("Chassis_v1.xml"));
                         },
                         connectionName, path, "org.freedesktop.DBus.Properties",
                         "GetAll",
@@ -498,6 +502,8 @@
                                                       "IndicatorLED");
                         }
                     }
+		    asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                             redfish::Header::GetAllowHeaders("Chassis_v1.xml"));
                     return;
                 }
 
@@ -613,6 +619,8 @@
             return;
         }
         doChassisPowerCycle(asyncResp);
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("ChassisCollection_v1.xml"));
     }
 };
 
@@ -663,6 +671,8 @@
                             {"Required", true},
                             {"DataType", "String"},
                             {"AllowableValues", {"PowerCycle"}}}}}};
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("ChassisCollection_v1.xml"));
         res.end();
     }
 };
diff -Naur a/redfish-core/lib/ethernet.hpp b/redfish-core/lib/ethernet.hpp
--- a/redfish-core/lib/ethernet.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/ethernet.hpp	2021-02-16 10:30:01.157877686 +0000
@@ -38,6 +38,8 @@
 #include <sys/socket.h>
 #include <unistd.h>
 
+#include "headers.hpp" 
+
 namespace redfish
 {
 using namespace std; 
@@ -1120,6 +1122,8 @@
                     ifaceArray.size();
                 asyncResp->res.jsonValue["@odata.id"] =
                     "/redfish/v1/Managers/bmc/EthernetInterfaces";
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	                         redfish::Header::GetAllowHeaders("EthernetInterfaceCollection_v1.xml"));
             });
     }
 };
@@ -1946,6 +1950,9 @@
 
                 parseInterfaceData(asyncResp, ifaceId, ethData, ipv4Data,
                                    ipv6Data);
+
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	                         redfish::Header::GetAllowHeaders("EthernetInterface_v1.xml"));
             });
     }
 
@@ -2095,6 +2102,9 @@
                         ifaceId, "NICEnabled", *interfaceEnabled, asyncResp);
                 }
             });
+	
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("EthernetInterface_v1.xml"));
     }
 };
 
@@ -2202,6 +2212,9 @@
                         asyncResp->res, "VLAN Network Interface", ifaceId);
                 }
             });
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("VLanNetworkInterface_v1.xml"));
     }
 
     void doPatch(crow::Response& res, const crow::Request& req,
@@ -2281,6 +2294,9 @@
                     return;
                 }
             });
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("VLanNetworkInterface_v1.xml"));
     }
 
     void doDelete(crow::Response& res, const crow::Request&,
@@ -2335,6 +2351,9 @@
                         asyncResp->res, "VLAN Network Interface", ifaceId);
                 }
             });
+	
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("VLanNetworkInterface_v1.xml"));
     }
 };
 
@@ -2423,6 +2442,9 @@
                     "/redfish/v1/Managers/bmc/EthernetInterfaces/" +
                     rootInterfaceName + "/VLANs";
             });
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("VLanNetworkInterfaceCollection_v1.xml"));
     }
 
     void doPost(crow::Response& res, const crow::Request& req,
@@ -2465,6 +2487,8 @@
                 return;
             }
             messages::created(asyncResp->res);
+	    asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                     redfish::Header::GetAllowHeaders("VLanNetworkInterfaceCollection_v1.xml"));
         };
         crow::connections::systemBus->async_method_call(
             std::move(callback), "xyz.openbmc_project.Network",
diff -Naur a/redfish-core/lib/event_service.hpp b/redfish-core/lib/event_service.hpp
--- a/redfish-core/lib/event_service.hpp	2021-02-16 09:45:11.258402521 +0000
+++ b/redfish-core/lib/event_service.hpp	2021-02-16 10:40:53.724634722 +0000
@@ -15,6 +15,7 @@
 */
 #pragma once
 #include "event_service_manager.hpp"
+#include "headers.hpp"
 
 namespace redfish
 {
@@ -87,6 +88,9 @@
 
         asyncResp->res.jsonValue["SSEFilterPropertiesSupported"] =
             supportedSSEFilters;
+	
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                redfish::Header::GetAllowHeaders("EventService_v1.xml"));
     }
 
     void doPatch(crow::Response& res, const crow::Request& req,
@@ -145,6 +149,9 @@
 
         EventServiceManager::getInstance().setEventServiceConfig(
             std::make_tuple(enabled, retryCount, retryTimeoutInterval));
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                redfish::Header::GetAllowHeaders("EventService_v1.xml"));
     }
 };
 
@@ -170,6 +177,8 @@
     {
         EventServiceManager::getInstance().sendTestEventLog();
         res.result(boost::beast::http::status::no_content);
+	res.addHeader(boost::beast::http::field::allow,
+                     redfish::Header::GetAllowHeaders("EventDestinationCollection_v1.xml"));
         res.end();
     }
 };
@@ -214,6 +223,9 @@
                 {{"@odata.id",
                   "/redfish/v1/EventService/Subscriptions/" + id}});
         }
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                   	         redfish::Header::GetAllowHeaders("EventDestinationCollection_v1.xml"));
     }
 
     void doPost(crow::Response& res, const crow::Request& req,
@@ -452,6 +464,9 @@
         messages::created(asyncResp->res);
         asyncResp->res.addHeader(
             "Location", "/redfish/v1/EventService/Subscriptions/" + id);
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                   	         redfish::Header::GetAllowHeaders("EventDestinationCollection_v1.xml"));
+
     }
 };
 
@@ -518,6 +533,8 @@
             mrdJsonArray.push_back({{"@odata.id", mdrUri}});
         }
         asyncResp->res.jsonValue["MetricReportDefinitions"] = mrdJsonArray;
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("EventDestination_v1.xml"));
     }
 
     void doPatch(crow::Response& res, const crow::Request& req,
@@ -575,6 +592,9 @@
         }
 
         EventServiceManager::getInstance().updateSubscriptionData();
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("EventDestination_v1.xml"));
     }
 
     void doDelete(crow::Response& res, const crow::Request&,
@@ -595,6 +615,9 @@
             return;
         }
         EventServiceManager::getInstance().deleteSubscription(params[0]);
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("EventDestination_v1.xml"));
     }
 };
 
diff -Naur a/redfish-core/lib/hypervisor_ethernet.hpp b/redfish-core/lib/hypervisor_ethernet.hpp
--- a/redfish-core/lib/hypervisor_ethernet.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/hypervisor_ethernet.hpp	2021-02-16 10:41:55.064601615 +0000
@@ -11,6 +11,8 @@
 #include <utility>
 #include <variant>
 
+#include "headers.hpp"
+
 namespace redfish
 {
 
@@ -63,6 +65,8 @@
                     {"@odata.id", "/redfish/v1/Systems/hypervisor/"
                                   "EthernetInterfaces"}};
                 // TODO: Add "SystemType" : "hypervisor"
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                redfish::Header::GetAllowHeaders(" "));
             },
             "xyz.openbmc_project.Settings",
             "/xyz/openbmc_project/network/hypervisor",
@@ -134,6 +138,8 @@
                 }
                 asyncResp->res.jsonValue["Members@odata.count"] =
                     ifaceArray.size();
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                redfish::Header::GetAllowHeaders("EthernetInterface_v1.xml"));
             },
             "xyz.openbmc_project.ObjectMapper",
             "/xyz/openbmc_project/object_mapper",
@@ -772,6 +778,8 @@
                     "Hypervisor's Virtual Management Ethernet Interface";
                 parseInterfaceData(asyncResp->res.jsonValue, ifaceId, ethData,
                                    ipv4Data);
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                redfish::Header::GetAllowHeaders("EthernetInterface_v1.xml"));
             });
     }
 
@@ -866,6 +874,8 @@
                 setIPv4InterfaceEnabled(ifaceId, false, asyncResp);
             });
         res.result(boost::beast::http::status::accepted);
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("EthernetInterface_v1.xml"));
     }
 };
 } // namespace redfish
diff -Naur a/redfish-core/lib/log_services.hpp b/redfish-core/lib/log_services.hpp
--- a/redfish-core/lib/log_services.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/log_services.hpp	2021-02-16 10:45:24.836909374 +0000
@@ -33,6 +33,8 @@
 #include <string_view>
 #include <variant>
 
+#include "headers.hpp"
+
 namespace redfish
 {
 
@@ -964,6 +966,8 @@
                                            "LogServices/PostCodes"}});
                         asyncResp->res.jsonValue["Members@odata.count"] =
                             logServiceArrayLocal.size();
+			asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                                 redfish::Header::GetAllowHeaders("LogServiceCollection_v1.xml"));
                         return;
                     }
                 }
@@ -1011,6 +1015,8 @@
 
             {"target", "/redfish/v1/Systems/system/LogServices/EventLog/"
                        "Actions/LogService.ClearLog"}};
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("LogService_v1.xml"));
     }
 };
 
@@ -1260,6 +1266,8 @@
                 "Entries?$skip=" +
                 std::to_string(skip + top);
         }
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("LogEntryCollection_v1.xml"));
     }
 };
 
@@ -1331,6 +1339,8 @@
                         messages::internalError(asyncResp->res);
                         return;
                     }
+		    asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	                             redfish::Header::GetAllowHeaders("Event_v1.xml"));
                     return;
                 }
             }
@@ -1489,6 +1499,8 @@
                           });
                 asyncResp->res.jsonValue["Members@odata.count"] =
                     entriesArray.size();
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	                         redfish::Header::GetAllowHeaders("LogEntryCollection_v1.xml"));
             },
             "xyz.openbmc_project.Logging", "/xyz/openbmc_project/logging",
             "org.freedesktop.DBus.ObjectManager", "GetManagedObjects");
@@ -1615,6 +1627,8 @@
                     {"Severity", translateSeverityDbusToRedfish(*severity)},
                     {"Created", crow::utility::getDateTime(timestamp)},
                     {"Modified", crow::utility::getDateTime(updateTimestamp)}};
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	                         redfish::Header::GetAllowHeaders("LogEntry_v1.xml"));
             },
             "xyz.openbmc_project.Logging",
             "/xyz/openbmc_project/logging/entry/" + entryID,
@@ -1654,6 +1668,8 @@
             }
 
             asyncResp->res.result(boost::beast::http::status::ok);
+	    asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                     redfish::Header::GetAllowHeaders("LogEntry_v1.xml"));
         };
 
         // Make call to Logging service to request Delete Log
@@ -1708,6 +1724,8 @@
 #endif
         asyncResp->res.jsonValue["Members@odata.count"] =
             logServiceArray.size();
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("LogServiceCollection_v1.xml"));
     }
 };
 
@@ -1742,6 +1760,8 @@
         asyncResp->res.jsonValue["Entries"] = {
             {"@odata.id",
              "/redfish/v1/Managers/bmc/LogServices/Journal/Entries"}};
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("LogService_v1.xml"));
     }
 };
 
@@ -1905,6 +1925,8 @@
                 "/redfish/v1/Managers/bmc/LogServices/Journal/Entries?$skip=" +
                 std::to_string(skip + top);
         }
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("LogEntryCollection_v1.xml"));
     }
 };
 
@@ -1992,6 +2014,9 @@
             messages::internalError(asyncResp->res);
             return;
         }
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("LogService_v1.xml"));
     }
 };
 
@@ -2033,6 +2058,8 @@
             {"#LogService.CollectDiagnosticData",
              {{"target", "/redfish/v1/Managers/bmc/LogServices/Dump/"
                          "Actions/LogService.CollectDiagnosticData"}}}};
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("LogService_v1.xml"));
     }
 };
 
@@ -2067,6 +2094,8 @@
         asyncResp->res.jsonValue["Name"] = "BMC Dump Entries";
         asyncResp->res.jsonValue["Description"] =
             "Collection of BMC Dump Entries";
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	                 redfish::Header::GetAllowHeaders("LogEntryCollection_v1.xml"));
 
         getDumpEntryCollection(asyncResp, "BMC");
     }
@@ -2390,6 +2419,8 @@
              {{"target", "/redfish/v1/Systems/system/LogServices/Crashdump/"
                          "Actions/Oem/Crashdump.SendRawPeci"}}});
 #endif
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("LogService_v1.xml"));
     }
 };
 
@@ -2561,6 +2592,8 @@
             }
             asyncResp->res.jsonValue["Members@odata.count"] =
                 logEntryArray.size();
+	    asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                     redfish::Header::GetAllowHeaders("LogEntryCollection_v1.xml"));
         };
         crow::connections::systemBus->async_method_call(
             std::move(getLogEntriesCallback),
diff -Naur a/redfish-core/lib/managers.hpp b/redfish-core/lib/managers.hpp
--- a/redfish-core/lib/managers.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/managers.hpp	2021-02-16 10:47:11.557261777 +0000
@@ -30,6 +30,8 @@
 #include <sstream>
 #include <variant>
 
+#include "headers.hpp"
+
 namespace redfish
 {
 
@@ -259,6 +261,8 @@
                {"Required", true},
                {"DataType", "String"},
                {"AllowableValues", {"GracefulRestart", "ForceRestart"}}}}}};
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("ActionInfo_v1.xml"));
         res.end();
     }
 };
@@ -1834,6 +1838,8 @@
                 "org.freedesktop.DBus.Properties", "Get",
                 "org.freedesktop.systemd1.Manager", "Progress");
         }
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("Manager_v1.xml"));
 
         crow::connections::systemBus->async_method_call(
             [asyncResp](
@@ -1980,6 +1986,9 @@
         {
             setDateTime(response, std::move(*datetime));
         }
+
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("Manager_v1.xml"));
     }
 
     void getLastResetTime(const std::shared_ptr<AsyncResp>& aResp)
@@ -2207,6 +2216,8 @@
         res.jsonValue["Members@odata.count"] = 1;
         res.jsonValue["Members"] = {
             {{"@odata.id", "/redfish/v1/Managers/bmc"}}};
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("ManagerCollection_v1.xml"));
         res.end();
     }
 };
diff -Naur a/redfish-core/lib/message_registries.hpp b/redfish-core/lib/message_registries.hpp
--- a/redfish-core/lib/message_registries.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/message_registries.hpp	2021-02-16 10:48:02.265465424 +0000
@@ -22,6 +22,8 @@
 #include "registries/resource_event_message_registry.hpp"
 #include "registries/task_event_message_registry.hpp"
 
+#include "headers.hpp"
+
 namespace redfish
 {
 
@@ -63,6 +65,9 @@
               {{"@odata.id", "/redfish/v1/Registries/ResourceEvent"}},
               {{"@odata.id", "/redfish/v1/Registries/OpenBMC"}}}}};
 
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("MessageRegistryFileCollection_v1.xml"));
+	
         res.end();
     }
 };
@@ -148,6 +153,9 @@
             res.jsonValue["Location"][0]["PublicationUri"] = url;
         }
 
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("MessageRegistryFile_v1.xml"));
+
         res.end();
     }
 };
@@ -271,6 +279,9 @@
                 }
             }
         }
+
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("MessageRegistryFile_v1.xml"));
         res.end();
     }
 };
diff -Naur a/redfish-core/lib/network_protocol.hpp b/redfish-core/lib/network_protocol.hpp
--- a/redfish-core/lib/network_protocol.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/network_protocol.hpp	2021-02-16 10:48:42.405641153 +0000
@@ -23,6 +23,9 @@
 
 #include <optional>
 #include <variant>
+
+#include "headers.hpp"
+
 namespace redfish
 {
 
@@ -149,6 +152,9 @@
         std::shared_ptr<AsyncResp> asyncResp = std::make_shared<AsyncResp>(res);
 
         getData(asyncResp);
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("ManagerNetworkProtocol_v1.xml"));
     }
 
     std::string getHostName() const
@@ -538,6 +544,9 @@
                 handleIpmiProtocolEnabled(*ipmiProtocolEnabled, asyncResp);
             }
         }
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("ManagerNetworkProtocol_v1.xml"));
     }
 };
 
diff -Naur a/redfish-core/lib/pcie.hpp b/redfish-core/lib/pcie.hpp
--- a/redfish-core/lib/pcie.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/pcie.hpp	2021-02-16 10:49:23.937835367 +0000
@@ -20,6 +20,8 @@
 
 #include <boost/system/linux_error.hpp>
 
+#include "headers.hpp"
+
 namespace redfish
 {
 
@@ -101,6 +103,8 @@
             {"Members", nlohmann::json::array()},
             {"Members@odata.count", 0}};
         getPCIeDeviceList(asyncResp, "Members");
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("PCIeDeviceCollection_v1.xml"));
     }
 };
 
@@ -180,6 +184,9 @@
                 asyncResp->res.jsonValue["PCIeFunctions"] = {
                     {"@odata.id", "/redfish/v1/Systems/system/PCIeDevices/" +
                                       device + "/PCIeFunctions"}};
+
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	                         redfish::Header::GetAllowHeaders("PCIeDevice_v1.xml"));
             };
         std::string escapedPath = std::string(pciePath) + "/" + device;
         dbus::utility::escapePathForDbus(escapedPath);
@@ -274,6 +281,8 @@
                 }
                 asyncResp->res.jsonValue["PCIeFunctions@odata.count"] =
                     pcieFunctionList.size();
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	                         redfish::Header::GetAllowHeaders("PCIeFunctionCollection_v1.xml"));
             };
         std::string escapedPath = std::string(pciePath) + "/" + device;
         dbus::utility::escapePathForDbus(escapedPath);
@@ -417,6 +426,9 @@
             {
                 asyncResp->res.jsonValue["SubsystemVendorId"] = *property;
             }
+
+	    asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                     redfish::Header::GetAllowHeaders("PCIeFunction_v1.xml"));
         };
         std::string escapedPath = std::string(pciePath) + "/" + device;
         dbus::utility::escapePathForDbus(escapedPath);
diff -Naur a/redfish-core/lib/power.hpp b/redfish-core/lib/power.hpp
--- a/redfish-core/lib/power.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/power.hpp	2021-02-16 10:49:56.349995050 +0000
@@ -18,6 +18,7 @@
 
 #include "node.hpp"
 #include "sensors.hpp"
+#include "headers.hpp"
 
 namespace redfish
 {
@@ -306,6 +307,9 @@
                         // null if the limit is not enabled.
                         value = powerCap * std::pow(10, scale);
                     }
+
+	            sensorAsyncResp->res.addHeader(boost::beast::http::field::allow,
+	                                         redfish::Header::GetAllowHeaders("Power_v1.xml"));			
                 };
 
             crow::connections::systemBus->async_method_call(
@@ -360,6 +364,9 @@
             allCollections.emplace("Voltages", *std::move(voltageCollections));
             checkAndDoSensorsOverride(asyncResp, allCollections);
         }
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+	                         redfish::Header::GetAllowHeaders("Power_v1.xml"));			
     }
 };
 
diff -Naur a/redfish-core/lib/redfish_sessions.hpp b/redfish-core/lib/redfish_sessions.hpp
--- a/redfish-core/lib/redfish_sessions.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/redfish_sessions.hpp	2021-02-16 10:50:58.850321383 +0000
@@ -18,6 +18,7 @@
 #include "error_messages.hpp"
 #include "node.hpp"
 #include "persistent_data.hpp"
+#include "headers.hpp"
 
 namespace redfish
 {
@@ -69,6 +70,8 @@
             "#OemSession.v1_0_0.Session";
         res.jsonValue["Oem"]["OpenBMC"]["ClientID"] = session->clientId;
 #endif
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("Session_v1.xml"));
         res.end();
     }
 
@@ -164,6 +167,8 @@
         res.jsonValue["@odata.id"] = "/redfish/v1/SessionService/Sessions/";
         res.jsonValue["Name"] = "Session Collection";
         res.jsonValue["Description"] = "Session Collection";
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("SessionCollection_v1.xml"));
         res.end();
     }
 
@@ -241,6 +246,8 @@
                 res,
                 "/redfish/v1/AccountService/Accounts/" + session->username);
         }
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("SessionCollection_v1.xml"));
         memberSession.doGet(res, req, {session->uniqueId});
     }
 
@@ -317,6 +324,8 @@
                     res, std::to_string(*sessionTimeout), "SessionTimeOut");
             }
         }
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("SessionService_v1.xml"));
     }
 };
 
diff -Naur a/redfish-core/lib/roles.hpp b/redfish-core/lib/roles.hpp
--- a/redfish-core/lib/roles.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/roles.hpp	2021-02-16 11:02:38.559013904 +0000
@@ -18,7 +18,7 @@
 #include "node.hpp"
 
 #include <variant>
-
+#include "headers.hpp"
 namespace redfish
 {
 
@@ -114,6 +114,8 @@
             {"RoleId", roleId},
             {"@odata.id", "/redfish/v1/AccountService/Roles/" + roleId},
             {"AssignedPrivileges", std::move(privArray)}};
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("Role_v1.xml"));
         res.end();
     }
 };
@@ -172,6 +174,9 @@
                 }
                 asyncResp->res.jsonValue["Members@odata.count"] =
                     memberArray.size();
+
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	          	         redfish::Header::GetAllowHeaders("RoleCollection_v1.xml"));
             },
             "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
             "org.freedesktop.DBus.Properties", "Get",
diff -Naur a/redfish-core/lib/sensors.hpp b/redfish-core/lib/sensors.hpp
--- a/redfish-core/lib/sensors.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/sensors.hpp	2021-02-16 10:52:43.114913245 +0000
@@ -27,7 +27,7 @@
 #include <cmath>
 #include <utility>
 #include <variant>
-
+#include "headers.hpp"
 namespace redfish
 {
 
@@ -3064,6 +3064,10 @@
 
         // Get set of sensors in chassis
         getChassis(asyncResp, std::move(getChassisCb));
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("SensorCollection_v1.xml"));
+	
         BMCWEB_LOG_DEBUG << "SensorCollection doGet exit";
     }
 };
@@ -3160,6 +3164,8 @@
 
                 sensorList->emplace(sensorPath);
                 processSensorList(asyncResp, sensorList);
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	               		 redfish::Header::GetAllowHeaders("Sensor_v1.xml"));
                 BMCWEB_LOG_DEBUG << "respHandler1 exit";
             },
             "xyz.openbmc_project.ObjectMapper",
diff -Naur a/redfish-core/lib/serial_interface.hpp b/redfish-core/lib/serial_interface.hpp
--- a/redfish-core/lib/serial_interface.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/serial_interface.hpp	2021-02-16 10:53:10.103074947 +0000
@@ -25,6 +25,8 @@
 #include <variant>
 #include <sys/stat.h>
 
+#include "headers.hpp"
+
 namespace redfish
 {
 
@@ -122,6 +124,8 @@
 		myfile.close();
 		system("rm -rf /tmp/tty.file");
 		asyncResp->res.jsonValue["Members@odata.count"] = cnt;
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	               		 redfish::Header::GetAllowHeaders("SerialInterfaceCollection_v1.xml"));
 	}
 
 	else 
@@ -233,6 +237,9 @@
         asyncResp->res.jsonValue["StopBits"] =
             exec(stopbits);
 
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                       		 redfish::Header::GetAllowHeaders("SerialInterface_v1.xml"));
+
     }
 };
 
diff -Naur a/redfish-core/lib/service_root.hpp b/redfish-core/lib/service_root.hpp
--- a/redfish-core/lib/service_root.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/service_root.hpp	2021-02-16 10:54:30.459574497 +0000
@@ -16,6 +16,7 @@
 #pragma once
 
 #include "node.hpp"
+#include "headers.hpp"
 
 #include <utils/systemd_utils.hpp>
 
@@ -68,6 +69,7 @@
         res.jsonValue["Tasks"] = {{"@odata.id", "/redfish/v1/TaskService"}};
         res.jsonValue["EventService"] = {
             {"@odata.id", "/redfish/v1/EventService"}};
+	res.addHeader(boost::beast::http::field::allow, redfish::Header::GetAllowHeaders("ServiceRoot_v1.xml"));
         res.end();
     }
 
diff -Naur a/redfish-core/lib/storage.hpp b/redfish-core/lib/storage.hpp
--- a/redfish-core/lib/storage.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/storage.hpp	2021-02-16 10:55:03.443786693 +0000
@@ -20,6 +20,8 @@
 
 #include <node.hpp>
 
+#include "headers.hpp"
+
 namespace redfish
 {
 class StorageCollection : public Node
@@ -47,6 +49,8 @@
         res.jsonValue["Members"] = {
             {{"@odata.id", "/redfish/v1/Systems/system/Storage/1"}}};
         res.jsonValue["Members@odata.count"] = 1;
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("StorageCollection_v1.xml"));	
         res.end();
     }
 };
@@ -243,6 +247,8 @@
                                     object[propertyName] = *value;
                                 }
                             }
+			    asyncResp->res.addHeader(boost::beast::http::field::allow,
+        		                            redfish::Header::GetAllowHeaders("Storage_v1.xml"));	
                         },
                         connectionName, path, "org.freedesktop.DBus.Properties",
                         "GetAll",
@@ -449,6 +455,8 @@
                             asyncResp->res.jsonValue["Status"]["State"] =
                                 "Updating";
                         }
+			asyncResp->res.addHeader(boost::beast::http::field::allow,
+        		                        redfish::Header::GetAllowHeaders("Drive_v1.xml"));	
                     },
                     connectionName, path, "org.freedesktop.DBus.Properties",
                     "Get", "xyz.openbmc_project.State.Drive", "Rebuilding");
diff -Naur a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
--- a/redfish-core/lib/systems.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/systems.hpp	2021-02-16 10:55:56.288134419 +0000
@@ -27,6 +27,8 @@
 
 #include <variant>
 
+#include "headers.hpp"
+
 namespace redfish
 {
 
@@ -1881,6 +1883,8 @@
                     count = ifaceArray.size();
                     return;
                 }
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                         redfish::Header::GetAllowHeaders("ComputerSystemCollection_v1.xml"));
             },
             "xyz.openbmc_project.Settings",
             "/xyz/openbmc_project/network/hypervisor",
@@ -2017,6 +2021,8 @@
                 "xyz.openbmc_project.State.Chassis", "RequestedPowerTransition",
                 std::variant<std::string>{command});
         }
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("ComputerSystemCollection_v1.xml"));
     }
     /**
      * Function transceives data with dbus directly.
@@ -2157,6 +2163,8 @@
 #ifdef BMCWEB_ENABLE_REDFISH_PROVISIONING_FEATURE
         getProvisioningStatus(asyncResp);
 #endif
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("ComputerSystem_v1.xml"));
     }
 
     void doPatch(crow::Response& res, const crow::Request& req,
@@ -2239,6 +2247,9 @@
         {
             setPowerRestorePolicy(asyncResp, std::move(*powerRestorePolicy));
         }
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("ComputerSystem_v1.xml"));
     }
 };
 
@@ -2283,6 +2294,8 @@
                {"AllowableValues",
                 {"On", "ForceOff", "ForceOn", "ForceRestart", "GracefulRestart",
                  "GracefulShutdown", "PowerCycle", "Nmi"}}}}}};
+	res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("ActionInfo_v1.xml"));
         res.end();
     }
 };
diff -Naur a/redfish-core/lib/task.hpp b/redfish-core/lib/task.hpp
--- a/redfish-core/lib/task.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/task.hpp	2021-02-16 10:56:20.236294937 +0000
@@ -25,6 +25,8 @@
 #include <chrono>
 #include <variant>
 
+#include "headers.hpp"
+
 namespace redfish
 {
 
@@ -366,6 +368,10 @@
             messages::resourceNotFound(asyncResp->res, "Monitor", strParam);
             return;
         }
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("TaskService_v1.xml"));
+
         ptr->populateResp(asyncResp->res);
     }
 };
@@ -447,6 +453,8 @@
                 {"HttpHeaders", p.httpHeaders},
                 {"JsonBody", p.jsonBody.dump()}};
         }
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("Task_v1.xml"));
     }
 };
 
@@ -487,6 +495,9 @@
                 nlohmann::json{{"@odata.id", "/redfish/v1/TaskService/Tasks/" +
                                                  std::to_string(task->index)}});
         }
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("TaskCollection_v1.xml"));
     }
 };
 
@@ -525,6 +536,8 @@
         asyncResp->res.jsonValue["ServiceEnabled"] = true;
         asyncResp->res.jsonValue["Tasks"] = {
             {"@odata.id", "/redfish/v1/TaskService/Tasks"}};
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                      redfish::Header::GetAllowHeaders("TaskService_v1.xml"));
     }
 };
 
diff -Naur a/redfish-core/lib/thermal.hpp b/redfish-core/lib/thermal.hpp
--- a/redfish-core/lib/thermal.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/thermal.hpp	2021-02-16 10:56:41.412438303 +0000
@@ -17,6 +17,7 @@
 
 #include "node.hpp"
 #include "sensors.hpp"
+#include "headers.hpp"
 
 namespace redfish
 {
@@ -53,6 +54,8 @@
 
         // TODO Need to get Chassis Redundancy information.
         getChassisData(sensorAsyncResp);
+	sensorAsyncResp->res.addHeader(boost::beast::http::field::allow,
+                                       redfish::Header::GetAllowHeaders("Thermal_v1.xml"));
     }
     void doPatch(crow::Response& res, const crow::Request& req,
                  const std::vector<std::string>& params) override
@@ -97,6 +100,9 @@
         }
 
         checkAndDoSensorsOverride(asyncResp, allCollections);
+
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("Thermal_v1.xml"));
     }
 };
 
diff -Naur a/redfish-core/lib/update_service.hpp b/redfish-core/lib/update_service.hpp
--- a/redfish-core/lib/update_service.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/update_service.hpp	2021-02-16 10:57:20.420705726 +0000
@@ -21,7 +21,7 @@
 #include <utils/fw_utils.hpp>
 
 #include <variant>
-
+#include "headers.hpp"
 namespace redfish
 {
 
@@ -568,6 +568,9 @@
                                         ["HttpPushUriApplyTime"]["ApplyTime"] =
                         "OnReset";
                 }
+
+		aResp->res.addHeader(boost::beast::http::field::allow,
+        		             redfish::Header::GetAllowHeaders("UpdateService_v1.xml"));
             },
             "xyz.openbmc_project.Settings",
             "/xyz/openbmc_project/software/apply_time",
@@ -643,6 +646,8 @@
                                 return;
                             }
                             messages::success(asyncResp->res);
+			    asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	                                     redfish::Header::GetAllowHeaders("UpdateService_v1.xml"));
                         },
                         "xyz.openbmc_project.Settings",
                         "/xyz/openbmc_project/software/apply_time",
@@ -674,6 +679,8 @@
                                         std::ofstream::trunc);
         out << req.body;
         out.close();
+	asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                 redfish::Header::GetAllowHeaders("UpdateService_v1.xml"));
         BMCWEB_LOG_DEBUG << "file upload complete!!";
     }
 };
@@ -739,6 +746,10 @@
                                            swId}});
                     asyncResp->res.jsonValue["Members@odata.count"] =
                         members.size();
+
+		    asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	                             redfish::Header::GetAllowHeaders("SoftwareInventoryCollection_v1.xml"));
+
                 }
             },
             // Note that only firmware levels associated with a device are
@@ -947,6 +958,8 @@
                 asyncResp->res.jsonValue["Status"]["HealthRollup"] = "OK";
 
                 asyncResp->res.jsonValue["Updateable"] = false;
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+        	                         redfish::Header::GetAllowHeaders("SoftwareInventory_v1.xml"));
                 fw_util::getFwUpdateableStatus(asyncResp, swId);
             },
             "xyz.openbmc_project.ObjectMapper",
diff -Naur a/redfish-core/lib/virtual_media.hpp b/redfish-core/lib/virtual_media.hpp
--- a/redfish-core/lib/virtual_media.hpp	2021-02-16 09:45:11.262402619 +0000
+++ b/redfish-core/lib/virtual_media.hpp	2021-02-16 10:57:44.976876146 +0000
@@ -24,6 +24,7 @@
 #include <utils/json_utils.hpp>
 #include <variant>
 
+#include "headers.hpp"
 
 namespace redfish
 {
@@ -171,6 +172,8 @@
                 }
                 asyncResp->res.jsonValue["Members@odata.count"] = InstanceCount;
 
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                         redfish::Header::GetAllowHeaders("VirtualMediaCollection_v1.xml"));
             },
             redfish::virtualmedia::virtualmediaServiceName, redfish::virtualmedia::virtualmedia_ObjectPath,
             redfish::virtualmedia::dbusObjManagerIntf , "GetManagedObjects");
@@ -318,6 +321,8 @@
                    {"target", "/redfish/v1/Managers/bmc/VirtualMedia/"
                               + instanceName + "/Actions/VirtualMedia.InsertMedia"}};
 
+		asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                         redfish::Header::GetAllowHeaders("VirtualMedia_v1.xml"));
             },
             redfish::virtualmedia::virtualmediaServiceName, redfish::virtualmedia::virtualmedia_ObjectPath,
             redfish::virtualmedia::dbusObjManagerIntf , "GetManagedObjects");
@@ -425,6 +430,8 @@
                                                {"Required",true}},
                                              };
 
+	       asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                        redfish::Header::GetAllowHeaders("ActionInfo_v1.xml"));
             },
             redfish::virtualmedia::virtualmediaServiceName, redfish::virtualmedia::virtualmedia_ObjectPath,
             redfish::virtualmedia::dbusObjManagerIntf , "GetManagedObjects");
@@ -504,6 +511,8 @@
                asyncResp->res.jsonValue["@odata.id"] =
                    "/redfish/v1/Managers/bmc/VirtualMedia/" + instanceName + "/EjectMediaActionInfo";
 
+	       asyncResp->res.addHeader(boost::beast::http::field::allow,
+                                        redfish::Header::GetAllowHeaders("ActionInfo_v1.xml"));
 
                /* EjectMedia Action will not take any input,
                 * so no need to show any request data
