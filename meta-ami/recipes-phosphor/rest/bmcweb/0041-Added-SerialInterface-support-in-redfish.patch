diff -Naur a/redfish-core/include/redfish.hpp b/redfish-core/include/redfish.hpp
--- a/redfish-core/include/redfish.hpp	2021-03-01 23:54:15.750597980 +0530
+++ b/redfish-core/include/redfish.hpp	2021-03-01 23:52:17.445882431 +0530
@@ -45,6 +45,7 @@
 #include "../lib/virtual_media.hpp"
 #endif // BMCWEB_ENABLE_VM_NBDPROXY
 #include "../lib/hypervisor_ethernet.hpp"
+#include "../lib/serial_interface.hpp"
 #include "webserver_common.hpp"
 
 namespace redfish
@@ -81,6 +82,8 @@
         nodes.emplace_back(std::make_unique<ManagerResetAction>(app));
         nodes.emplace_back(std::make_unique<ManagerResetActionInfo>(app));
         nodes.emplace_back(std::make_unique<ManagerResetToDefaultsAction>(app));
+	nodes.emplace_back(std::make_unique<SerialInterfaceCollection>(app));
+        nodes.emplace_back(std::make_unique<SerialInterfaceInstance>(app));
         nodes.emplace_back(std::make_unique<Power>(app));
         nodes.emplace_back(std::make_unique<ChassisCollection>(app));
         nodes.emplace_back(std::make_unique<Chassis>(app));
diff -Naur a/redfish-core/lib/managers.hpp b/redfish-core/lib/managers.hpp
--- a/redfish-core/lib/managers.hpp	2021-03-01 23:54:15.750597980 +0530
+++ b/redfish-core/lib/managers.hpp	2021-03-01 23:52:17.449882453 +0530
@@ -1696,6 +1696,9 @@
         res.jsonValue["EthernetInterfaces"] = {
             {"@odata.id", "/redfish/v1/Managers/bmc/EthernetInterfaces"}};
 
+	res.jsonValue["SerialInterfaces"] = {
+            {"@odata.id", "/redfish/v1/Managers/bmc/SerialInterface"}};
+
 #ifdef BMCWEB_ENABLE_VM_NBDPROXY
         res.jsonValue["VirtualMedia"] = {
             {"@odata.id", "/redfish/v1/Managers/bmc/VirtualMedia"}};
diff -Naur a/redfish-core/lib/serial_interface.hpp b/redfish-core/lib/serial_interface.hpp
--- a/redfish-core/lib/serial_interface.hpp	1970-01-01 05:30:00.000000000 +0530
+++ b/redfish-core/lib/serial_interface.hpp	2021-03-01 23:52:17.449882453 +0530
@@ -0,0 +1,242 @@
+/*
+// Copyright (c) 2020 AMI
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+#pragma once
+
+#include <boost/container/flat_map.hpp>
+#include <boost/container/flat_set.hpp>
+#include <dbus_singleton.hpp>
+#include <error_messages.hpp>
+#include <node.hpp>
+#include <optional>
+#include <utils/json_utils.hpp>
+#include <variant>
+#include <sys/stat.h>
+
+
+namespace redfish
+{
+
+std::string exec (string cmd)
+{
+    char buf[128];
+    string result = "";
+    FILE *pipe;
+    if ((pipe = popen(cmd.c_str(), "r")) == NULL) {
+        cout << "Error opening pipe!\n" ;
+        return "popen failed!";
+    }
+
+    while (fgets(buf, 128, pipe) != NULL)
+    {
+        	result += buf;
+    }
+    pclose(pipe);
+
+    result.erase(std::remove(result.begin(), result.end(), '\n'), result.end());
+    return result;
+}
+
+class SerialInterfaceCollection : public Node
+{
+  public:
+    template <typename CrowApp>
+    SerialInterfaceCollection(CrowApp &app) :
+        Node(app, "/redfish/v1/Managers/bmc/SerialInterface/")
+    {
+        entityPrivileges = {
+            {boost::beast::http::verb::get, {{"Login"}}},
+            {boost::beast::http::verb::head, {{"Login"}}},
+            {boost::beast::http::verb::patch, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::put, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::delete_, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::post, {{"ConfigureComponents"}}}};
+    }
+
+  private:
+    /**
+     * Functions triggers appropriate requests on DBus
+     */
+    void doGet(crow::Response &res, const crow::Request &req,
+               const std::vector<std::string> &params) override
+    {
+        std::shared_ptr<AsyncResp> asyncResp = std::make_shared<AsyncResp>(res);
+        asyncResp->res.jsonValue["@odata.type"] =
+            "#SerialInterfaceCollection.SerialInterfaceCollection";
+        asyncResp->res.jsonValue["@odata.context"] =
+            "/redfish/v1/"
+            "$metadata#SerialInterfaceCollection.SerialInterfaceCollection";
+        asyncResp->res.jsonValue["@odata.id"] =
+            "/redfish/v1/Managers/bmc/SerialInterface";
+        asyncResp->res.jsonValue["Name"] = "Serial Interface Collection";
+        asyncResp->res.jsonValue["Description"] =
+            "Collection of SerialInterface";
+	nlohmann::json &SerialMemberArray = 
+		asyncResp->res.jsonValue["Members"];
+	SerialMemberArray = nlohmann::json::array();
+
+	struct stat info;
+	string line;
+	system ("ls /sys/class/tty/ > /tmp/tty.file");
+	ifstream myfile ("/tmp/tty.file");
+	
+	if (myfile.is_open())
+	{
+		std::size_t cnt = 0;
+		while (getline (myfile,line))
+		{
+			string ttydriverpath = "/sys/class/tty/" + line + "/device/driver" ;
+			string stty = "stty -a -F /dev/" + line + " 2>/dev/null ";
+			if( stat(ttydriverpath.c_str(), &info ) == 0 )
+			{
+				if( info.st_mode & S_IFDIR )
+				{
+					cout << "exit" << ttydriverpath << "\n";
+					if (system(stty.c_str()))
+					{
+						cout << "system command Failed" << "\n";
+					}
+					else
+					{
+//						cout << "system command sucesssss " << "\n";
+						SerialMemberArray.push_back({{"@odata.id", "/redfish/v1/Managers/bmc/SerialInterface/" +
+                                                line}});
+						cnt ++;
+					}
+				}
+			}
+			else
+				cout << "Driver path not exit:" << ttydriverpath << "\n";
+		}
+		myfile.close();
+		system("rm -rf /tmp/tty.file");
+		asyncResp->res.jsonValue["Members@odata.count"] = cnt;
+	}
+
+	else 
+		cout << "Unable to open file";
+
+
+     }
+};
+
+/**
+ * SerialInterface Instance derived class for delivering SerialInterface Schema
+ */
+class SerialInterfaceInstance : public Node
+{
+  public:
+    template <typename CrowApp>
+    SerialInterfaceInstance(CrowApp& app) :
+        Node(app, "/redfish/v1/Managers/bmc/SerialInterface/<str>/", std::string())
+    {
+        entityPrivileges = {
+            {boost::beast::http::verb::get, {{"Login"}}},
+            {boost::beast::http::verb::head, {{"Login"}}},
+            {boost::beast::http::verb::patch, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::put, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::delete_, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::post, {{"ConfigureComponents"}}}};
+    }
+
+
+  private:
+
+    /**
+     * Functions triggers appropriate requests on DBus
+     */
+    void doGet(crow::Response& res, const crow::Request& req,
+               const std::vector<std::string>& params) override
+    {
+
+        auto asyncResp = std::make_shared<AsyncResp>(res);
+
+
+        if (params.size() != 1)
+        {
+            messages::internalError(asyncResp->res);
+            return;
+        }
+
+	std::string SerialInstance=std::string(params[0]);	
+
+	string bitrate  = "stty -a -F /dev/" + SerialInstance + "  2>/dev/null | gawk 'match($0, /speed ([[:digit:]]+) baud;/, a) {print a[1]}'";	
+	string databits = "stty -a -F /dev/" + SerialInstance + "  2>/dev/null | gawk 'match($0, /cs([[:digit:]]?)/, a) {print a[1]}'";
+	string stopbits = "stty -a -F /dev/" + SerialInstance + "  2>/dev/null | gawk '{if (match($0, /-cstopb/)) {print 1} else if(match($0, /cstopb/)) {print 2}}'";
+	string ixon     = "stty -a -F /dev/" + SerialInstance + "  2>/dev/null | gawk '{if (match($0, /-ixon/)) {print 1} else if(match($0, /ixon/)) {print 0}}'";
+	string crtscts  = "stty -a -F /dev/" + SerialInstance + "  2>/dev/null | gawk '{if (match($0, /-crtscts/)) {print 0} else if(match($0, /crtscts/)) {print 1}}'";
+	string cdtrdsr  = "stty -a -F /dev/" + SerialInstance + "  2>/dev/null | gawk '{if (match($0, /-cdtrdsr/)) {print 0} else if(match($0, /cdtrdsr/)) {print 1}}'";
+	string parenb   = "stty -a -F /dev/" + SerialInstance + "  2>/dev/null | gawk '{if (match($0, /-parenb/)) {print 0} else if(match($0, /parenb/)) {print 1}}'";
+	string parodd   = "stty -a -F /dev/" + SerialInstance + "  2>/dev/null | gawk '{if (match($0, /-parodd/)) {print 0} else if(match($0, /parodd/)) {print 1}}'";
+
+
+        asyncResp->res.jsonValue["@odata.type"] =
+            "#SerialInterface.v1_1_5.SerialInterface";
+	asyncResp->res.jsonValue["@odata.context"] =
+            "/redfish/v1/"
+            "$metadata#SerialInterface.SerialInterface";
+	asyncResp->res.jsonValue["@odata.id"] =
+                    "/redfish/v1/Managers/bmc/SerialInterface/" + SerialInstance;
+		
+	asyncResp->res.jsonValue["BitRate"] = 
+	    exec(bitrate);
+	asyncResp->res.jsonValue["DataBits"] =
+	    exec(databits);
+	asyncResp->res.jsonValue["Description"] =
+	    "Serial device @ /dev/" + SerialInstance;
+
+        string ixon_val    = exec(ixon);
+        string crtscts_val = exec(crtscts);
+        string cdtrdsr_val = exec(cdtrdsr);
+
+	if (ixon_val == "1") 
+		asyncResp->res.jsonValue["FlowControl"] = "Software";
+	else if (crtscts_val == "1") 
+		asyncResp->res.jsonValue["FlowControl"] = "Hardware";
+	else if (cdtrdsr_val == "1")
+		asyncResp->res.jsonValue["FlowControl"] = "Hardware"; 
+//	else if((-z exec(ixoz)) && (-z exec(crtscts)) && (-z exec(cdtrdsr))) 
+//		asyncResp->res.jsonValue["FlowControl"] = "" ;
+	else
+		asyncResp->res.jsonValue["FlowControl"] = "None";
+
+	asyncResp->res.jsonValue["Id"] =
+	    SerialInstance; 
+	asyncResp->res.jsonValue["InterfaceEnabled"] =
+	    "true";
+        asyncResp->res.jsonValue["Name"] =
+            SerialInstance;
+
+        string parenb_val = exec(parenb);
+	string parodd_val = exec(parodd);
+	if (parenb_val == "1")
+		if (parodd_val == "1")
+        		asyncResp->res.jsonValue["Parity"] = "Odd";
+		else
+        		asyncResp->res.jsonValue["Parity"] = "Even";
+//	else if ([ -z "$parenb" ] && [ -z "$parodd" ])
+//		parity= "";
+	else
+        	asyncResp->res.jsonValue["Parity"] = "None";
+
+        asyncResp->res.jsonValue["StopBits"] =
+            exec(stopbits);
+
+
+    }
+};
+
+
+} // namespace redfish
