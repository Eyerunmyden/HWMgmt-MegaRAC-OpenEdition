diff -Naur a/include/login_routes.hpp b/include/login_routes.hpp
--- a/include/login_routes.hpp	2020-10-28 19:23:14.532871680 +0530
+++ b/include/login_routes.hpp	2020-10-28 19:14:54.336390316 +0530
@@ -139,11 +139,7 @@
             {
                 int pamrc = pamAuthenticateUser(username, password);
                 bool isConfigureSelfOnly = pamrc == PAM_NEW_AUTHTOK_REQD;
-                if ((pamrc != PAM_SUCCESS) && !isConfigureSelfOnly)
-                {
-                    res.result(boost::beast::http::status::unauthorized);
-                }
-                else
+                if (pamrc == PAM_SUCCESS)
                 {
                     auto session =
                         persistent_data::SessionStore::getInstance()
@@ -186,8 +182,16 @@
                         res.jsonValue = {{"token", session->sessionToken}};
                     }
                 }
-            }
-            else
+		else if(pamrc == PAM_MAXTRIES)
+		{
+	    	    res.result(boost::beast::http::status::locked);
+		}
+		else if ((pamrc != PAM_SUCCESS) && !isConfigureSelfOnly)
+		{
+		    res.result(boost::beast::http::status::unauthorized);
+		}
+	    }
+	    else
             {
                 BMCWEB_LOG_DEBUG << "Couldn't interpret password";
                 res.result(boost::beast::http::status::bad_request);
diff -Naur a/include/pam_authenticate.hpp b/include/pam_authenticate.hpp
--- a/include/pam_authenticate.hpp	2020-10-28 19:23:03.172689619 +0530
+++ b/include/pam_authenticate.hpp	2020-10-28 19:14:32.676145418 +0530
@@ -6,6 +6,8 @@
 
 #include <cstring>
 #include <memory>
+#include <variant>
+#include <dbus_utility.hpp>
 
 // function used to get user input
 inline int pamFunctionConversation(int numMsg, const struct pam_message** msg,
@@ -48,6 +50,39 @@
     return PAM_SUCCESS;
 }
 
+//checking the UserLockedForFailedAttempt,if it is true pam_athenticate return PAM_MAXTRIES
+
+static bool pamMaxtriescheck(std::string& userName)
+{
+	const char* userNameStr = userName.c_str();
+	const char* serviceName = "xyz.openbmc_project.User.Manager";
+	std::string objPath = "/xyz/openbmc_project/user/";
+	objPath += userNameStr;
+	const char* UserObjPath = objPath.c_str();
+	std::string lockedUserIface ="xyz.openbmc_project.User.Attributes";
+	std::string lockedUserProperty = "UserLockedForFailedAttempt"; 
+	std::variant <bool> lockedUserValue;
+	bool UserMaxtriesReached;
+	sdbusplus::message::message getlockedUser = crow::connections::systemBus->new_method_call(serviceName,UserObjPath,
+											        "org.freedesktop.DBus.Properties","Get");
+	getlockedUser.append(lockedUserIface,lockedUserProperty);
+	try
+	{
+		sdbusplus::message::message getlockedUserResp = crow::connections::systemBus->call(getlockedUser);
+		getlockedUserResp.read(lockedUserValue);
+	}
+	catch (sdbusplus::exception_t &)
+        {
+            return false;
+        }
+	UserMaxtriesReached = std::get<bool>(lockedUserValue);
+	if(UserMaxtriesReached == true)
+	{
+		return true;
+	}
+	return false;
+}
+
 /**
  * @brief Attempt username/password authentication via PAM.
  * @param username The provided username aka account name.
@@ -61,8 +96,9 @@
     const struct pam_conv localConversation = {
         pamFunctionConversation, const_cast<char*>(passStr.c_str())};
     pam_handle_t* localAuthHandle = nullptr; // this gets set by pam_start
-
-    int retval = pam_start("webserver", userStr.c_str(), &localConversation,
+    int retval = 0;
+    bool pamMaxerror;
+    retval = pam_start("webserver", userStr.c_str(), &localConversation,
                            &localAuthHandle);
     if (retval != PAM_SUCCESS)
     {
@@ -73,7 +109,12 @@
                               PAM_SILENT | PAM_DISALLOW_NULL_AUTHTOK);
     if (retval != PAM_SUCCESS)
     {
-        pam_end(localAuthHandle, PAM_SUCCESS); // ignore retval
+        pam_end(localAuthHandle, PAM_SUCCESS);
+	pamMaxerror = pamMaxtriescheck(userStr);
+	if(pamMaxerror == true)
+	{
+		return PAM_MAXTRIES;
+	}
         return retval;
     }
 
