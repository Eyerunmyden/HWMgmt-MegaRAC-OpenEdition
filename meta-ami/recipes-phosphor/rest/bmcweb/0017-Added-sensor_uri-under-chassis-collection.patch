diff -Naur a/redfish-core/lib/sensors.hpp b/redfish-core/lib/sensors.hpp
--- a/redfish-core/lib/sensors.hpp	2021-03-08 12:27:28.556667897 +0530
+++ b/redfish-core/lib/sensors.hpp	2021-03-08 12:22:25.636742935 +0530
@@ -3092,7 +3092,9 @@
         }
 
         const std::string& chassisId = params[0];
-        std::shared_ptr<SensorsAsyncResp> asyncResp =
+
+/*
+	std::shared_ptr<SensorsAsyncResp> asyncResp =
             std::make_shared<SensorsAsyncResp>(
                 res, chassisId, sensors::dbus::types.at(sensors::node::sensors),
                 sensors::node::sensors);
@@ -3136,6 +3138,73 @@
                       redfish::Header::GetAllowHeaders("SensorCollection_v1.xml"));
 	
         BMCWEB_LOG_DEBUG << "SensorCollection doGet exit";
+
+*/
+
+            std::shared_ptr<AsyncResp> aResp = std::make_shared<AsyncResp>(res);
+
+            crow::connections::systemBus->async_method_call(
+                            [aResp{std::move(aResp)},chassisId](
+                                            const boost::system::error_code ec,
+                                            const std::vector<std::pair<
+                                            std::string,
+                                            std::vector<std::pair<std::string, std::vector<std::string>>>>>
+                                            &subtree) {
+
+                            if (ec)
+                            {
+                            // do not add err msg in redfish response, becaues this is not
+                            //     mandatory property
+                            BMCWEB_LOG_ERROR << "DBUS error: no matched iface " << ec << "\n";
+                            return;
+                            }
+
+                        aResp->res.jsonValue["@odata.type"] = "#SensorCollection.SensorCollection";
+                        aResp->res.jsonValue["@odata.id"] = "/redfish/v1/Chassis/"+chassisId+"/Sensors";
+                        aResp->res.jsonValue["@odata.context"] =
+                                "/redfish/v1/$metadata#SensorCollection.SensorCollection";
+                        aResp->res.jsonValue["Description"] = "Resource Collection of Sensor instances";
+                        aResp->res.jsonValue["Name"] = "Sensor Collection";
+
+
+                            nlohmann::json& entriesArray =
+                                    aResp->res.jsonValue["Members"];
+
+                            for (auto& sensorobject : subtree)
+
+                            {
+
+                                    std::string sensor = sensorobject.first;
+                                    std::size_t lastPos = sensor.rfind("/");
+
+                                if (lastPos == std::string::npos ||
+                                    lastPos + 1 >= sensor.size())
+                                {
+                                    BMCWEB_LOG_ERROR << "Invalid sensor path: " << sensor;
+                                    messages::internalError(aResp->res);
+                                    return;
+                                }
+
+                                    std::string sensorName = sensor.substr(lastPos + 1);
+
+                                    entriesArray.push_back(
+                                                    {{"@odata.id",
+                                                    "/redfish/v1/Chassis/" + chassisId + "/" +
+                                                    "Sensors" + "/" + sensorName}});
+
+                            }
+
+                            aResp->res.jsonValue["Members@odata.count"] =
+                                    entriesArray.size();
+
+                            },
+                    "xyz.openbmc_project.ObjectMapper",
+                    "/xyz/openbmc_project/object_mapper",
+                    "xyz.openbmc_project.ObjectMapper", "GetSubTree",
+                    "/xyz/openbmc_project/sensors", 2,
+                    std::array<const char *, 1>{"xyz.openbmc_project.Sensor.Value"});
+
+            BMCWEB_LOG_DEBUG << "SensorCollection doGet exit";
     }
 };
 
