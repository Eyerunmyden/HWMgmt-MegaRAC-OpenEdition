diff -Naur a/redfish-core/lib/account_service.hpp b/redfish-core/lib/account_service.hpp
--- a/redfish-core/lib/account_service.hpp	2021-05-29 13:17:11.950562001 +0530
+++ b/redfish-core/lib/account_service.hpp	2021-05-29 13:18:52.911908893 +0530
@@ -1240,6 +1240,9 @@
     {
         const persistent_data::AuthConfigMethods& authMethodsConfig =
             persistent_data::SessionStore::getInstance().getAuthMethodsConfig();
+
+	
+
         auto asyncResp = std::make_shared<AsyncResp>(res);
         res.jsonValue = {
             {"@odata.id", "/redfish/v1/AccountService"},
@@ -1323,15 +1326,17 @@
 		   /* commenting below code, as the property "PasswordPolicyComplexity"
 		    * is not defined in AccountService 1.7.0 version in DMTF 2019.4 Version.
 		    */
-		   #if 0
+		   
 		    if (property.first == "PasswordPolicyHistory")
                     {
                         const uint8_t* value =
                             std::get_if<uint8_t>(&property.second);
                         if (value != nullptr)
                         {
-                          changePasswordPolicy(*value,0);
+                          //changePasswordPolicy(*value,0);
                           BMCWEB_LOG_DEBUG << "password Policy";
+			  asyncResp->res.jsonValue["Oem"]["OpenBMC"]["PasswordPolicyHistory"] = *value;
+
                         }
                     }
                    if (property.first == "PasswordPolicyComplexity")
@@ -1340,11 +1345,13 @@
                             std::get_if<uint8_t>(&property.second);
                         if (value != nullptr)
                         {
-                          changePasswordPolicy(*value,1);
+                          //changePasswordPolicy(*value,1);
                           BMCWEB_LOG_DEBUG << "password Policy";
+			  asyncResp->res.jsonValue["Oem"]["OpenBMC"]["PasswordPolicyComplexity"] = *value;
+			  
                         }
                     }
-	   	   #endif
+	   	   
                 }
             },
             "xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
@@ -1383,6 +1390,10 @@
         std::optional<nlohmann::json> ldapObject;
         std::optional<nlohmann::json> activeDirectoryObject;
         std::optional<nlohmann::json> oemObject;
+	std::optional<uint8_t> passwordcomplexity;
+        std::optional<uint8_t> passwordhistory;
+
+
 
         if (!json_util::readJson(
                 req, res, "AccountLockoutDuration", unlockTimeout,
@@ -1396,6 +1407,7 @@
             return;
         }
 
+
         if (minPasswordLength)
         {
             messages::propertyNotWritable(asyncResp->res, "MinPasswordLength");
@@ -1411,21 +1423,66 @@
             handleLDAPPatch(*ldapObject, asyncResp, "LDAP");
         }
 
+
         if (std::optional<nlohmann::json> oemOpenBMCObject;
             oemObject &&
             json_util::readJson(*oemObject, res, "OpenBMC", oemOpenBMCObject))
-        {
-            if (std::optional<nlohmann::json> authMethodsObject;
-                oemOpenBMCObject &&
-                json_util::readJson(*oemOpenBMCObject, res, "AuthMethods",
-                                    authMethodsObject))
-            {
-                if (authMethodsObject)
-                {
-                    handleAuthMethodsPatch(*authMethodsObject, asyncResp);
-                }
-            }
-        }
+	{
+		if (std::optional<nlohmann::json> authMethodsObject;
+				oemOpenBMCObject &&
+				json_util::readJson(*oemOpenBMCObject, res, "AuthMethods",
+					authMethodsObject,"PasswordPolicyComplexity", passwordcomplexity,"PasswordPolicyHistory",passwordhistory))
+		{
+			if (authMethodsObject)
+			{
+				handleAuthMethodsPatch(*authMethodsObject, asyncResp);
+			}
+
+		if(passwordcomplexity)
+		{     	
+			crow::connections::systemBus->async_method_call(
+					[asyncResp,passwordcomplexity](const boost::system::error_code ec) {
+					if (ec)
+					{
+					BMCWEB_LOG_DEBUG << "doPatch error ";
+					messages::internalError(asyncResp->res);
+					return;
+					}
+					changePasswordPolicy(*passwordcomplexity,1);
+					messages::success(asyncResp->res);
+					},
+					"xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
+					"org.freedesktop.DBus.Properties", "Set",
+					"xyz.openbmc_project.User.AccountPolicy",
+					"PasswordPolicyComplexity", std::variant<uint8_t>(*passwordcomplexity));
+
+		}
+
+		if(passwordhistory)
+		{
+			crow::connections::systemBus->async_method_call(
+					[asyncResp,passwordhistory](const boost::system::error_code ec) {
+					if (ec)
+					{
+					BMCWEB_LOG_DEBUG << "doPatch error ";
+					messages::internalError(asyncResp->res);
+					return;
+					}
+					changePasswordPolicy(*passwordhistory,0);
+					messages::success(asyncResp->res);
+					},
+					"xyz.openbmc_project.User.Manager", "/xyz/openbmc_project/user",
+					"org.freedesktop.DBus.Properties", "Set",
+					"xyz.openbmc_project.User.AccountPolicy",
+					"PasswordPolicyHistory", std::variant<uint8_t>(*passwordhistory));
+
+		}
+
+		}
+
+	}
+
+
 
         if (activeDirectoryObject)
         {
