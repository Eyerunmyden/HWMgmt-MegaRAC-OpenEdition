diff -Naur a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2021-03-01 22:49:39.875282613 +0530
+++ b/CMakeLists.txt	2021-03-01 22:36:45.313796845 +0530
@@ -190,6 +190,7 @@
     -Wdouble-promotion \
     -Wformat=2 \
     -Wno-unused-parameter \
+    -Wno-missing-field-initializers \
 "
 )
 
@@ -207,6 +208,7 @@
             -Wdouble-promotion \
             -Wformat=2 \
             -Wno-unused-parameter \
+	    -Wno-missing-field-initializers \
         "
         )
     endif (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 8.0)
diff -Naur a/redfish-core/lib/ethernet.hpp b/redfish-core/lib/ethernet.hpp
--- a/redfish-core/lib/ethernet.hpp	2021-03-01 22:49:39.883282667 +0530
+++ b/redfish-core/lib/ethernet.hpp	2021-03-01 23:05:06.189692138 +0530
@@ -26,9 +26,22 @@
 #include <regex>
 #include <variant>
 
+
+#include <iostream>
+#include <tuple>
+#include <arpa/inet.h>
+#include <linux/ethtool.h>
+#include <linux/sockios.h>
+#include <net/if.h>
+#include <netinet/in.h>
+#include <sys/ioctl.h>
+#include <sys/socket.h>
+#include <unistd.h>
+
+
 namespace redfish
 {
-
+using namespace std; 
 /**
  * DBus types primitives for several generic DBus interfaces
  * TODO(Pawel) consider move this to separate file into boost::dbus
@@ -47,6 +60,13 @@
                          uint32_t, int64_t, uint64_t, double,
                          std::vector<std::string>>>>>>>;
 
+using LinkSpeed = int32_t;
+using DuplexMode = uint8_t;
+using Autoneg = uint8_t;
+using SpeedInfo = std::tuple<LinkSpeed, DuplexMode, Autoneg>;
+
+
+
 enum class LinkType
 {
     Local,
@@ -93,7 +113,7 @@
  */
 struct EthernetInterfaceData
 {
-    uint32_t speed;
+    int32_t speed;
     bool auto_neg;
     bool DNSEnabled;
     bool NTPEnabled;
@@ -205,6 +225,52 @@
     return "";
 }
 
+
+//// Getting Speed value from driver
+
+SpeedInfo getSpeedInfo(const std::string &ethiface_id)
+{
+    int sock{-1};
+    ifreq ifr{0};
+    ethtool_cmd edata{0};
+    LinkSpeed speed{0};
+    Autoneg autoneg{0};
+    DuplexMode duplex{0};
+
+    do
+    {
+        sock = socket(PF_INET, SOCK_DGRAM, IPPROTO_IP);
+        if (sock < 0)
+        {
+            break;
+        }
+
+        strncpy(ifr.ifr_name,ethiface_id.c_str(), sizeof(ifr.ifr_name));
+        ifr.ifr_data = reinterpret_cast<char*>(&edata);
+
+        edata.cmd = ETHTOOL_GSET;
+
+        if (ioctl(sock, SIOCETHTOOL, &ifr) < 0)
+        {
+//        syslog(LOG_WARNING,"### Inside Speed Interface socket failed");
+            break;
+        }
+        speed = static_cast<int16_t>(edata.speed);
+        duplex = edata.duplex;
+        autoneg = static_cast<bool>(edata.autoneg);
+    } while (0);
+
+    if (sock)
+    {
+        close(sock);
+    }
+    return std::make_tuple(speed, duplex, autoneg);
+}
+
+
+////// 
+
+
 inline bool extractEthernetInterfaceData(const std::string& ethiface_id,
                                          const GetManagedObjects& dbus_data,
                                          EthernetInterfaceData& ethData)
@@ -252,6 +318,8 @@
                 {
                     for (const auto& propertyPair : ifacePair.second)
                     {
+			SpeedInfo retval;					
+			retval = getSpeedInfo(ethiface_id);
                         if (propertyPair.first == "AutoNeg")
                         {
                             const bool* auto_neg =
@@ -263,8 +331,9 @@
                         }
                         else if (propertyPair.first == "Speed")
                         {
-                            const uint32_t* speed =
-                                std::get_if<uint32_t>(&propertyPair.second);
+  //                          const uint32_t *speed =
+    //                            std::get_if<uint32_t>(&propertyPair.second);
+			     const int32_t *speed = const_cast<int32_t *>(&get<0>(retval));
                             if (speed != nullptr)
                             {
                                 ethData.speed = *speed;
@@ -1762,7 +1831,7 @@
 
         health->populate();
 
-        if (ethData.nicEnabled)
+        if (ethData.speed > 0)
         {
             json_response["LinkStatus"] = "LinkUp";
             json_response["Status"]["State"] = "Enabled";
