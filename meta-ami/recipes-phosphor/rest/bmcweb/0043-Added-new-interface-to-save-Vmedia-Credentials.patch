diff -Naur b/redfish-core/include/redfish.hpp a/redfish-core/include/redfish.hpp
--- b/redfish-core/include/redfish.hpp	2021-06-03 12:29:33.578057712 +0530
+++ a/redfish-core/include/redfish.hpp	2021-06-03 13:21:14.409687545 +0530
@@ -193,6 +193,7 @@
         nodes.emplace_back(std::make_unique<VirtualMediaEjectMediaActionInfo>(app));
         nodes.emplace_back(std::make_unique<VirtualMediaInsertMediaAction>(app));
         nodes.emplace_back(std::make_unique<VirtualMediaEjectMediaAction>(app));
+        nodes.emplace_back(std::make_unique<VirtualMediaStoreCredentialsAction>(app));
 
         nodes.emplace_back(
             std::make_unique<MessageRegistryFileCollection>(app));
diff -Naur b/redfish-core/lib/virtual_media.hpp a/redfish-core/lib/virtual_media.hpp
--- b/redfish-core/lib/virtual_media.hpp	2021-06-03 12:29:33.578057712 +0530
+++ a/redfish-core/lib/virtual_media.hpp	2021-06-03 13:21:02.525542340 +0530
@@ -38,6 +38,7 @@
 constexpr char const *LegacyIntf = "xyz.openbmc_project.VirtualMedia.Legacy";
 constexpr char const *MountPointIntf = "xyz.openbmc_project.VirtualMedia.MountPoint";
 constexpr char const *dbusPropIntf = "org.freedesktop.DBus.Properties";
+constexpr char const *CredentialsIntf = "xyz.openbmc_project.Credentials.Process";
 constexpr char const *dbusObjManagerIntf = "org.freedesktop.DBus.ObjectManager";
 constexpr char const *virtualmedia_ObjectPath = "/xyz/openbmc_project/VirtualMedia";
 constexpr char const *virtualmediaServiceName =
@@ -808,5 +809,112 @@
     }
 
 }; // VirtualMediaEjectMediaAction
+
+
+
+/**
+ * VirtualMedia_store_credentials_Action to store the Vmedia Credentials from webui
+ * 
+ */
+class VirtualMediaStoreCredentialsAction : public Node
+{
+  public:
+    VirtualMediaStoreCredentialsAction(App &app) :
+        Node(app, "/redfish/v1/Managers/bmc/VirtualMedia/<str>/Actions/VirtualMedia.StoreCredentials", std::string())
+    {
+        entityPrivileges = {
+            {boost::beast::http::verb::get, {{"Login"}}},
+            {boost::beast::http::verb::head, {{"Login"}}},
+            {boost::beast::http::verb::patch, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::put, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::delete_, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::post, {{"ConfigureComponents"}}}};
+    }
+
+  private:
+    void doPost(crow::Response &res, const crow::Request &req,
+                const std::vector<std::string> &params) override
+    {
+        auto asyncResp = std::make_shared<AsyncResp>(res);
+        std::string Instance=std::string(params[0]);
+
+       // Required parameters
+        std::string hostip;
+        std::string imagepath;
+        std::string transferprotocoltype;
+        std::string username;
+        std::string password;
+
+        /**
+         * Functions triggers appropriate requests on DBus
+         */
+        crow::connections::systemBus->async_method_call(
+            [asyncResp, instanceName{std::string(params[0])}](
+                const boost::system::error_code ec,
+                const ManagedObjectType& instances) {
+                if (ec)
+                {
+                    messages::internalError(asyncResp->res);
+                    return;
+                }
+
+                auto instanceIt = instances.begin();
+                for (; instanceIt != instances.end(); instanceIt++)
+                {
+                    if (boost::ends_with(instanceIt->first.str, "/" + instanceName))
+                    {
+                        break;
+                    }
+                }
+                if (instanceIt == instances.end())
+                {
+                    messages::resourceNotFound(asyncResp->res, "VirtualMediaInstance",
+                                               instanceName);
+                    return;
+                }
+	
+        },
+        redfish::virtualmedia::virtualmediaServiceName, redfish::virtualmedia::virtualmedia_ObjectPath,
+        redfish::virtualmedia::dbusObjManagerIntf , "GetManagedObjects");
+
+
+       //Reading the requested data
+        if (!json_util::readJson(
+                req, asyncResp->res, "HostIP", hostip, "ImagePath", imagepath,
+               "MountType", transferprotocoltype, "User", username, "PassWord", password))
+        {
+            return;
+        }
+
+
+        std::string InstanceObjectPath = std::string("/xyz/openbmc_project/VirtualMedia/") + "Credentials/isocredentials";
+
+       /* Call the Vmedia Credentials method */
+
+	std::vector<std::string> CredentialArrValue { hostip, imagepath, transferprotocoltype, username, password };
+	std::vector<std::string> CredentialArr { "HostIP", "ImagePath", "MountType", "User", "PassWord" };
+
+	for(unsigned int i=0; i<CredentialArr.size(); i++)
+	{
+        crow::connections::systemBus->async_method_call(
+            [asyncResp](const boost::system::error_code ec) {
+                if (ec)
+                {
+                    BMCWEB_LOG_ERROR << "DBUS response error: " << ec.message();
+                    messages::internalError(asyncResp->res);
+                    return;
+                }
+               messages::noContent(asyncResp->res);
+
+            },
+            redfish::virtualmedia::virtualmediaServiceName, InstanceObjectPath,
+	    redfish::virtualmedia::dbusPropIntf, "Set",
+	    redfish::virtualmedia::CredentialsIntf, CredentialArr[i],
+            std::variant<std::string>(CredentialArrValue[i]));
+	}
+
+    }
+
+}; // VirtualMediaEjectMediaAction
 
 } // namespace redfish
