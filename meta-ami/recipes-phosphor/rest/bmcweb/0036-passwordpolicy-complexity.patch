--- a/redfish-core/lib/account_service.hpp	2021-04-29 16:36:47.585677134 -0400
+++ b/redfish-core/lib/account_service.hpp	2021-04-29 16:35:34.684977950 -0400
@@ -47,7 +47,17 @@
 constexpr const char* mapperBusName = "xyz.openbmc_project.ObjectMapper";
 constexpr const char* mapperObjectPath = "/xyz/openbmc_project/object_mapper";
 constexpr const char* mapperIntf = "xyz.openbmc_project.ObjectMapper";
+constexpr const char* pamPasswordFile = "/etc/pam.d/common-password";
 
+std::string passPolicyComp[4] =  {
+    "password        [success=ok default=die]        pam_cracklib.so debug enforce_for_root  minlen=8 difok=0 lcredit=0 ocredit=0 dcredit=0 ucredit=0", //disabled
+    "password        [success=ok default=die]        pam_cracklib.so debug enforce_for_root reject_username minlen=8 difok=0 lcredit=0 ocredit=0 dcredit=0 ucredit=0 minclass=3", //low
+    "password        [success=ok default=die]        pam_cracklib.so debug enforce_for_root reject_username minlen=8 difok=0 lcredit=-1 ocredit=-1 dcredit=-1 ucredit=-1 ", //medium
+    "password        [success=ok default=die]        pam_cracklib.so debug enforce_for_root reject_username minlen=8 difok=0 lcredit=-1 ocredit=-1 dcredit=-1 ucredit=-1 maxrepeat=4 max\
+sequence=4", //high
+  };
+
+  
 struct LDAPRoleMapData
 {
     std::string groupName;
@@ -240,6 +250,59 @@
     }
 }
 
+
+inline int changePasswordPolicy(int passPolicy,char passHistory)
+{
+  std::fstream pamfile;
+  std::string line[64];
+  int i=0,j=0;
+
+  if((passPolicy > 5) || (passPolicy < 1) )
+    {
+      return -1;
+    }
+  if((passHistory > '5') || (passHistory < '1'))
+    {
+      return -1;
+    }
+
+  pamfile.open(pamPasswordFile,std::ios::in | std::ios::out);
+  if(pamfile.is_open() != 1)
+    {
+      pamfile.close();
+      return -1;
+    }
+
+  while(getline(pamfile,line[i]))
+    {
+      i++;
+    }
+  pamfile.close();
+  pamfile.open(pamPasswordFile,std::ios::out);
+
+  for(j=0;j<i;++j)
+    {
+          //Update password History
+        if(line[j].find("remember=") != std::string::npos)
+        {
+          line[j].replace(line[j].find("remember=")+9,1,1,passHistory);
+          pamfile << line[j] << std::endl;
+        } //Update password Complexity
+        else if(line[j].find("pam_cracklib") != std::string::npos)
+        {
+            pamfile << passPolicyComp[passPolicy] << std::endl;
+        } // Keep the rest
+        else
+        {
+            pamfile << line[j] << std::endl;
+        }
+
+      }
+  pamfile.close();
+  return 0;
+}
+
+  
 /**
  *  @brief validates given JSON input and then calls appropriate method to
  * create, to delete or to set Rolemapping object based on the given input.
@@ -1260,11 +1323,12 @@
                     {
                         const uint8_t* value =
                             std::get_if<uint8_t>(&property.second);
-                       //passwordPolicy = *value;
                         if (value != nullptr)
                         {
-                            asyncResp->res
-                                .jsonValue["PasswordPolicyComplexity"] = *value;
+			  char passHistory = static_cast<char>(((0xF0 & *value)>>1) | 0x30); //get the history and change it to ascii
+                          int passPolicy = 0xF & *value;  //get the complexity
+                          changePasswordPolicy(passPolicy,passHistory);
+                          BMCWEB_LOG_DEBUG << "password Policy";
                         }
                     }
 	   	   #endif
