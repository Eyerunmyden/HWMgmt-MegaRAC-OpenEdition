diff -Naur a/watchdog.cpp b/watchdog.cpp
--- a/watchdog.cpp	2020-12-01 10:41:33.456450355 +0530
+++ b/watchdog.cpp	2020-12-01 20:49:48.396382525 +0530
@@ -288,8 +288,6 @@
         std::cerr << "Get status error \n";
         log<level::ERR>(e.what());
     }
-    if (!std::get <uint8_t>( value ) )
-    {
 
     switch (action)
     {
@@ -328,20 +326,37 @@
             eventData2 = 5;
             break;
     }
-    }
-    std::vector<std::uint8_t> d = {eventData1, eventData2, 0xFF };
-    uint8_t al = (0x01 << eventData1);
+    std::vector<std::uint8_t> d = {0xff, 0xff, 0xff};
+    uint8_t al = 0x00;
 
-	std::cerr << "Set status call \n";
+    std::cerr << "Set status\n";
 
     try
     {
         auto method =
             bus.new_method_call(SEN_WATCHDOG_SERVICE, SEN_WATCHDOG_ROOT,
                                 SEN_INTERFACE, "Set");
-        method.append(SEN_WATCHDOG_INTERFACE,SEN_WATCHDOG_DATAPROP,std::variant<std::vector<std::uint8_t>>{d});
+	 method.append(SEN_WATCHDOG_INTERFACE,SEN_WATCHDOG_DATAPROP,std::variant<std::vector<std::uint8_t>>{d});
+		bus.call_noreply(method);
+
+	method =
+            bus.new_method_call(SEN_WATCHDOG_SERVICE, SEN_WATCHDOG_ROOT,
+                                SEN_INTERFACE, "Set");
+        method.append(SEN_WATCHDOG_INTERFACE,SEN_WATCHDOG_STATPROP,std::variant<uint8_t>{al});
         bus.call_noreply(method);
 
+	d = {eventData1, eventData2, 0xFF};
+        al = (0x01 << eventData1);
+
+	if (!std::get <uint8_t>( value ) )
+	{
+		method =
+            		bus.new_method_call(SEN_WATCHDOG_SERVICE, SEN_WATCHDOG_ROOT,
+                                SEN_INTERFACE, "Set");
+                method.append(SEN_WATCHDOG_INTERFACE,SEN_WATCHDOG_DATAPROP,std::variant<std::vector<std::uint8_t>>{d});
+                bus.call_noreply(method);
+        }
+
 	method =
             bus.new_method_call(SEN_WATCHDOG_SERVICE, SEN_WATCHDOG_ROOT,
                                 SEN_INTERFACE, "Set");
@@ -350,7 +365,7 @@
     }
     catch (const SdBusError& e)
     {
-	std::cerr << "Set status error \n";
+	std::cerr << "error, sensor not found \n";
         log<level::ERR>(e.what());
     }
 }
