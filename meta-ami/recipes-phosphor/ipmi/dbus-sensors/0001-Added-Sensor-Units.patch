diff -Naur a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2021-02-17 16:36:44.982988280 +0530
+++ b/CMakeLists.txt	2021-02-17 15:44:52.278077582 +0530
@@ -54,28 +54,28 @@
 
 project (sensors CXX)
 
-set (ADC_SRC_FILES src/Utils.cpp src/ADCSensor.cpp src/Thresholds.cpp)
+set (ADC_SRC_FILES src/Utils.cpp src/ADCSensor.cpp src/Thresholds.cpp src/SdrRecord.cpp)
 
-set (CPU_SRC_FILES src/Utils.cpp src/CPUSensor.cpp src/Thresholds.cpp)
+set (CPU_SRC_FILES src/Utils.cpp src/CPUSensor.cpp src/Thresholds.cpp src/SdrRecord.cpp)
 
-set (EXIT_AIR_SRC_FILES src/Utils.cpp src/Thresholds.cpp)
+set (EXIT_AIR_SRC_FILES src/Utils.cpp src/Thresholds.cpp src/SdrRecord.cpp)
 
 set (FAN_SRC_FILES src/TachSensor.cpp src/PwmSensor.cpp src/Utils.cpp
-     src/Thresholds.cpp)
+     src/Thresholds.cpp src/SdrRecord.cpp)
 
 set (HWMON_TEMP_SRC_FILES src/Utils.cpp src/HwmonTempSensor.cpp
-     src/Thresholds.cpp)
+     src/Thresholds.cpp src/SdrRecord.cpp)
 
-set (INTRUSION_SRC_FILES src/Utils.cpp src/ChassisIntrusionSensor.cpp)
+set (INTRUSION_SRC_FILES src/Utils.cpp src/ChassisIntrusionSensor.cpp src/SdrRecord.cpp)
 
-set (IPMB_SRC_FILES src/Utils.cpp src/Thresholds.cpp)
+set (IPMB_SRC_FILES src/Utils.cpp src/Thresholds.cpp src/SdrRecord.cpp)
 
-set (MCUTEMP_SRC_FILES src/Utils.cpp src/Thresholds.cpp)
+set (MCUTEMP_SRC_FILES src/Utils.cpp src/Thresholds.cpp src/SdrRecord.cpp)
 
 set (PSU_SRC_FILES src/Utils.cpp src/PSUSensor.cpp src/Thresholds.cpp
-     src/PwmSensor.cpp src/PSUEvent.cpp)
+     src/PwmSensor.cpp src/PSUEvent.cpp src/SdrRecord.cpp)
 
-set (NVME_SRC_FILES src/Utils.cpp src/NVMeSensorMain.cpp src/NVMeSensor.cpp src/Thresholds.cpp)
+set (NVME_SRC_FILES src/Utils.cpp src/NVMeSensorMain.cpp src/NVMeSensor.cpp src/Thresholds.cpp src/SdrRecord.cpp)
 
 set (EXTERNAL_PACKAGES Boost sdbusplus-project nlohmann-json)
 set (SENSOR_LINK_LIBS -lsystemd stdc++fs sdbusplus)
diff -Naur a/include/ADCSensor.hpp b/include/ADCSensor.hpp
--- a/include/ADCSensor.hpp	2021-02-16 15:49:42.420379279 +0530
+++ b/include/ADCSensor.hpp	2021-02-17 16:32:55.570793941 +0530
@@ -69,7 +69,7 @@
               std::vector<thresholds::Threshold>&& thresholds,
               const double scaleFactor, PowerState readState,
               const std::string& sensorConfiguration,
-              std::optional<BridgeGpio>&& bridgeGpio);
+              std::optional<BridgeGpio>&& bridgeGpio,uint16_t EvStat ,const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord);
     ~ADCSensor();
     void setupRead(void);
 
diff -Naur a/include/ChassisIntrusionSensor.hpp b/include/ChassisIntrusionSensor.hpp
--- a/include/ChassisIntrusionSensor.hpp	2021-02-16 15:49:42.420379279 +0530
+++ b/include/ChassisIntrusionSensor.hpp	2021-02-17 16:32:55.570793941 +0530
@@ -7,7 +7,7 @@
 
 #include <memory>
 #include <string>
-
+#include <SdrRecord.hpp>
 enum IntrusionSensorType
 {
     pch,
@@ -24,7 +24,12 @@
     ~ChassisIntrusionSensor();
 
     void start(IntrusionSensorType type, int busId, int slaveAddr,
-               bool gpioInverted);
+              bool gpioInvertedi, uint8_t dtype, uint8_t eventType, uint8_t evStat,
+              uint8_t sdrVersion,uint8_t recordType, uint8_t recordLen,uint8_t ownerId,uint8_t ownerLun,
+              uint8_t entityId,uint8_t entityInstance, uint8_t sensorInit,uint8_t sensorCap,uint8_t sensorType,
+              uint8_t sensorUnit1,uint8_t modifierUnit,uint8_t maxReading,uint8_t minReading,uint8_t sensorUnit2,
+              uint8_t linearization,uint8_t nominalReading,uint8_t normalMax,uint8_t normalMin,
+              uint8_t positiveHysteris,uint8_t negativeHysteresis,uint8_t idStringLen);
 
   private:
     std::shared_ptr<sdbusplus::asio::dbus_interface> mIface;
@@ -43,6 +48,12 @@
 
     // valid if it is via GPIO
     bool mGpioInverted;
+    uint8_t mdtype, meventType, mevStat;
+    uint8_t msdrVersion, mrecordType,mrecordLen,mownerId,mownerLun,mentityId,
+            mentityInstance,msensorInit,msensorCap,msensorType,
+            msensorUnit1,mmodifierUnit,mmaxReading,mminReading,msensorUnit2,
+            mlinearization,mnominalReading,mnormalMax,mnormalMin,
+            mpositiveHysteris,mnegativeHysteresis,midStringLen;
     std::string mPinName = "CHASSIS_INTRUSION";
     gpiod::line mGpioLine;
     boost::asio::posix::stream_descriptor mGpioFd;
diff -Naur a/include/CPUSensor.hpp b/include/CPUSensor.hpp
--- a/include/CPUSensor.hpp	2021-02-16 15:49:42.420379279 +0530
+++ b/include/CPUSensor.hpp	2021-02-17 16:32:55.570793941 +0530
@@ -26,7 +26,7 @@
               boost::asio::io_service& io, const std::string& sensorName,
               std::vector<thresholds::Threshold>&& thresholds,
               const std::string& configuration, int cpuId, bool show,
-              double dtsOffset);
+              double dtsOffset,uint16_t EvStat,const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord);
     ~CPUSensor();
     static constexpr unsigned int sensorScaleFactor = 1000;
     static constexpr unsigned int sensorPollMs = 1000;
diff -Naur a/include/ExitAirTempSensor.hpp b/include/ExitAirTempSensor.hpp
--- a/include/ExitAirTempSensor.hpp	2021-02-16 15:49:42.420379279 +0530
+++ b/include/ExitAirTempSensor.hpp	2021-02-17 16:32:55.570793941 +0530
@@ -26,7 +26,7 @@
               const std::string& name, const std::string& sensorConfiguration,
               sdbusplus::asio::object_server& objectServer,
               std::vector<thresholds::Threshold>&& thresholds,
-              std::shared_ptr<ExitAirTempSensor>& parent);
+              std::shared_ptr<ExitAirTempSensor>& parent,uint16_t EvStat,const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord);
     ~CFMSensor();
 
     bool calculate(double&);
@@ -67,7 +67,7 @@
                       const std::string& name,
                       const std::string& sensorConfiguration,
                       sdbusplus::asio::object_server& objectServer,
-                      std::vector<thresholds::Threshold>&& thresholds);
+                      std::vector<thresholds::Threshold>&& thresholds,uint16_t EvStat , const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord);
     ~ExitAirTempSensor();
 
     void checkThresholds(void) override;
diff -Naur a/include/HwmonTempSensor.hpp b/include/HwmonTempSensor.hpp
--- a/include/HwmonTempSensor.hpp	2021-02-16 15:49:42.420379279 +0530
+++ b/include/HwmonTempSensor.hpp	2021-02-17 16:32:55.570793941 +0530
@@ -20,7 +20,7 @@
                     boost::asio::io_service& io, const std::string& fanName,
                     std::vector<thresholds::Threshold>&& thresholds,
                     const std::string& sensorConfiguration,
-                    const PowerState powerState);
+                    const PowerState powerState,uint16_t EvStat,const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord);
     ~HwmonTempSensor();
     void setupRead(void);
 
diff -Naur a/include/IpmbSensor.hpp b/include/IpmbSensor.hpp
--- a/include/IpmbSensor.hpp	2021-02-16 15:49:42.420379279 +0530
+++ b/include/IpmbSensor.hpp	2021-02-17 16:32:55.570793941 +0530
@@ -81,7 +81,7 @@
                sdbusplus::asio::object_server& objectServer,
                std::vector<thresholds::Threshold>&& thresholds,
                uint8_t deviceAddress, uint8_t hostSMbusIndex,
-               std::string& sensorTypeName);
+               std::string& sensorTypeName,uint16_t EvStat,const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord);
     ~IpmbSensor();
 
     void checkThresholds(void) override;
diff -Naur a/include/MCUTempSensor.hpp b/include/MCUTempSensor.hpp
--- a/include/MCUTempSensor.hpp	2021-02-16 15:49:42.420379279 +0530
+++ b/include/MCUTempSensor.hpp	2021-02-17 16:32:55.570793941 +0530
@@ -17,7 +17,7 @@
                   const std::string& sensorConfiguration,
                   sdbusplus::asio::object_server& objectServer,
                   std::vector<thresholds::Threshold>&& thresholds,
-                  uint8_t busId, uint8_t mcuAddress, uint8_t tempReg);
+                  uint8_t busId, uint8_t mcuAddress, uint8_t tempReg,uint16_t EvStat,const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord);
     ~MCUTempSensor();
 
     void checkThresholds(void) override;
diff -Naur a/include/PSUSensor.hpp b/include/PSUSensor.hpp
--- a/include/PSUSensor.hpp	2021-02-16 15:49:42.420379279 +0530
+++ b/include/PSUSensor.hpp	2021-02-17 16:32:55.570793941 +0530
@@ -20,7 +20,7 @@
               std::vector<thresholds::Threshold>&& thresholds,
               const std::string& sensorConfiguration,
               std::string& sensorTypeName, unsigned int factor, double max,
-              double min, const std::string& label, size_t tSize);
+              double min, const std::string& label, size_t tSize,uint16_t EvStat, const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord);
     ~PSUSensor();
     void setupRead(void);
 
diff -Naur a/include/SdrRecord.hpp b/include/SdrRecord.hpp
--- a/include/SdrRecord.hpp	1970-01-01 05:30:00.000000000 +0530
+++ b/include/SdrRecord.hpp	2021-02-17 16:32:55.570793941 +0530
@@ -0,0 +1,34 @@
+#pragma once
+
+#include <sdbusplus/asio/object_server.hpp>
+
+namespace sdr
+{
+struct SdrRecord
+{
+        uint8_t SdrVersion;
+        uint8_t RecordType;
+        uint8_t RecordLen;
+        uint8_t OwnerId;
+        uint8_t OwnerLun;
+        uint8_t EntityId;
+        uint8_t EntityInstance;
+        uint8_t SensorInit;
+        uint8_t SensorCap;
+        uint8_t SensorType;
+        uint8_t EventType;
+        uint8_t SensorUnit1;
+        uint8_t SensorUnit2;
+        uint8_t ModifierUnit;
+        uint8_t MaxReading;
+        uint8_t MinReading;
+        uint8_t Linearization;
+        uint8_t NominalReading;
+        uint8_t NormalMax;
+        uint8_t NormalMin;
+        uint8_t PositiveHysteris;
+        uint8_t NegativeHysteresis;
+        uint8_t IdStringLen;
+
+};
+}
diff -Naur a/include/sensor.hpp b/include/sensor.hpp
--- a/include/sensor.hpp	2021-02-16 15:49:42.420379279 +0530
+++ b/include/sensor.hpp	2021-02-17 16:32:55.570793941 +0530
@@ -9,6 +9,7 @@
 #include <memory>
 #include <string>
 #include <vector>
+#include <SdrRecord.hpp>
 
 constexpr size_t sensorFailedPollTimeMs = 5000;
 
@@ -40,7 +41,7 @@
            std::vector<thresholds::Threshold>&& thresholdData,
            const std::string& configurationPath, const std::string& objectType,
            const double max, const double min,
-           std::shared_ptr<sdbusplus::asio::connection>& conn,
+           std::shared_ptr<sdbusplus::asio::connection>& conn,uint16_t EvStat, const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord,
            PowerState readState = PowerState::always) :
         name(std::regex_replace(name, std::regex("[^a-zA-Z0-9_/]+"), "_")),
         configurationPath(configurationPath), objectType(objectType),
@@ -50,8 +51,19 @@
         readState(readState), errCount(0),
         instrumentation(enableInstrumentation
                             ? std::make_unique<SensorInstrumentation>()
-                            : nullptr)
-    {}
+                            : nullptr),eventStat(EvStat),Unit(sensorUnit),SdrVersion(sdrRecord.SdrVersion),
+       RecordType(sdrRecord.RecordType),RecordLen(sdrRecord.RecordLen),OwnerId(sdrRecord.OwnerId),
+       OwnerLun(sdrRecord.OwnerLun),EntityId(sdrRecord.EntityId),EntityInstance(sdrRecord.EntityInstance),
+       SensorInit(sdrRecord.SensorInit),SensorCap(sdrRecord.SensorCap),SensorType(sdrRecord.SensorType),
+       EventType(sdrRecord.EventType),SensorUnit1(sdrRecord.SensorUnit1),ModifierUnit(sdrRecord.ModifierUnit),
+       MaxReading(sdrRecord.MaxReading),MinReading(sdrRecord.MinReading),SensorUnit2(sdrRecord.SensorUnit2),
+       Linearization(sdrRecord.Linearization),NominalReading(sdrRecord.NominalReading),NormalMax(sdrRecord.NormalMax),
+       NormalMin(sdrRecord.NormalMin),PositiveHysteris(sdrRecord.PositiveHysteris),
+       NegativeHysteresis(sdrRecord.NegativeHysteresis),IdStringLen(sdrRecord.IdStringLen)
+
+     {
+     }
+
     virtual ~Sensor() = default;
     virtual void checkThresholds(void) = 0;
     std::string name;
@@ -76,6 +88,31 @@
     PowerState readState;
     size_t errCount;
     std::unique_ptr<SensorInstrumentation> instrumentation;
+    std::string Unit;
+    uint16_t eventStat;
+    uint8_t SdrVersion;
+    uint8_t RecordType;
+    uint8_t RecordLen;
+    uint8_t OwnerId;
+    uint8_t OwnerLun;
+    uint8_t EntityId;
+    uint8_t EntityInstance;
+    uint8_t SensorInit;
+    uint8_t SensorCap;
+    uint8_t SensorType;
+    uint8_t EventType;
+    uint8_t SensorUnit1;
+    uint8_t SensorUnit2;
+    uint8_t ModifierUnit;
+    uint8_t MaxReading;
+    uint8_t MinReading;
+    uint8_t Linearization;
+    uint8_t NominalReading;
+    uint8_t NormalMax;
+    uint8_t NormalMin;
+    uint8_t PositiveHysteris;
+    uint8_t NegativeHysteresis;
+    uint8_t IdStringLen;
 
     void updateInstrumentation(double readValue)
     {
@@ -194,6 +231,30 @@
 
         sensorInterface->register_property("MaxValue", maxValue);
         sensorInterface->register_property("MinValue", minValue);
+    	sensorInterface->register_property("EvStat", eventStat);
+    	sensorInterface->register_property("Unit", Unit);
+        sensorInterface->register_property("SdrVersion", SdrVersion);
+        sensorInterface->register_property("RecordType",RecordType );
+        sensorInterface->register_property("RecordLen",RecordLen );
+        sensorInterface->register_property("OwnerId", OwnerId );
+        sensorInterface->register_property("OwnerLun", OwnerLun);
+        sensorInterface->register_property("EntityId",EntityId );
+        sensorInterface->register_property("EntityInstance",EntityInstance );
+        sensorInterface->register_property("SensorInit",SensorInit );
+        sensorInterface->register_property("SensorCap",SensorCap );
+        sensorInterface->register_property("SensorType",SensorType );
+        sensorInterface->register_property("EventType",EventType );
+        sensorInterface->register_property("SensorUnit1", SensorUnit1 );
+        sensorInterface->register_property("SensorUnit2", SensorUnit2 );
+        sensorInterface->register_property("ModifierUnit", ModifierUnit );
+        sensorInterface->register_property("Linearization", Linearization );
+        sensorInterface->register_property("NominalReading", NominalReading );
+        sensorInterface->register_property("NormalMax", NormalMax );
+        sensorInterface->register_property("NormalMin", NormalMin );
+        sensorInterface->register_property("PositiveHysteris", PositiveHysteris );
+        sensorInterface->register_property("NegativeHysteresis",NegativeHysteresis );
+        sensorInterface->register_property("IdStringLen", IdStringLen );
+
         sensorInterface->register_property(
             "Value", value, [&](const double& newValue, double& oldValue) {
                 return setSensorValue(newValue, oldValue);
@@ -445,3 +506,4 @@
         internalSet = false;
     }
 };
+bool  parseSdrRecordFromConfig( const SensorData& sensorData,struct sdr::SdrRecord& sdrRecord );
diff -Naur a/include/TachSensor.hpp b/include/TachSensor.hpp
--- a/include/TachSensor.hpp	2021-02-16 15:49:42.420379279 +0530
+++ b/include/TachSensor.hpp	2021-02-17 16:32:55.570793941 +0530
@@ -74,7 +74,7 @@
                const std::string& sensorConfiguration,
                const std::pair<size_t, size_t>& limits,
                const PowerState& powerState,
-               const std::optional<std::string>& led);
+               const std::optional<std::string>& led,uint16_t EvStat,const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord);
     ~TachSensor();
 
   private:
diff -Naur a/src/ADCSensor.cpp b/src/ADCSensor.cpp
--- a/src/ADCSensor.cpp	2021-02-16 15:49:33.223844226 +0530
+++ b/src/ADCSensor.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -52,11 +52,11 @@
                      std::vector<thresholds::Threshold>&& _thresholds,
                      const double scaleFactor, PowerState readState,
                      const std::string& sensorConfiguration,
-                     std::optional<BridgeGpio>&& bridgeGpio) :
+                     std::optional<BridgeGpio>&& bridgeGpio,uint16_t EvStat,const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord) :
     Sensor(boost::replace_all_copy(sensorName, " ", "_"),
            std::move(_thresholds), sensorConfiguration,
            "xyz.openbmc_project.Configuration.ADC", maxReading, minReading,
-           conn, readState),
+           conn,EvStat , sensorUnit,sdrRecord, readState),
     std::enable_shared_from_this<ADCSensor>(), objServer(objectServer),
     inputDev(io, open(path.c_str(), O_RDONLY)), waitTimer(io), path(path),
     scaleFactor(scaleFactor), bridgeGpio(std::move(bridgeGpio)),
diff -Naur a/src/ADCSensorMain.cpp b/src/ADCSensorMain.cpp
--- a/src/ADCSensorMain.cpp	2021-02-16 15:49:33.223844226 +0530
+++ b/src/ADCSensorMain.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -174,6 +174,28 @@
                 std::string sensorName =
                     std::get<std::string>(findSensorName->second);
 
+		auto findSensorUnit = baseConfiguration->second.find("Unit");
+        if (findSensorUnit == baseConfiguration->second.end())
+        {
+            std::cerr << "could not determine configuration Unit for "
+                      << path.string() << "\n";
+            continue;
+        }
+        std::string sensorUnit = std::get<std::string>(findSensorUnit->second);
+
+
+        auto findEvStat = baseConfiguration->second.find("EvStat");
+        if (findEvStat == baseConfiguration->second.end())
+        {
+            std::cerr << "Base configuration missing EvStat"
+                        << baseConfiguration->first << "\n";
+                continue;
+        }
+
+         uint16_t EvStat =
+            std::visit(VariantToUnsignedIntVisitor(), findEvStat->second);
+
+
                 // on rescans, only update sensors we were signaled by
                 auto findSensor = sensors.find(sensorName);
                 if (!firstScan && findSensor != sensors.end())
@@ -196,6 +218,14 @@
                         continue;
                     }
                 }
+	
+		struct sdr::SdrRecord sdrRecord;
+
+                if( !parseSdrRecordFromConfig(*sensorData,sdrRecord))
+                {
+                    std::cerr << "error getting sdr record for " << sensorName << std::endl;
+                }
+
                 std::vector<thresholds::Threshold> sensorThresholds;
                 if (!parseThresholdsFromConfig(*sensorData, sensorThresholds))
                 {
@@ -274,7 +304,7 @@
                 sensor = std::make_shared<ADCSensor>(
                     path.string(), objectServer, dbusConnection, io, sensorName,
                     std::move(sensorThresholds), scaleFactor, readState,
-                    *interfacePath, std::move(bridgeGpio));
+                    *interfacePath, std::move(bridgeGpio),EvStat,sensorUnit,sdrRecord);
                 sensor->setupRead();
             }
         }));
diff -Naur a/src/ChassisIntrusionSensor.cpp b/src/ChassisIntrusionSensor.cpp
--- a/src/ChassisIntrusionSensor.cpp	2021-02-16 15:49:33.223844226 +0530
+++ b/src/ChassisIntrusionSensor.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -272,7 +272,12 @@
 }
 
 void ChassisIntrusionSensor::start(IntrusionSensorType type, int busId,
-                                   int slaveAddr, bool gpioInverted)
+                                   int slaveAddr, bool gpioInverted, uint8_t dtype, uint8_t eventType, uint8_t evStat,
+                                  uint8_t sdrVersion,uint8_t recordType, uint8_t recordLen,uint8_t ownerId,uint8_t ownerLun,uint8_t entityId,
+                                   uint8_t entityInstance, uint8_t sensorInit,uint8_t sensorCap,uint8_t sensorType,
+                                  uint8_t sensorUnit1,uint8_t modifierUnit,uint8_t maxReading,uint8_t minReading,
+                                  uint8_t sensorUnit2,uint8_t linearization,uint8_t nominalReading,uint8_t normalMax,
+                                  uint8_t normalMin,uint8_t positiveHysteris,uint8_t negativeHysteresis,uint8_t idStringLen)
 {
     if (DEBUG)
     {
@@ -302,6 +307,31 @@
     mBusId = busId;
     mSlaveAddr = slaveAddr;
     mGpioInverted = gpioInverted;
+    mdtype = dtype;
+    meventType = eventType;
+    mevStat = evStat;
+    msdrVersion = sdrVersion;
+    mrecordType = recordType;
+    mrecordLen = recordLen;
+    mownerId = ownerId ;
+    mownerLun = ownerLun;
+    mentityId = entityId;
+    mentityInstance = entityInstance;
+    msensorInit = sensorInit ;
+    msensorCap = sensorCap;
+    msensorType = sensorType;
+    msensorUnit1 = sensorUnit1;
+    mmodifierUnit = modifierUnit;
+    mmaxReading = maxReading;
+    mminReading = minReading;
+    msensorUnit2 = sensorUnit2;
+    mlinearization = linearization;
+    mnominalReading = nominalReading;
+    mnormalMax =  normalMax;
+    mnormalMin = normalMin;
+    mpositiveHysteris = positiveHysteris;
+    mnegativeHysteresis = negativeHysteresis;
+    midStringLen = idStringLen;
 
     if ((mType == IntrusionSensorType::pch && mBusId > 0 && mSlaveAddr > 0) ||
         (mType == IntrusionSensorType::gpio))
@@ -314,6 +344,29 @@
                 [&](const std::string& req, std::string& propertyValue) {
                     return setSensorValue(req, propertyValue);
                 });
+           mIface->register_property("DType", mdtype);
+           mIface->register_property("EventType", meventType);
+           mIface->register_property("EvStat", mevStat);
+           mIface->register_property("SdrVersion",msdrVersion );
+           mIface->register_property("RecordType", mrecordType );
+           mIface->register_property("RecordLen",mrecordLen );
+           mIface->register_property("OwnerId",mownerId );
+           mIface->register_property("OwnerLun",mownerLun );
+           mIface->register_property("EntityId",mentityId );
+           mIface->register_property("EntityInstance",mentityInstance );
+           mIface->register_property("SensorInit",msensorInit );
+           mIface->register_property("SensorCap",msensorCap );
+           mIface->register_property("SensorType",msensorType );
+           mIface->register_property("SensorUnit1",msensorUnit1 );
+           mIface->register_property("ModifierUnit",mmodifierUnit );
+           mIface->register_property("SensorUnit2",msensorUnit2 );
+           mIface->register_property("Linearization",mlinearization );
+           mIface->register_property("NominalReading",mnominalReading );
+           mIface->register_property("NormalMax",mnormalMax );
+           mIface->register_property("NormalMin",mnormalMin );
+           mIface->register_property("PositiveHysteris",mpositiveHysteris );
+           mIface->register_property("NegativeHysteresis",mnegativeHysteresis );
+           mIface->register_property("IdStringLen",midStringLen );
             mIface->initialize();
 
             if (mType == IntrusionSensorType::gpio)
diff -Naur a/src/CPUSensor.cpp b/src/CPUSensor.cpp
--- a/src/CPUSensor.cpp	2021-02-16 15:49:33.227844461 +0530
+++ b/src/CPUSensor.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -41,10 +41,10 @@
                      boost::asio::io_service& io, const std::string& sensorName,
                      std::vector<thresholds::Threshold>&& _thresholds,
                      const std::string& sensorConfiguration, int cpuId,
-                     bool show, double dtsOffset) :
+                     bool show, double dtsOffset,uint16_t EvStat,const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord) :
     Sensor(boost::replace_all_copy(sensorName, " ", "_"),
            std::move(_thresholds), sensorConfiguration, objectType, maxReading,
-           minReading, conn, PowerState::on),
+           minReading, conn,EvStat,sensorUnit,sdrRecord,PowerState::on),
     objServer(objectServer), inputDev(io), waitTimer(io), path(path),
     privTcontrol(std::numeric_limits<double>::quiet_NaN()),
     dtsOffset(dtsOffset), show(show), pollTime(CPUSensor::sensorPollMs),
diff -Naur a/src/CPUSensorMain.cpp b/src/CPUSensorMain.cpp
--- a/src/CPUSensorMain.cpp	2021-02-16 15:49:33.227844461 +0530
+++ b/src/CPUSensorMain.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -304,6 +304,27 @@
             continue;
         }
 
+	 auto findSensorUnit = baseConfiguration->second.find("Unit");
+        if (findSensorUnit == baseConfiguration->second.end())
+        {
+            std::cerr << "could not determine configuration Unit " << "\n";
+            continue;
+        }
+        std::string sensorUnit = std::get<std::string>(findSensorUnit->second);
+
+
+        auto findEvStat = baseConfiguration->second.find("EvStat");
+        if (findEvStat == baseConfiguration->second.end())
+        {
+                   std::cerr << "Base configuration missing EvStat"
+            << baseConfiguration->first << "\n";
+            continue;
+        }
+
+        uint16_t EvStat =
+            std::visit(VariantToUnsignedIntVisitor(), findEvStat->second);
+
+
         // iterate through all found temp sensors
         for (const auto& inputPath : inputPaths)
         {
@@ -366,6 +387,12 @@
                 }
             }
 
+	     struct sdr::SdrRecord sdrRecord;
+                   if( !parseSdrRecordFromConfig(*sensorData ,sdrRecord))
+                   {
+                     std::cerr << "error getting sdr record for " << sensorName << std::endl;
+                   }
+
             std::vector<thresholds::Threshold> sensorThresholds;
             std::string labelHead = label.substr(0, label.find(" "));
             parseThresholdsFromConfig(*sensorData, sensorThresholds,
@@ -386,7 +413,7 @@
             sensorPtr = std::make_unique<CPUSensor>(
                 inputPathStr, sensorType, objectServer, dbusConnection, io,
                 sensorName, std::move(sensorThresholds), *interfacePath, cpuId,
-                show, dtsOffset);
+                show, dtsOffset,EvStat,sensorUnit,sdrRecord);
             createdSensors.insert(sensorName);
             if (DEBUG)
             {
diff -Naur a/src/ExitAirTempSensor.cpp b/src/ExitAirTempSensor.cpp
--- a/src/ExitAirTempSensor.cpp	2021-02-16 15:49:33.227844461 +0530
+++ b/src/ExitAirTempSensor.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -165,11 +165,11 @@
                      const std::string& sensorConfiguration,
                      sdbusplus::asio::object_server& objectServer,
                      std::vector<thresholds::Threshold>&& thresholdData,
-                     std::shared_ptr<ExitAirTempSensor>& parent) :
+                     std::shared_ptr<ExitAirTempSensor>& parent,uint16_t EvStat,const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord) :
     Sensor(boost::replace_all_copy(sensorName, " ", "_"),
            std::move(thresholdData), sensorConfiguration,
            "xyz.openbmc_project.Configuration.ExitAirTemp", cfmMaxReading,
-           cfmMinReading, conn, PowerState::on),
+           cfmMinReading, conn,EvStat,sensorUnit,sdrRecord,PowerState::on),
     std::enable_shared_from_this<CFMSensor>(), parent(parent),
     objServer(objectServer)
 {
@@ -493,11 +493,11 @@
     std::shared_ptr<sdbusplus::asio::connection>& conn,
     const std::string& sensorName, const std::string& sensorConfiguration,
     sdbusplus::asio::object_server& objectServer,
-    std::vector<thresholds::Threshold>&& thresholdData) :
+    std::vector<thresholds::Threshold>&& thresholdData,uint16_t EvStat , const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord) :
     Sensor(boost::replace_all_copy(sensorName, " ", "_"),
            std::move(thresholdData), sensorConfiguration,
            "xyz.openbmc_project.Configuration.ExitAirTemp", exitAirMaxReading,
-           exitAirMinReading, conn, PowerState::on),
+           exitAirMinReading, conn,EvStat,sensorUnit,sdrRecord, PowerState::on),
     std::enable_shared_from_this<ExitAirTempSensor>(), objServer(objectServer)
 {
     sensorInterface = objectServer.add_interface(
@@ -841,16 +841,27 @@
                 {
                     if (entry.first == exitAirIface)
                     {
+		        struct sdr::SdrRecord sdrRecord;
+
+                       if( !parseSdrRecordFromConfig(pathPair.second,sdrRecord))
+                       {
+                               std::cerr << "error getting sdr record" << std::endl;
+                       }
                         // thresholds should be under the same path
                         std::vector<thresholds::Threshold> sensorThresholds;
                         parseThresholdsFromConfig(pathPair.second,
                                                   sensorThresholds);
 
                         std::string name =
-                            loadVariant<std::string>(entry.second, "Name");
+                        loadVariant<std::string>(entry.second, "Name");
+			std::string sensorUnit =
+                        loadVariant<std::string>(entry.second, "Unit");
+
+                        uint16_t EvStat = loadVariant<uint16_t>(entry.second, "EvStat");
+
                         exitAirSensor = std::make_shared<ExitAirTempSensor>(
                             dbusConnection, name, pathPair.first.str,
-                            objectServer, std::move(sensorThresholds));
+                            objectServer, std::move(sensorThresholds),EvStat,sensorUnit,sdrRecord);
                         exitAirSensor->powerFactorMin =
                             loadVariant<double>(entry.second, "PowerFactorMin");
                         exitAirSensor->powerFactorMax =
@@ -867,16 +878,26 @@
                     else if (entry.first == cfmIface)
 
                     {
+			struct sdr::SdrRecord sdrRecord;
+
+                        if( !parseSdrRecordFromConfig(pathPair.second,sdrRecord))
+                        {
+                                std::cerr << "error getting sdr record " << std::endl;
+                        }
                         // thresholds should be under the same path
                         std::vector<thresholds::Threshold> sensorThresholds;
                         parseThresholdsFromConfig(pathPair.second,
                                                   sensorThresholds);
                         std::string name =
                             loadVariant<std::string>(entry.second, "Name");
+			std::string sensorUnit =
+                            loadVariant<std::string>(entry.second, "Unit");
+                        uint16_t EvStat = loadVariant<uint16_t>(entry.second, "EvStat");
+
                         auto sensor = std::make_shared<CFMSensor>(
                             dbusConnection, name, pathPair.first.str,
                             objectServer, std::move(sensorThresholds),
-                            exitAirSensor);
+                            exitAirSensor,EvStat,sensorUnit,sdrRecord);
                         loadVariantPathArray(entry.second, "Tachs",
                                              sensor->tachs);
                         sensor->maxCFM =
diff -Naur a/src/FanMain.cpp b/src/FanMain.cpp
--- a/src/FanMain.cpp	2021-02-16 15:49:33.227844461 +0530
+++ b/src/FanMain.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -280,6 +280,27 @@
                 }
                 std::string sensorName =
                     std::get<std::string>(findSensorName->second);
+		// finding Unit from the configuration...
+        auto findSensorUnit = baseConfiguration->second.find("Unit");
+        if (findSensorUnit == baseConfiguration->second.end())
+        {
+            std::cerr << "could not determine configuration Unit for "
+                      << path.string() << "\n";
+            continue;
+        }
+        std::string sensorUnit = std::get<std::string>(findSensorUnit->second);
+
+
+        auto findEvStat = baseConfiguration->second.find("EvStat");
+        if (findEvStat == baseConfiguration->second.end())
+        {
+           std::cerr << "Base configuration missing EvStat"
+               << baseConfiguration->first << "\n";
+              continue;
+        }
+
+            uint16_t EvStat =
+                std::visit(VariantToUnsignedIntVisitor(), findEvStat->second);
 
                 // on rescans, only update sensors we were signaled by
                 auto findSensor = tachSensors.find(sensorName);
@@ -302,6 +323,13 @@
                         continue;
                     }
                 }
+	
+		struct sdr::SdrRecord sdrRecord;
+                if( !parseSdrRecordFromConfig(*sensorData,sdrRecord))
+                {
+                  std::cerr << "error getting sdr record for " << sensorName << std::endl;
+                }
+
                 std::vector<thresholds::Threshold> sensorThresholds;
                 if (!parseThresholdsFromConfig(*sensorData, sensorThresholds))
                 {
@@ -422,7 +450,7 @@
                     path.string(), baseType, objectServer, dbusConnection,
                     std::move(presenceSensor), redundancy, io, sensorName,
                     std::move(sensorThresholds), *interfacePath, limits,
-                    powerState, led);
+                    powerState, led,EvStat,sensorUnit,sdrRecord);
             }
             createRedundancySensor(tachSensors, dbusConnection, objectServer);
             std::vector<fs::path> pwms;
diff -Naur a/src/HwmonTempMain.cpp b/src/HwmonTempMain.cpp
--- a/src/HwmonTempMain.cpp	2021-02-16 15:49:33.227844461 +0530
+++ b/src/HwmonTempMain.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -180,6 +180,28 @@
                 }
                 std::string sensorName =
                     std::get<std::string>(findSensorName->second);
+		
+		 auto findSensorUnit = baseConfiguration->second.find("Unit");
+        if (findSensorUnit == baseConfiguration->second.end())
+        {
+            std::cerr << "could not determine configuration name for "
+                      << deviceName << "\n";
+            continue;
+        }
+        std::string sensorUnit = std::get<std::string>(findSensorUnit->second);
+
+        auto findEvStat = baseConfiguration->second.find("EvStat");
+            if (findEvStat == baseConfiguration->second.end())
+            {
+                std::cerr << "Base configuration missing EvStat"
+                          << baseConfiguration->first << "\n";
+                continue;
+            }
+
+        uint16_t EvStat =
+            std::visit(VariantToUnsignedIntVisitor(), findEvStat->second);
+
+
                 // on rescans, only update sensors we were signaled by
                 auto findSensor = sensors.find(sensorName);
                 if (!firstScan && findSensor != sensors.end())
@@ -201,6 +223,14 @@
                         continue;
                     }
                 }
+
+		struct sdr::SdrRecord sdrRecord;
+
+	        if( !parseSdrRecordFromConfig(*sensorData,sdrRecord))
+       		{
+                     std::cerr << "error getting sdr record for " << sensorName << std::endl;
+       		}	
+
                 std::vector<thresholds::Threshold> sensorThresholds;
                 if (!parseThresholdsFromConfig(*sensorData, sensorThresholds))
                 {
@@ -226,7 +256,7 @@
                     sensor = std::make_shared<HwmonTempSensor>(
                         *hwmonFile, sensorType, objectServer, dbusConnection,
                         io, sensorName, std::move(sensorThresholds),
-                        *interfacePath, readState);
+                        *interfacePath, readState,EvStat,sensorUnit,sdrRecord);
                     sensor->setupRead();
                 }
                 // Looking for keys like "Name1" for temp2_input,
@@ -254,7 +284,7 @@
                             *hwmonFile, sensorType, objectServer,
                             dbusConnection, io, sensorName,
                             std::vector<thresholds::Threshold>(),
-                            *interfacePath, readState);
+                            *interfacePath, readState,EvStat,sensorUnit,sdrRecord);
                         sensor->setupRead();
                     }
                 }
diff -Naur a/src/HwmonTempSensor.cpp b/src/HwmonTempSensor.cpp
--- a/src/HwmonTempSensor.cpp	2021-02-16 15:49:33.227844461 +0530
+++ b/src/HwmonTempSensor.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -45,10 +45,10 @@
     std::shared_ptr<sdbusplus::asio::connection>& conn,
     boost::asio::io_service& io, const std::string& sensorName,
     std::vector<thresholds::Threshold>&& _thresholds,
-    const std::string& sensorConfiguration, const PowerState powerState) :
+    const std::string& sensorConfiguration, const PowerState powerState,uint16_t EvStat , const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord) :
     Sensor(boost::replace_all_copy(sensorName, " ", "_"),
            std::move(_thresholds), sensorConfiguration, objectType, maxReading,
-           minReading, conn, powerState),
+           minReading, conn,EvStat, sensorUnit,sdrRecord,powerState),
     std::enable_shared_from_this<HwmonTempSensor>(), objServer(objectServer),
     inputDev(io, open(path.c_str(), O_RDONLY)), waitTimer(io), path(path)
 {
diff -Naur a/src/IntrusionSensorMain.cpp b/src/IntrusionSensorMain.cpp
--- a/src/IntrusionSensorMain.cpp	2021-02-16 15:49:33.227844461 +0530
+++ b/src/IntrusionSensorMain.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -42,7 +42,7 @@
 #include <string>
 #include <utility>
 #include <vector>
-
+bool  parseSdrRecordFromConfig( const SensorData& sensorData,struct sdr::SdrRecord& sdrRecord );
 static constexpr bool DEBUG = false;
 
 static constexpr const char* sensorType =
@@ -55,7 +55,14 @@
 static bool getIntrusionSensorConfig(
     std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
     IntrusionSensorType* pType, int* pBusId, int* pSlaveAddr,
-    bool* pGpioInverted)
+    bool* pGpioInverted, uint8_t *pDtype, uint8_t *pEventType, uint8_t *pEvState,
+    uint8_t *psdrVersion,
+    uint8_t *precordType,uint8_t *precordLen, uint8_t *pownerId,uint8_t *pownerLun,
+    uint8_t *pentityId,uint8_t *pentityInstance,uint8_t *psensorInit,uint8_t *psensorCap,
+    uint8_t *psensorType,uint8_t *psensorUnit1,uint8_t *pmodifierUnit,
+    uint8_t *pmaxReading,uint8_t *pminReading,uint8_t *psensorUnit2,uint8_t *plinearization,
+    uint8_t *pnominalReading,uint8_t *pnormalMax,uint8_t *pnormalMin,uint8_t *ppositiveHysteris,
+    uint8_t *pnegativeHysteresis,uint8_t *pidStringLen)
 {
     // find matched configuration according to sensor type
     ManagedObjectType sensorConfigurations;
@@ -79,8 +86,8 @@
     {
         baseConfiguration = nullptr;
         sensorData = &(sensor.second);
-
-        // match sensor type
+        
+	// match sensor type
         auto sensorBase = sensorData->find(sensorType);
         if (sensorBase == sensorData->end())
         {
@@ -107,17 +114,65 @@
         {
             auto findGpioPolarity =
                 baseConfiguration->second.find("GpioPolarity");
+	    auto findGpioIndex =  baseConfiguration->second.find("Index");
+            auto findDtype =  baseConfiguration->second.find("DType");
+            auto findEventType =  baseConfiguration->second.find("EventType");
+            auto findEvState =  baseConfiguration->second.find("EvStat");
 
-            if (findGpioPolarity == baseConfiguration->second.end())
+
+            if (findGpioPolarity == baseConfiguration->second.end() || 
+		findGpioIndex ==  baseConfiguration->second.end() ||
+   		findEventType ==  baseConfiguration->second.end()||
+		findEvState ==  baseConfiguration->second.end()
+	      )
             {
                 std::cerr << "error finding gpio polarity in configuration \n";
                 continue;
             }
 
+	    struct sdr::SdrRecord sdrRecord;
+
+           if( !parseSdrRecordFromConfig(*sensorData,sdrRecord))
+           {
+              std::cerr << "error getting sdr record "  << std::endl;
+           }
+
             try
             {
                 *pGpioInverted =
                     (std::get<std::string>(findGpioPolarity->second) == "Low");
+		*pDtype = /*sdbusplus::message::variant_ns::get<uint8_t>(
+                    findDtype->second);*/
+                std::visit(VariantToUnsignedIntVisitor(), findDtype->second);
+                *pEventType = /*sdbusplus::message::variant_ns::get<uint8_t>(
+                    findEventType->second);*/
+                std::visit(VariantToUnsignedIntVisitor(), findEventType->second);
+                *pEvState = /*sdbusplus::message::variant_ns::get<uint8_t>(
+                    findEvState->second);*/
+                std::visit(VariantToUnsignedIntVisitor(), findEvState->second);
+               *psdrVersion = sdrRecord.SdrVersion;
+               *precordType = sdrRecord.RecordType;
+               *precordLen = sdrRecord.RecordLen;
+               *pownerId = sdrRecord.OwnerId;
+               *pownerLun = sdrRecord.OwnerLun;
+               *pentityId = sdrRecord.EntityId;
+               *pentityInstance = sdrRecord.EntityInstance;
+               *psensorInit = sdrRecord.SensorInit;
+               *psensorCap = sdrRecord.SensorCap;
+	       *psensorType = sdrRecord.SensorType;
+               *psensorUnit1 = sdrRecord.SensorUnit1;
+               *pmodifierUnit  = sdrRecord.ModifierUnit;
+               *pmaxReading = sdrRecord.MaxReading;
+               *pminReading = sdrRecord.MinReading;
+               *psensorUnit2 = sdrRecord.SensorUnit2;
+               *plinearization = sdrRecord.Linearization;
+               *pnominalReading = sdrRecord.NominalReading;
+               *pnormalMax = sdrRecord.NormalMax;
+               *pnormalMin = sdrRecord.NormalMin;
+               *ppositiveHysteris = sdrRecord.PositiveHysteris;
+               *pnegativeHysteresis = sdrRecord.NegativeHysteresis;
+                *pidStringLen  = sdrRecord.IdStringLen;
+
             }
             catch (const std::bad_variant_access& e)
             {
@@ -443,6 +498,11 @@
     int busId = -1;
     int slaveAddr = -1;
     bool gpioInverted = false;
+    uint8_t dtype, eventType, evStat;
+    uint8_t sdrVersion,recordType,recordLen,ownerId,ownerLun,entityId,
+            entityInstance,sensorInit,sensorCap,SensorType,
+            sensorUnit1,sensorUnit2,modifierUnit,maxReading,minReading,linearization,
+            nominalReading,normalMax,normalMin,positiveHysteris,negativeHysteresis,idStringLen;
     IntrusionSensorType type = IntrusionSensorType::gpio;
 
     // setup connection to dbus
@@ -461,9 +521,17 @@
     ChassisIntrusionSensor chassisIntrusionSensor(io, ifaceChassis);
 
     if (getIntrusionSensorConfig(systemBus, &type, &busId, &slaveAddr,
-                                 &gpioInverted))
-    {
-        chassisIntrusionSensor.start(type, busId, slaveAddr, gpioInverted);
+                                 &gpioInverted, &dtype, &eventType, &evStat,
+                                 &sdrVersion,&recordType,&recordLen,&ownerId,&ownerLun,
+                                 &entityId,&entityInstance,&sensorInit,&sensorCap,&SensorType,
+                                 &sensorUnit1,&modifierUnit,&maxReading,&minReading,&sensorUnit2,
+                                 &linearization,&nominalReading,&normalMax,&normalMin,&positiveHysteris,
+                                 &negativeHysteresis,&idStringLen))
+    {
+        chassisIntrusionSensor.start(type, busId, slaveAddr, gpioInverted,dtype, eventType, evStat,sdrVersion,recordType,recordLen,ownerId,ownerLun,entityId,
+                                     entityInstance,sensorInit,sensorCap,SensorType,sensorUnit1,modifierUnit,maxReading,minReading,
+                                     sensorUnit2,linearization,nominalReading,normalMax,normalMin,positiveHysteris,negativeHysteresis,
+                                     idStringLen);
     }
 
     // callback to handle configuration change
@@ -477,10 +545,18 @@
 
             std::cout << "rescan due to configuration change \n";
             if (getIntrusionSensorConfig(systemBus, &type, &busId, &slaveAddr,
-                                         &gpioInverted))
+                                         &gpioInverted,&dtype, &eventType, &evStat,
+                                 &sdrVersion,&recordType,&recordLen,&ownerId,&ownerLun,
+                                 &entityId,&entityInstance,&sensorInit,&sensorCap,&SensorType,
+                                 &sensorUnit1,&modifierUnit,&maxReading,&minReading,&sensorUnit2,
+                                 &linearization,&nominalReading,&normalMax,&normalMin,&positiveHysteris,
+                                 &negativeHysteresis,&idStringLen))
             {
                 chassisIntrusionSensor.start(type, busId, slaveAddr,
-                                             gpioInverted);
+                                             gpioInverted,dtype, eventType, evStat,sdrVersion,recordType,recordLen,ownerId,ownerLun,entityId,
+                                     entityInstance,sensorInit,sensorCap,SensorType,sensorUnit1,modifierUnit,maxReading,minReading,
+                                     sensorUnit2,linearization,nominalReading,normalMax,normalMin,positiveHysteris,negativeHysteresis,
+                                     idStringLen);
             }
         };
 
diff -Naur a/src/IpmbSensor.cpp b/src/IpmbSensor.cpp
--- a/src/IpmbSensor.cpp	2021-02-16 15:49:33.227844461 +0530
+++ b/src/IpmbSensor.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -67,11 +67,11 @@
                        sdbusplus::asio::object_server& objectServer,
                        std::vector<thresholds::Threshold>&& thresholdData,
                        uint8_t deviceAddress, uint8_t hostSMbusIndex,
-                       std::string& sensorTypeName) :
+                       std::string& sensorTypeName,uint16_t EvStat,const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord) :
     Sensor(boost::replace_all_copy(sensorName, " ", "_"),
            std::move(thresholdData), sensorConfiguration,
            "xyz.openbmc_project.Configuration.ExitAirTemp", ipmbMaxReading,
-           ipmbMinReading, conn, PowerState::on),
+           ipmbMinReading, conn,EvStat, sensorUnit,sdrRecord,PowerState::on),
     deviceAddress(deviceAddress), hostSMbusIndex(hostSMbusIndex),
     objectServer(objectServer), waitTimer(io)
 {
@@ -406,6 +406,18 @@
                     std::string name =
                         loadVariant<std::string>(entry.second, "Name");
 
+		    std::string sensorUnit =
+                        loadVariant<std::string>(entry.second, "Unit");
+
+		   uint16_t EvStat = 
+			   loadVariant<uint16_t>(entry.second, "EvStat");
+
+       		   struct sdr::SdrRecord sdrRecord;
+                   if( !parseSdrRecordFromConfig(pathPair.second,sdrRecord))
+                   {
+                        std::cerr << "error getting sdr record for " << name << std::endl;
+                   }
+
                     std::vector<thresholds::Threshold> sensorThresholds;
                     if (!parseThresholdsFromConfig(pathPair.second,
                                                    sensorThresholds))
@@ -439,7 +451,7 @@
                     sensor = std::make_unique<IpmbSensor>(
                         dbusConnection, io, name, pathPair.first, objectServer,
                         std::move(sensorThresholds), deviceAddress,
-                        hostSMbusIndex, sensorTypeName);
+                        hostSMbusIndex, sensorTypeName,EvStat,sensorUnit,sdrRecord);
 
                     /* Initialize scale and offset value */
                     sensor->scaleVal = 1;
diff -Naur a/src/MCUTempSensor.cpp b/src/MCUTempSensor.cpp
--- a/src/MCUTempSensor.cpp	2021-02-16 15:49:33.227844461 +0530
+++ b/src/MCUTempSensor.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -59,11 +59,11 @@
                              sdbusplus::asio::object_server& objectServer,
                              std::vector<thresholds::Threshold>&& thresholdData,
                              uint8_t busId, uint8_t mcuAddress,
-                             uint8_t tempReg) :
+                             uint8_t tempReg,uint16_t EvStat ,const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord) :
     Sensor(boost::replace_all_copy(sensorName, " ", "_"),
            std::move(thresholdData), sensorConfiguration,
            "xyz.openbmc_project.Configuration.ExitAirTemp", mcuTempMaxReading,
-           mcuTempMinReading, conn),
+           mcuTempMinReading, conn,EvStat,sensorUnit,sdrRecord),
     busId(busId), mcuAddress(mcuAddress), tempReg(tempReg),
     objectServer(objectServer), waitTimer(io)
 {
@@ -223,6 +223,21 @@
                     std::string name =
                         loadVariant<std::string>(entry.second, "Name");
 
+                   std::string sensorUnit =
+                        loadVariant<std::string>(entry.second, "Unit");
+
+
+                    uint16_t EvStat = 
+			    loadVariant<uint16_t>(entry.second, "EvStat");
+
+		    struct sdr::SdrRecord sdrRecord;
+
+                           if( !parseSdrRecordFromConfig(pathPair.second,sdrRecord))
+                           {
+                                 std::cerr << "error getting sdr record for " << name << std::endl;
+                           }
+
+
                     std::vector<thresholds::Threshold> sensorThresholds;
                     if (!parseThresholdsFromConfig(pathPair.second,
                                                    sensorThresholds))
@@ -260,7 +275,7 @@
                     sensor = std::make_unique<MCUTempSensor>(
                         dbusConnection, io, name, pathPair.first, objectServer,
                         std::move(sensorThresholds), busId, mcuAddress,
-                        tempReg);
+                        tempReg,EvStat, sensorUnit,sdrRecord);
 
                     sensor->init();
                 }
diff -Naur a/src/PSUSensor.cpp b/src/PSUSensor.cpp
--- a/src/PSUSensor.cpp	2021-02-16 15:49:33.227844461 +0530
+++ b/src/PSUSensor.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -44,10 +44,10 @@
                      const std::string& sensorConfiguration,
                      std::string& sensorTypeName, unsigned int factor,
                      double max, double min, const std::string& label,
-                     size_t tSize) :
+                     size_t tSize,uint16_t EvStat,const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord) :
     Sensor(boost::replace_all_copy(sensorName, " ", "_"),
            std::move(_thresholds), sensorConfiguration, objectType, max, min,
-           conn),
+           conn,EvStat,sensorUnit,sdrRecord),
     std::enable_shared_from_this<PSUSensor>(), objServer(objectServer),
     inputDev(io), waitTimer(io), path(path), pathRatedMax(""), pathRatedMin(""),
     sensorFactor(factor), minMaxReadCounter(0)
diff -Naur a/src/PSUSensorMain.cpp b/src/PSUSensorMain.cpp
--- a/src/PSUSensorMain.cpp	2021-02-16 15:49:33.227844461 +0530
+++ b/src/PSUSensorMain.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -82,6 +82,7 @@
     limitEventMatch;
 
 static std::vector<PSUProperty> psuProperties;
+static boost::container::flat_map<std::string, std::string> Units;
 
 // Function CheckEvent will check each attribute from eventMatch table in the
 // sysfs. If the attributes exists in sysfs, then store the complete path
@@ -387,6 +388,18 @@
             continue;
         }
 
+	auto findEvStat = baseConfig->second.find("EvStat");
+            if (findEvStat == baseConfig->second.end())
+            {
+                std::cerr << "Base configuration missing EvStat"
+                          << baseConfig->first << "\n";
+                continue;
+            }
+
+        uint16_t EvStat =
+                std::visit(VariantToUnsignedIntVisitor(), findEvStat->second);
+
+
         auto findPSUName = baseConfig->second.find("Name");
         if (findPSUName == baseConfig->second.end())
         {
@@ -729,6 +742,13 @@
                 }
             }
 
+	    struct sdr::SdrRecord sdrRecord;
+
+           if( !parseSdrRecordFromConfig(*sensorData,sdrRecord))
+           {
+                 std::cerr << "error getting sdr record for " << deviceName << std::endl;
+           }
+
             std::vector<thresholds::Threshold> sensorThresholds;
             if (!parseThresholdsFromConfig(*sensorData, sensorThresholds,
                                            &labelHead))
@@ -737,6 +757,17 @@
                           << sensorNameSubStr << "\n";
             }
 
+	    auto findSensorUnit = Units.find(sensorNameSubStr);
+            if (findSensorUnit == Units.end())
+            {
+                std::cerr << "Cannot find SensorUnit \n";
+                continue;
+            }
+
+           std::string sensorUnit = findSensorUnit->second;
+
+
+
             auto findSensorType = sensorTable.find(sensorNameSubStr);
             if (findSensorType == sensorTable.end())
             {
@@ -784,7 +815,7 @@
                 sensorPathStr, sensorType, objectServer, dbusConnection, io,
                 sensorName, std::move(sensorThresholds), *interfacePath,
                 findSensorType->second, factor, psuProperty->maxReading,
-                psuProperty->minReading, labelHead, thresholdConfSize);
+                psuProperty->minReading, labelHead, thresholdConfSize,EvStat,sensorUnit,sdrRecord);
             sensors[sensorName]->setupRead();
             ++numCreated;
             if constexpr (DEBUG)
@@ -810,6 +841,13 @@
 
 void propertyInitialize(void)
 {
+    Units = {{"power", "xyz.openbmc_project.Sensor.Value.Unit.Watts"},
+                 {"curr", "xyz.openbmc_project.Sensor.Value.Unit.Amperes"},
+                 {"temp", "xyz.openbmc_project.Sensor.Value.Unit.DegreesC"},
+                 {"in", "xyz.openbmc_project.Sensor.Value.Unit.Volts"},
+                  {"fan", "xyz.openbmc_project.Sensor.Value.Unit.RPMS"}};
+
+
     sensorTable = {{"power", "power/"},
                    {"curr", "current/"},
                    {"temp", "temperature/"},
diff -Naur a/src/SdrRecord.cpp b/src/SdrRecord.cpp
--- a/src/SdrRecord.cpp	1970-01-01 05:30:00.000000000 +0530
+++ b/src/SdrRecord.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -0,0 +1,95 @@
+#include <syslog.h>
+#include <SdrRecord.hpp>
+#include <VariantVisitors.hpp>
+#include <boost/algorithm/string/case_conv.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <boost/container/flat_set.hpp>
+#include <filesystem>
+#include <fstream>
+#include <optional>
+#include <regex>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <Utils.hpp>
+#include <syslog.h>
+bool  parseSdrRecordFromConfig( const SensorData& sensorData,struct sdr::SdrRecord& sdrRecord )
+{
+   for (const auto& item : sensorData)
+    {
+        if (item.first.find("SdrInfo") == std::string::npos)
+        {
+            continue;
+        }
+
+        auto SdrVersionFind = item.second.find("SdrVersion");
+        auto RecordTypeFind = item.second.find("RecordType");
+        auto RecordLenFind = item.second.find("RecordLen");
+        auto OwnerIdFind = item.second.find("OwnerId");
+        auto OwnerLunFind = item.second.find("OwnerLun");
+        auto entityidFind = item.second.find("EntityId");
+        auto EntityInstanceFind = item.second.find("EntityInstance");
+        auto SensorInitFind = item.second.find("SensorInit");
+        auto SensorCapFind = item.second.find("SensorCap");
+        auto SensorTypeFind = item.second.find("SensorType");
+        auto EventTypeFind = item.second.find("EventType");
+        auto SensorUnit1Find = item.second.find("SensorUnit1");
+        auto SensorUnit2Find = item.second.find("SensorUnit2");
+        auto ModifierUnitFind = item.second.find("ModifierUnit");
+        auto LinearizationFind = item.second.find("Linearization");
+        auto NominalReadingFind = item.second.find("NominalReading");
+        auto NormalMaxFind = item.second.find("NormalMax");
+        auto NormalMinFind = item.second.find("NormalMin");
+        auto MaxReadingFind = item.second.find("MaxReading");
+        auto MinReadingFind = item.second.find("MinReading");
+        auto PositiveHysterisFind = item.second.find("PositiveHysteris");
+        auto NegativeHysteresisFind = item.second.find("NegativeHysteresis");
+        auto IdStringLenFind = item.second.find("IdStringLen");
+
+        if ( SdrVersionFind == item.second.end() || RecordTypeFind == item.second.end() ||
+             RecordLenFind == item.second.end() || OwnerIdFind ==  item.second.end() ||
+             OwnerLunFind == item.second.end() || entityidFind == item.second.end() ||
+             EntityInstanceFind == item.second.end() || SensorInitFind == item.second.end() ||
+             SensorCapFind ==  item.second.end() || SensorTypeFind == item.second.end() ||
+             EventTypeFind == item.second.end() || SensorUnit2Find  == item.second.end() ||
+             ModifierUnitFind == item.second.end() || MaxReadingFind == item.second.end() ||
+             MinReadingFind == item.second.end() || LinearizationFind == item.second.end() ||
+	     NominalReadingFind == item.second.end() ||SensorUnit1Find == item.second.end() ||
+	     NormalMaxFind == item.second.end() || NormalMinFind == item.second.end() || 
+  	     PositiveHysterisFind == item.second.end () || NegativeHysteresisFind == item.second.end () || 
+	     IdStringLenFind == item.second.end () )
+
+        {
+            std::cerr << "Malformed SdrRecord in configuration\n";
+        }
+
+        sdrRecord.SdrVersion = std::visit(VariantToUnsignedIntVisitor(),SdrVersionFind->second);
+        sdrRecord.RecordType = std::visit(VariantToUnsignedIntVisitor(),RecordTypeFind->second);
+        sdrRecord.RecordLen = std::visit(VariantToUnsignedIntVisitor(),RecordLenFind->second);
+        sdrRecord.OwnerId = std::visit(VariantToUnsignedIntVisitor(), OwnerIdFind->second);
+        sdrRecord.OwnerLun = std::visit(VariantToUnsignedIntVisitor(),OwnerLunFind->second);
+        sdrRecord.EntityId = std::visit(VariantToUnsignedIntVisitor(),entityidFind->second);
+        sdrRecord.EntityInstance = std::visit(VariantToUnsignedIntVisitor(),EntityInstanceFind->second);
+        sdrRecord.SensorInit = std::visit(VariantToUnsignedIntVisitor(),SensorInitFind->second);
+        sdrRecord.SensorInit = std::visit(VariantToUnsignedIntVisitor(),SensorInitFind->second);
+        sdrRecord.SensorCap = std::visit(VariantToUnsignedIntVisitor(),SensorCapFind->second);
+        sdrRecord.SensorType = std::visit(VariantToUnsignedIntVisitor(),SensorTypeFind->second);
+        sdrRecord.EventType = std::visit(VariantToUnsignedIntVisitor(),EventTypeFind->second);
+        sdrRecord.SensorUnit1 = std::visit(VariantToUnsignedIntVisitor(),SensorUnit1Find->second);
+        sdrRecord.SensorUnit2 = std::visit(VariantToUnsignedIntVisitor(),SensorUnit2Find->second);
+        sdrRecord.ModifierUnit = std::visit(VariantToUnsignedIntVisitor(),ModifierUnitFind->second);
+        sdrRecord.NominalReading = std::visit(VariantToUnsignedIntVisitor(),NominalReadingFind->second);
+        sdrRecord.Linearization = std::visit(VariantToUnsignedIntVisitor(),LinearizationFind->second);
+        sdrRecord.NominalReading = std::visit(VariantToUnsignedIntVisitor(),NominalReadingFind->second);
+        sdrRecord.NormalMax = std::visit(VariantToUnsignedIntVisitor(),NormalMaxFind->second);
+        sdrRecord.NormalMin = std::visit(VariantToUnsignedIntVisitor(),NormalMinFind->second);
+        sdrRecord.MaxReading = std::visit(VariantToUnsignedIntVisitor(),MaxReadingFind->second);
+        sdrRecord.MinReading = std::visit(VariantToUnsignedIntVisitor(),MinReadingFind->second);
+        sdrRecord.PositiveHysteris = std::visit(VariantToUnsignedIntVisitor(),PositiveHysterisFind->second);
+        sdrRecord.NegativeHysteresis = std::visit(VariantToUnsignedIntVisitor(),NegativeHysteresisFind->second);
+        sdrRecord.IdStringLen = std::visit(VariantToUnsignedIntVisitor(),IdStringLenFind->second);
+   }
+
+   return true;
+
+}
diff -Naur a/src/TachSensor.cpp b/src/TachSensor.cpp
--- a/src/TachSensor.cpp	2021-02-16 15:49:33.227844461 +0530
+++ b/src/TachSensor.cpp	2021-02-17 16:32:47.230790998 +0530
@@ -52,9 +52,9 @@
                        const std::string& sensorConfiguration,
                        const std::pair<size_t, size_t>& limits,
                        const PowerState& powerState,
-                       const std::optional<std::string>& ledIn) :
+                       const std::optional<std::string>& ledIn,uint16_t EvStat,const std::string& sensorUnit,struct sdr::SdrRecord sdrRecord) :
     Sensor(boost::replace_all_copy(fanName, " ", "_"), std::move(_thresholds),
-           sensorConfiguration, objectType, limits.second, limits.first, conn,
+           sensorConfiguration, objectType, limits.second, limits.first, conn,EvStat,sensorUnit,sdrRecord,
            powerState),
     objServer(objectServer), redundancy(redundancy),
     presence(std::move(presenceSensor)),
