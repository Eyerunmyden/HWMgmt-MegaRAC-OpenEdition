diff -Naur a/include/PwmSensor.hpp b/include/PwmSensor.hpp
--- a/include/PwmSensor.hpp	2021-02-26 12:08:00.727953755 +0530
+++ b/include/PwmSensor.hpp	2021-02-26 12:10:25.611655683 +0530
@@ -1,6 +1,7 @@
 #pragma once
 
 #include <sdbusplus/asio/object_server.hpp>
+#include <SdrRecord.hpp>
 
 #include <memory>
 #include <string>
@@ -12,13 +13,14 @@
               std::shared_ptr<sdbusplus::asio::connection>& conn,
               sdbusplus::asio::object_server& objectServer,
               const std::string& sensorConfiguration,
-              const std::string& sensorType);
+              const std::string& sensorType,const std::string& sensorUnit, struct sdr::SdrRecord sdrRecord);
     ~PwmSensor();
 
   private:
     std::string sysPath;
     sdbusplus::asio::object_server& objectServer;
     std::string name;
+    struct sdr::SdrRecord sdrRecord_t;
     std::shared_ptr<sdbusplus::asio::dbus_interface> sensorInterface;
     std::shared_ptr<sdbusplus::asio::dbus_interface> controlInterface;
     std::shared_ptr<sdbusplus::asio::dbus_interface> association;
diff -Naur a/src/FanMain.cpp b/src/FanMain.cpp
--- a/src/FanMain.cpp	2021-02-26 12:13:06.619749720 +0530
+++ b/src/FanMain.cpp	2021-02-26 12:18:01.495210677 +0530
@@ -486,11 +486,13 @@
 
                 // only add new elements
                 const std::string& sysPath = pwm.string();
+		std::string sensorUnit = "xyz.openbmc_project.Sensor.Value.Unit.Percent";
+		struct sdr::SdrRecord pwmsdrRecord;
                 pwmSensors.insert(
                     std::pair<std::string, std::unique_ptr<PwmSensor>>(
                         sysPath, std::make_unique<PwmSensor>(
                                      *pwmName, sysPath, dbusConnection,
-                                     objectServer, *path, "Fan")));
+                                     objectServer, *path, "Fan",sensorUnit, pwmsdrRecord)));
             }
         }));
     getter->getConfiguration(
diff -Naur a/src/PSUSensorMain.cpp b/src/PSUSensorMain.cpp
--- a/src/PSUSensorMain.cpp	2021-02-26 12:13:06.619749720 +0530
+++ b/src/PSUSensorMain.cpp	2021-02-26 12:19:10.860960844 +0530
@@ -211,9 +211,9 @@
             continue;
         }
 
-        pwmSensors[psuName + labelHead] = std::make_unique<PwmSensor>(
+        /*pwmSensors[psuName + labelHead] = std::make_unique<PwmSensor>(
             "Pwm_" + psuName + "_" + pwmName.second, pwmPathStr, dbusConnection,
-            objectServer, interfacePath + "_" + pwmName.second, "PSU");
+            objectServer, interfacePath + "_" + pwmName.second, "PSU");*/
     }
 }
 
diff -Naur a/src/PwmSensor.cpp b/src/PwmSensor.cpp
--- a/src/PwmSensor.cpp	2021-02-26 12:13:06.615749618 +0530
+++ b/src/PwmSensor.cpp	2021-02-26 12:16:01.892189070 +0530
@@ -33,8 +33,8 @@
                      std::shared_ptr<sdbusplus::asio::connection>& conn,
                      sdbusplus::asio::object_server& objectServer,
                      const std::string& sensorConfiguration,
-                     const std::string& sensorType) :
-    sysPath(sysPath),
+                     const std::string& sensorType,const std::string& Unit, struct sdr::SdrRecord sdrRecord) :
+    sysPath(sysPath),sdrRecord_t(sdrRecord),
     objectServer(objectServer), name(name)
 {
     // add interface under sensor and Control.FanPwm as Control is used
@@ -93,6 +93,33 @@
     // pwm sensor interface is in percent
     sensorInterface->register_property("MaxValue", static_cast<int64_t>(100));
     sensorInterface->register_property("MinValue", static_cast<int64_t>(0));
+    sensorInterface->register_property("Unit", Unit);
+    sensorInterface->register_property("EvStat", static_cast<int16_t>(162));
+
+    sensorInterface->register_property("SensorStat",false);
+    sensorInterface->register_property("SdrVersion", 81);
+    sensorInterface->register_property("RecordType",sdrRecord_t.RecordType);
+    sensorInterface->register_property("RecordLen", 0);
+    sensorInterface->register_property("OwnerId", 32);
+    sensorInterface->register_property("OwnerLun", 0);
+    sensorInterface->register_property("EntityId", sdrRecord_t.EntityId);
+    sensorInterface->register_property("EntityInstance", sdrRecord_t.EntityInstance);
+    sensorInterface->register_property("SensorInit",sdrRecord_t.SensorInit);
+    sensorInterface->register_property("SensorCap",sdrRecord_t.SensorCap);
+    sensorInterface->register_property("SensorType",sdrRecord_t.SensorType);
+    sensorInterface->register_property("EventType",sdrRecord_t.EventType);
+    sensorInterface->register_property("SensorUnit1", 0);
+    sensorInterface->register_property("SensorUnit2", sdrRecord_t.SensorUnit2);
+    sensorInterface->register_property("ModifierUnit", 0);
+    sensorInterface->register_property("Linearization", 0);
+    sensorInterface->register_property("NominalReading", 151);
+    sensorInterface->register_property("NormalMax", 197);
+    sensorInterface->register_property("NormalMin", 139);
+    sensorInterface->register_property("PositiveHysteris", 0);
+    sensorInterface->register_property("NegativeHysteresis", 0);
+    sensorInterface->register_property("IdStringLen", 0);
+
+
 
     controlInterface = objectServer.add_interface(
         "/xyz/openbmc_project/control/fanpwm/" + name,
