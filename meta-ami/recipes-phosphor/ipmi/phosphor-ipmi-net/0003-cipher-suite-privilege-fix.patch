--- a/command/open_session.hpp	2020-10-28 12:15:37.943360625 -0400
+++ b/command/open_session.hpp	2020-12-21 18:18:31.000000000 -0500
@@ -159,6 +159,22 @@
     uint16_t reserved14;
 } __attribute__((packed));
 
+#define CS_PRIV_FILENAME "/var/lib/ipmi/cs_privilege_levels.json"
+#define CS_PRIV_DEFAULT_FILENAME "/usr/share/ipmi-providers/cs_privilege_levels.json"
+#define MAX_CS_PRIV 6
+  
+const std::string csPrivList[MAX_CS_PRIV] =
+{
+  "priv-reserved",
+  "priv-callback",
+  "priv-user",
+  "priv-operator",
+  "priv-admin",
+  "priv-oem"
+};
+
+uint8_t readCSPrivilegeLevel(const std::string& csFileName, uint8_t csNum,uint8_t chNum);
+
 /**
  * @brief RMCP+ Open Session Request, RMCP+ Open Session Response
  *

--- a/command/open_session.cpp	2020-10-28 12:15:37.943360625 -0400
+++ b/command/open_session.cpp	2020-12-21 19:47:54.294724904 -0500
@@ -4,6 +4,9 @@
 #include "endian.hpp"
 #include "main.hpp"
 
+#include <fstream>
+#include <nlohmann/json.hpp>
+
 #include <phosphor-logging/log.hpp>
 
 using namespace phosphor::logging;
@@ -23,8 +26,8 @@
     // Per the IPMI Spec, messageTag and remoteConsoleSessionID are always
     // returned
     response->messageTag = request->messageTag;
-    response->remoteConsoleSessionID = request->remoteConsoleSessionID;
-
+    response->remoteConsoleSessionID = request->remoteConsoleSessionID;    
+    
     // Check for valid Authentication Algorithms
     if (!cipher::rakp_auth::Interface::isAlgorithmSupported(
             static_cast<cipher::rakp_auth::Algorithms>(request->authAlgo)))
@@ -44,20 +47,48 @@
     }
 
     session::Privilege priv;
+    uint8_t csPriv;
+
+    priv = static_cast<session::Privilege>(request->maxPrivLevel);
 
     // 0h in the requested maximum privilege role field indicates highest level
     // matching proposed algorithms. The maximum privilege level the session
     // can take is set to Administrator level. In the RAKP12 command sequence
     // the session maximum privilege role is set again based on the user's
     // permitted privilege level.
-    if (!request->maxPrivLevel)
+    if (priv == session::Privilege::HIGHEST_MATCHING)
     {
+      sd_journal_print(LOG_ERR,"cipher: max priv is 0 change to admin\n");
+
         priv = session::Privilege::ADMIN;
     }
-    else
-    {
-        priv = static_cast<session::Privilege>(request->maxPrivLevel);
-    }
+    
+
+    csPriv = readCSPrivilegeLevel(CS_PRIV_FILENAME,0xb,2);
+    if(csPriv == 0xff) // if it fails try default
+      {
+	csPriv = readCSPrivilegeLevel(CS_PRIV_DEFAULT_FILENAME,0xb,getInterfaceIndex());
+	if(csPriv == 0xff)
+	  {
+	    response->status_code =
+	      static_cast<uint8_t>(RAKP_ReturnCode::NO_CIPHER_SUITE_MATCH);
+	    return outPayload;
+	  }
+      }
+    else if(csPriv == 0) // 0 is not allowed
+      {
+	response->status_code =
+	  static_cast<uint8_t>(RAKP_ReturnCode::NO_CIPHER_SUITE_MATCH);
+	return outPayload;
+      }
+    if((uint8_t)priv > csPriv)
+      {
+	priv = (session::Privilege)csPriv;
+      }
+
+
+
+
 
     // Check for valid Confidentiality Algorithms
     if (!cipher::crypt::Interface::isAlgorithmSupported(
@@ -115,4 +146,56 @@
     return outPayload;
 }
 
+uint8_t readCSPrivilegeLevel(const std::string& csFileName, uint8_t csNum,uint8_t chNum)
+{
+    std::ifstream jsonFile(csFileName);
+    std::string privStr;
+
+    if(!jsonFile.good())
+      {
+	log<level::ERR>("JSON file not found");
+	return 0xff;
+      }
+
+    nlohmann::json data = nullptr;
+    try
+    {
+        data = nlohmann::json::parse(jsonFile, nullptr, false);
+    }
+    catch (nlohmann::json::parse_error& e)
+    {
+       log<level::ERR>("Corrupted cipher suite privilege levels config file.",
+                      entry("MSG: %s", e.what()));
+	return 0xff;
+    }
+
+    if(csNum > 16)
+      {
+	return 0xff;
+      }
+    //find the channel 
+    std::string chKey = "Channel" + std::to_string(chNum);
+    if(data.find(chKey) != data.end())
+     {
+       //find the cipher id
+       std::string csKey = "CipherID" + std::to_string(csNum);
+       privStr = static_cast<std::string>(data[chKey][csKey]);
+     }
+    else
+      {
+	log<level::ERR>("Failed to get privilege levels from config file.");
+	return 0xff;
+      }
+    
+    for(int i =0;i<MAX_CS_PRIV;++i)
+      {
+	if (csPrivList[i].compare(privStr) == 0)
+	  {
+	    return i;
+	  }
+      }
+    return 0xff;
+}
+
+  
 } // namespace command

--- a/command/rakp12.cpp	2020-10-28 12:15:37.943360625 -0400
+++ b/command/rakp12.cpp	2020-12-21 18:23:08.000000000 -0500
@@ -128,12 +128,15 @@
             static_cast<uint8_t>(RAKP_ReturnCode::INSUFFICIENT_RESOURCE);
         return outPayload;
     }
+    uint8_t reqMaxPriv = (((uint8_t)request->req_max_privilege_level | (uint8_t)session::reqMaxPrivMask) &
+			  (~((uint8_t)session::reqMaxPrivMask) | (uint8_t)session->reqMaxPrivLevel));
+    
     // As stated in Set Session Privilege Level command in IPMI Spec, when
     // creating a session through Activate command / RAKP 1 message, it must
     // be established with USER privilege as well as all other sessions are
     // initially set to USER privilege, regardless of the requested maximum
     // privilege.
-    if (!(static_cast<session::Privilege>(request->req_max_privilege_level &
+    if (!(static_cast<session::Privilege>(reqMaxPriv &
                                           session::reqMaxPrivMask) >
           session::Privilege::CALLBACK))
     {
@@ -143,8 +146,7 @@
     }
     session->currentPrivilege(static_cast<uint8_t>(session::Privilege::USER));
 
-    session->reqMaxPrivLevel =
-        static_cast<session::Privilege>(request->req_max_privilege_level);
+    session->reqMaxPrivLevel = static_cast<session::Privilege>(reqMaxPriv);
     if (request->user_name_len == 0)
     {
         // Bail out, if user name is not specified.
@@ -238,10 +240,10 @@
     }
     // For username / privilege lookup, fail with UNAUTH_NAME, if requested
     // max privilege does not match user privilege
-    if (((request->req_max_privilege_level & userNameOnlyLookupMask) ==
+    if (((reqMaxPriv & userNameOnlyLookupMask) ==
          userNamePrivLookup) &&
-        ((request->req_max_privilege_level & session::reqMaxPrivMask) !=
-         session->sessionUserPrivAccess.privilege))
+        ((reqMaxPriv & session::reqMaxPrivMask) !=
+	session->sessionUserPrivAccess.privilege))
     {
         log<level::INFO>(
             "Username/Privilege lookup failed for requested privilege");
