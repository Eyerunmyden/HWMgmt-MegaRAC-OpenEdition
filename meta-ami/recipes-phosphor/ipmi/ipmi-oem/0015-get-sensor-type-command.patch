diff -Naur a/src/sensorcommands.cpp b/src/sensorcommands.cpp
--- a/src/sensorcommands.cpp	2020-09-14 16:12:10.995311261 +0530
+++ b/src/sensorcommands.cpp	2020-09-14 16:05:58.070470098 +0530
@@ -885,6 +885,50 @@
                                  upperNonRecoverable);
 }
 
+/** @brief implements the Get Sensor Type command
+ *  @returns the sensor type value and Event/Reading type code
+ */
+
+ipmi::RspType< uint8_t,     //sensor type
+	       uint8_t >    //event/reading type code
+
+ipmiGetSensorTypeCmd(boost::asio::yield_context yield,int8_t SensorNum)
+{
+    std::string sensorPath;
+    uint8_t sensorTyp;
+    uint8_t eventTyp;
+    sensorPath = getPathFromSensorNumber(SensorNum);
+    sensorTyp = getSensorTypeFromPath(sensorPath);
+
+    std::string connection;
+    std::string path;
+    
+    auto status = getSensorConnection(SensorNum, connection, sensorPath);
+    if (status)
+    {
+        return ipmi::response(status);
+    }
+
+    SensorMap sensorMap;
+    if (!getSensorMap(yield, connection, sensorPath, sensorMap))
+    {
+        return ipmi::responseResponseError();
+    }
+    auto sensorObject = sensorMap.find("xyz.openbmc_project.Sensor.Value");
+    auto SensorEventTypeObj = sensorObject->second.find("EventType");
+    if (SensorEventTypeObj != sensorObject->second.end())
+    {
+        eventTyp =  std::get<uint8_t>(SensorEventTypeObj->second);
+
+    }
+    else
+    {
+        eventTyp = getSensorEventTypeFromPath(sensorPath);
+    }
+    return ipmi::responseSuccess(sensorTyp,eventTyp);
+}
+
+
 /** @brief implements the get Sensor event enable command
  *  @param sensorNumber - sensor number
  *
@@ -1742,6 +1786,11 @@
                           ipmi::sensor_event::cmdPlatformEvent,
                           ipmi::Privilege::Operator, ipmiSenPlatformEvent);
 
+    // <Get Sensor Type>
+    ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnSensor,
+		          ipmi::sensor_event::cmdGetSensorType,
+                          ipmi::Privilege::User, ipmiGetSensorTypeCmd);
+    
     // <Get Sensor Reading>
     ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnSensor,
                           ipmi::sensor_event::cmdGetSensorReading,
