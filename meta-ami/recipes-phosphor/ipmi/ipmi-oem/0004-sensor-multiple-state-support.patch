diff -Naur a/src/sensorcommands.cpp b/src/sensorcommands.cpp
--- a/src/sensorcommands.cpp	2020-08-30 09:19:14.505988372 +0530
+++ b/src/sensorcommands.cpp	2020-08-30 09:19:24.302202504 +0530
@@ -496,40 +496,11 @@
             auto alarmState = stateObject->second.find("ActiveAlarmState");
             if (alarmState != stateObject->second.end())
              {
-                 std::vector<std::uint8_t> offset = std::get<std::vector<std::uint8_t>>(alarmState->second);
-               switch(offset[0])
-                 {
-                  case 0x00 :
-                       res = 0x01;
-                       break;
-                   case 0x01 :
-                       res = 0x02;
-                       break;
-                   case 0x02 :
-                       res = 0x04;
-                       break;
-                   case 0x03 :
-                       res = 0x08;
-                       break;
-                   case 0x04 :
-                       res = 0x10;
-                       break;
-                   case 0x05 :
-                       res = 0x20;
-                       break;
-                   case 0x06 :
-                       res = 0x40;
-                       break;
-                   case 0x07 :
-                       res = 0x80;
-                       break;
-                   default :
-                       res = 0x00;
-                       break;
-                }
-               return ipmi::responseSuccess(value, operation, res,0);
+		     uint8_t s = std::get<uint8_t>(alarmState->second);
+                     return ipmi::responseSuccess(value, operation, s,0);
              }
         }
+      return ipmi::responseSuccess(value, operation, res,0);
     }
 
 
diff -Naur a/src/storagecommands.cpp b/src/storagecommands.cpp
--- a/src/storagecommands.cpp	2020-08-30 09:19:14.505988372 +0530
+++ b/src/storagecommands.cpp	2020-08-30 09:19:24.302202504 +0530
@@ -30,12 +30,12 @@
 #include <phosphor-logging/log.hpp>
 #include <sdbusplus/message/types.hpp>
 #include <sdbusplus/timer.hpp>
-#include<syslog.h>
 #include <filesystem>
 #include <functional>
 #include <iostream>
 #include <stdexcept>
 #include <string_view>
+#include<unistd.h>
 
 static constexpr bool DEBUG = false;
 
@@ -1240,6 +1240,76 @@
     return ipmi::responseSuccess(responseID);
 }
 
+void genevent(){
+
+    static constexpr auto SEN_SEL_SERVICE =
+        "xyz.openbmc_project.Eventsensor";
+    static constexpr auto SEN_SEL_ROOT =
+        "/xyz/openbmc_project/sensors/eventsensor/SEL";
+    static constexpr auto SEN_SEL_INTERFACE =
+        "xyz.openbmc_project.Sensor.Discrete.State";
+    static constexpr auto SEN_SET_INTERFACE = "org.freedesktop.DBus.Properties";
+    static constexpr auto SEN_SEL_STATPROP = "ActiveAlarmState";
+    static constexpr auto SEN_SEL_DATAPROP = "EventData";
+
+    std::vector<uint8_t> d = {0x02, 0xFF, 0xFF};
+    uint8_t al = 0x04;
+
+    std::shared_ptr<sdbusplus::asio::connection> eventbus = getSdBus();
+
+    for(int  i = 0; i < 0x1fff; i++){
+      //to reload rsyslog.service
+    }
+    try
+    {
+       d = {0xff, 0xff, 0xff};
+       al = 0x00;
+        auto method =
+            eventbus->new_method_call(SEN_SEL_SERVICE, SEN_SEL_ROOT,
+                                SEN_SET_INTERFACE, "Set");
+        method.append(SEN_SEL_INTERFACE,SEN_SEL_DATAPROP,std::variant<std::vector<std::uint8_t>>{d});
+        eventbus->call_noreply(method);
+       phosphor::logging::log<phosphor::logging::level::INFO>(
+        "Set DATAPROP 0\n");
+
+        method =
+            eventbus->new_method_call(SEN_SEL_SERVICE, SEN_SEL_ROOT,
+                                SEN_SET_INTERFACE, "Set");
+        method.append(SEN_SEL_INTERFACE,SEN_SEL_STATPROP,std::variant<uint8_t>{al});
+        eventbus->call_noreply(method);
+       phosphor::logging::log<phosphor::logging::level::INFO>(
+        "Set STATEPROP 0\n");
+
+       d = {0x02, 0xff, 0xff};
+       al = 0x04;
+        method =
+            eventbus->new_method_call(SEN_SEL_SERVICE, SEN_SEL_ROOT,
+                                SEN_SET_INTERFACE, "Set");
+        method.append(SEN_SEL_INTERFACE,SEN_SEL_DATAPROP,std::variant<std::vector<uint8_t>>{d});
+        eventbus->call_noreply(method);
+       phosphor::logging::log<phosphor::logging::level::INFO>(
+        "Set DATAPROP 02\n");
+
+       method =
+            eventbus->new_method_call(SEN_SEL_SERVICE, SEN_SEL_ROOT,
+                                SEN_SET_INTERFACE, "Set");
+        method.append(SEN_SEL_INTERFACE,SEN_SEL_STATPROP,std::variant<uint8_t>{al});
+        eventbus->call_noreply(method);
+       phosphor::logging::log<phosphor::logging::level::INFO>(
+        "Set STATEPROP 04\n");
+    }
+    catch (sdbusplus::exception_t& e)
+    {
+        phosphor::logging::log<phosphor::logging::level::INFO>(
+        "Set clear prop error\n");
+        phosphor::logging::log<phosphor::logging::level::ERR>(e.what());
+    }
+
+}
+
+
+
+
 ipmi::RspType<uint8_t> ipmiStorageClearSEL(ipmi::Context::ptr ctx,
                                            uint16_t reservationID,
                                            const std::array<uint8_t, 3>& clr,
@@ -1301,6 +1371,7 @@
     {
         phosphor::logging::log<phosphor::logging::level::ERR>(e.what());
     }
+     genevent();
 
     return ipmi::responseSuccess(ipmi::sel::eraseComplete);
 }
