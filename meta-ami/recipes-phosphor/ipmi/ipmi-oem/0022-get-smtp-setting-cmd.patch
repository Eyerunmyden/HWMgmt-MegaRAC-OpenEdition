diff -Naur a/include/oemcommands.hpp b/include/oemcommands.hpp
--- a/include/oemcommands.hpp	2021-05-05 19:13:15.828606168 +0530
+++ b/include/oemcommands.hpp	2021-05-05 19:08:44.139726964 +0530
@@ -374,6 +374,15 @@
     cfm = 0x4
 };
 
+enum class smtpSetting : uint8_t
+{
+	enable = 0x1,
+	ipAdd = 0x2,
+	port = 0x3,
+	senderMailId = 0x4,
+	recMailId = 0x5
+};
+
 enum class dimmOffsetTypes : uint8_t
 {
     staticCltt = 0x0,
diff -Naur a/src/oemcommands.cpp b/src/oemcommands.cpp
--- a/src/oemcommands.cpp	2021-05-05 19:13:04.660593565 +0530
+++ b/src/oemcommands.cpp	2021-05-07 16:07:52.585633957 +0530
@@ -24,6 +24,7 @@
 #include <boost/container/flat_map.hpp>
 #include <boost/process/child.hpp>
 #include <boost/process/io.hpp>
+#include <boost/algorithm/string.hpp>
 #include <com/intel/Control/OCOTShutdownPolicy/server.hpp>
 #include <commandutils.hpp>
 #include <gpiod.hpp>
@@ -48,6 +49,7 @@
 #include <string>
 #include <variant>
 #include <vector>
+#include <tuple>
 
 namespace ipmi
 {
@@ -3649,9 +3651,9 @@
     return ipmi::responseSuccess(kcsMaxBufferSize, ipmbMaxBufferSize);
 }
 
-std::vector<std::string> getsmtpconfig(sdbusplus::bus::bus& bus)
+std::tuple<bool,std::string,uint16_t,std::string,std::string> getsmtpconfig(sdbusplus::bus::bus& bus)
 {
-	std::vector<std::string> cfg;
+	std::tuple<bool,std::string,uint16_t,std::string,std::string> cfg;
 	auto call = bus.new_method_call("xyz.openbmc_project.mail", "/xyz/openbmc_project/mail/alert",
                     "xyz.openbmc_project.mail.alert", "GetSmtpConfig");
     	try
@@ -3667,7 +3669,7 @@
 	return cfg;
 }
 
-void setsmtpconfig(sdbusplus::bus::bus& bus, std::string enable, std::string host, std::string port,
+void setsmtpconfig(sdbusplus::bus::bus& bus, bool enable, std::string host, uint16_t port,
 		std::string send, std::string rec)
 {
 	auto call = bus.new_method_call("xyz.openbmc_project.mail", "/xyz/openbmc_project/mail/alert",
@@ -3683,38 +3685,46 @@
         }
 }
 
+bool emailIdCheck(std::string email)
+{
+     const std::regex pattern("(\\w+)(\\.|_)?(\\w*)@(\\w+)(\\.(\\w+))+");
+     return std::regex_match(email,pattern);
+}
 
 RspType<> ipmiOEMSetSmtpConfig(Context::ptr ctx, uint8_t parameter, 
 		message::Payload& req)
 {
-    std::vector<std::string> smtpcfg;
+    std::tuple<bool,std::string,uint16_t,std::string,std::string> smtpcfg;
     std::shared_ptr<sdbusplus::asio::connection> bus = getSdBus();
     smtpcfg = getsmtpconfig(*bus);
+    bool mailChk = false;
 
-    std::string enabled = smtpcfg[0];
-    std::string host = smtpcfg[1];
-    std::string port = smtpcfg[2];
-    std::string sender = smtpcfg[3];
-    std::string rec = smtpcfg[4];
+    bool enabled = std::get<0>(smtpcfg);
+    std::string host = std::get<1>(smtpcfg);
+    uint16_t port = std::get<2>(smtpcfg);
+    std::string sender = std::get<3>(smtpcfg);
+    std::string rec = std::get<4>(smtpcfg);
 
-    switch (parameter)
+    switch (smtpSetting(parameter))
     {
-	 case 0x01:
+	 case smtpSetting::enable:
 	 {
 		std::array<uint8_t, 1> bytes;
             	if (req.unpack(bytes) != 0 || !req.fullyUnpacked())
             	{
                 	return responseReqDataLenInvalid();
             	}
-		if(bytes[0] == 0x00){
-			enabled = "false";
-		}else if(bytes[0] == 0x01)
+		if(bytes[0] == 0x00)
+		{
+			enabled = false;
+		}
+		else if(bytes[0] == 0x01)
 		{
-			enabled = "true";
+			enabled = true;
 	 	}
 	 	break;
 	 }
-	 case 0x02:
+	 case smtpSetting::ipAdd:
 	 {
 		 std::array<uint8_t, 4> bytes;
                  if (req.unpack(bytes) != 0 || !req.fullyUnpacked())
@@ -3725,20 +3735,25 @@
 			 std::to_string(bytes[2]) + "." +  std::to_string(bytes[3]);
 		 break;
 	 }
-	 case 0x03:
+	 case smtpSetting::port:
 	 {
 		 std::vector<uint8_t> bytes;
                  if (req.unpack(bytes) != 0 || !req.fullyUnpacked())
                  {
                         return responseReqDataLenInvalid();
                  }
-		 std::string p(bytes.begin(), bytes.end());
-		 port = p;
+		 if ((bytes.size() > 2) || (bytes.size() < 2))
+		 {
+			 return responseReqDataLenInvalid();
+		 }
+		 uint16_t smtpPort,smtpPortTmp;
+		 smtpPortTmp = bytes.at(0);
+		 smtpPort = ((smtpPortTmp << 8) | (bytes.at(1) & 0xff));
+		 port = smtpPort;
 		 break;
 	 }
-	 case 0x04:
+	 case smtpSetting::senderMailId:
 	 {
-		 //std::array<char, 50> bytes; 
 		 std::vector<char> reqData;
 		 if (req.unpack(reqData) != 0 || !req.fullyUnpacked())
     		 {
@@ -3747,11 +3762,15 @@
 
 		 std::string sen(reqData.begin(), reqData.end());
 		 sender = sen;
+                 mailChk = emailIdCheck(sender);
+		 if (mailChk == false)
+                 {
+                         return ipmi::responseInvalidFieldRequest();
+                 }
 		 break;
 	 }
-	 case 0x05:
+	 case smtpSetting::recMailId:
 	 {
-		 //std::array<char, 50> bytes;
 		 std::vector<char> reqData;
                  if (req.unpack(reqData) != 0 || !req.fullyUnpacked())
                  {
@@ -3760,44 +3779,99 @@
 
 		 std::string reci(reqData.begin(), reqData.end());
 		 rec = reci;
+		 mailChk = emailIdCheck(rec);
+                 if (mailChk == false)
+                 {
+                        return ipmi::responseInvalidFieldRequest();
+                 }
 		 break;
 	 }
+	 default:
+                        return responseParamNotSupported();
+	 	
     }
     setsmtpconfig(*bus, enabled, host, port, sender, rec);
     return responseSuccess();
 }
 
-/*RspType<> ipmiOEMGetSmtpConfig(Context::ptr ctx, uint8_t parameter)
+std::vector<uint8_t> convertToBytes(std::string data)
+{
+        std::vector<uint8_t> val;
+        uint8_t byteData;
+        for(int i=0; i < data.length();i++)
+        {
+                byteData = data[i];
+                val.push_back(byteData);
+        }
+        return val;
+}
+
+RspType<std::vector<uint8_t>> ipmiOEMGetSmtpConfig(Context::ptr ctx, uint8_t parameter)
 {
-    std::vector<std::string> smtpcfg;
+    std::tuple<bool,std::string,uint16_t,std::string,std::string> smtpcfg;
     std::shared_ptr<sdbusplus::asio::connection> bus = getSdBus();
     smtpcfg = getsmtpconfig(*bus);
 
-    switch (parameter)
+    bool enabled = std::get<0>(smtpcfg);
+    std::string host = std::get<1>(smtpcfg);
+    uint16_t port = std::get<2>(smtpcfg);
+    std::string sender = std::get<3>(smtpcfg);
+    std::string rec = std::get<4>(smtpcfg);
+
+    
+    std::vector<uint8_t> resData;
+    switch (smtpSetting(parameter))
     {
-         case 0x01:
+	 case smtpSetting::enable:
          {
+                if(enabled == true)
+                {
+                        resData.push_back(0x01);
+                }
+                else if (enabled == false)
+                {
+                        resData.push_back(0x00);
+                }
                 break;
          }
-         case 0x02:
+	 case smtpSetting::ipAdd:
          {
-                 break;
+		std::vector<std::string> result;
+		boost::split(result, host, boost::is_any_of("."),boost::token_compress_on);
+		uint8_t ipByte1 = static_cast<uint8_t>(std::stoi(result[0].c_str()));
+		uint8_t ipByte2 = static_cast<uint8_t>(std::stoi(result[1].c_str()));
+		uint8_t ipByte3 = static_cast<uint8_t>(std::stoi(result[2].c_str()));
+		uint8_t ipByte4 = static_cast<uint8_t>(std::stoi(result[3].c_str()));
+		resData.push_back(ipByte1);
+		resData.push_back(ipByte2);
+		resData.push_back(ipByte3);
+		resData.push_back(ipByte4);
+                break;
          }
-         case 0x03:
+	 case smtpSetting::port:
          {
-                 break;
+		uint8_t portMsb=0,portLsb=0;
+                portMsb = ((port >> 8) & 0xff);
+                portLsb = (port & 0xff);
+                resData.push_back(portMsb);
+                resData.push_back(portLsb);
+                break;
          }
-         case 0x04:
+	 case smtpSetting::senderMailId:
          {
-                 break;
+		resData = convertToBytes(sender);
+                break;
          }
-         case 0x05:
+	 case smtpSetting::recMailId:
          {
-                 break;
+                resData = convertToBytes(rec);
+                break;
          }
+	 default:
+                        return responseParamNotSupported();
     }
-    return responseSuccess();
-}*/
+    return responseSuccess(resData);
+}
 
 static void registerOEMFunctions(void)
 {
@@ -3974,9 +4048,9 @@
                     intel::general::cmdOEMSetSmtpConfig, Privilege::User,
                     ipmiOEMSetSmtpConfig);
 
-/*    registerHandler(prioOemBase, intel::netFnGeneral,
+    registerHandler(prioOemBase, intel::netFnGeneral,
                     intel::general::cmdOEMGetSmtpConfig, Privilege::User,
-                    ipmiOEMGetSmtpConfig);*/
+                    ipmiOEMGetSmtpConfig);
 }
 
 } // namespace ipmi
