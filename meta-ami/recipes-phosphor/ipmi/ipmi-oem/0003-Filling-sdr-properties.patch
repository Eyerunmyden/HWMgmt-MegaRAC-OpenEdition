diff -Naur a/src/sensorcommands.cpp b/src/sensorcommands.cpp
--- a/src/sensorcommands.cpp	2021-02-16 15:39:02.508534394 +0530
+++ b/src/sensorcommands.cpp	2021-02-18 12:38:37.336758453 +0530
@@ -1118,6 +1118,102 @@
         uint8_t sensornumber = static_cast<uint8_t>(sensorNum);
         uint8_t lun = static_cast<uint8_t>(sensorNum >> 8);
 
+    auto sensorObject = sensorMap.find("xyz.openbmc_project.Sensor.Value");
+    if (sensorObject == sensorMap.end())
+	    return GENERAL_ERROR;
+
+    auto EntityIdobj = sensorObject->second.find("EntityId");
+    uint8_t EntityId ;
+    if (EntityIdobj != sensorObject->second.end())
+    {
+        EntityId = std::visit(VariantToUnsignedIntVisitor(), EntityIdobj->second);
+    }
+
+    auto SensorInitobj = sensorObject->second.find("SensorInit");
+    uint8_t SensorInit ;
+    if (SensorInitobj != sensorObject->second.end())
+    {
+        SensorInit = std::visit(VariantToUnsignedIntVisitor(), SensorInitobj->second);
+    }
+
+    auto EntityInstanceobj = sensorObject->second.find("EntityInstance");
+    uint8_t EntityInstance ;
+    if (EntityInstanceobj != sensorObject->second.end())
+    {
+        EntityInstance = std::visit(VariantToUnsignedIntVisitor(), EntityInstanceobj->second);
+    }
+
+    auto SensorCapobj = sensorObject->second.find("SensorCap");
+    uint8_t SensorCap ;
+    if (SensorCapobj != sensorObject->second.end())
+    {
+        SensorCap = std::visit(VariantToUnsignedIntVisitor(), SensorCapobj->second);
+    }
+
+    auto OwnerIdobj = sensorObject->second.find("OwnerId");
+    uint8_t OwnerId ;
+    if (OwnerIdobj != sensorObject->second.end())
+    {
+        OwnerId = std::visit(VariantToUnsignedIntVisitor(), OwnerIdobj->second);
+    }
+
+    auto OwnerLunobj = sensorObject->second.find("OwnerLun");
+    uint8_t OwnerLun ;
+    if (OwnerLunobj != sensorObject->second.end())
+    {
+        OwnerLun = std::visit(VariantToUnsignedIntVisitor(), OwnerLunobj->second);
+    }
+
+    auto SdrVersionobj = sensorObject->second.find("SdrVersion");
+    uint8_t ipmiSdrVersion ;
+    if (SdrVersionobj != sensorObject->second.end())
+    {
+        ipmiSdrVersion = std::visit(VariantToUnsignedIntVisitor(), SdrVersionobj->second);
+    }
+    
+     auto RecordTypeobj = sensorObject->second.find("RecordType");
+    uint8_t RecordType ;
+    if (RecordTypeobj != sensorObject->second.end())
+    {
+        RecordType = std::visit(VariantToUnsignedIntVisitor(), RecordTypeobj->second);
+    }
+
+    auto SensorTypeobj = sensorObject->second.find("SensorType");
+    uint8_t SensorType ;
+    if (SensorTypeobj != sensorObject->second.end())
+    {
+        SensorType = std::visit(VariantToUnsignedIntVisitor(), SensorTypeobj->second);
+    }
+
+    auto SensorUnit2obj = sensorObject->second.find("SensorUnit2");
+    uint8_t SensorUnit2 ;
+    if (SensorUnit2obj != sensorObject->second.end())
+    {
+        SensorUnit2 = std::visit(VariantToUnsignedIntVisitor(), SensorUnit2obj->second);
+    }
+
+    auto NominalReadingobj = sensorObject->second.find("NominalReading");
+    uint8_t NominalReading ;
+    if (NominalReadingobj != sensorObject->second.end())
+    {
+        NominalReading = std::visit(VariantToUnsignedIntVisitor(), NominalReadingobj->second);
+    }
+
+    auto NormalMaxobj = sensorObject->second.find("NormalMax");
+    uint8_t NormalMax ;
+    if (NormalMaxobj != sensorObject->second.end())
+    {
+        NormalMax = std::visit(VariantToUnsignedIntVisitor(), NormalMaxobj->second);
+    }
+
+    auto NormalMinobj = sensorObject->second.find("NormalMin");
+    uint8_t NormalMin ;
+    if (NormalMinobj != sensorObject->second.end())
+    {
+        NormalMin = std::visit(VariantToUnsignedIntVisitor(), NormalMinobj->second);
+    }
+
+
         get_sdr::SensorDataFullRecord record = {0};
 
         get_sdr::header::set_record_id(
@@ -1127,12 +1223,21 @@
         record.header.record_type = get_sdr::SENSOR_DATA_FULL_RECORD;
         record.header.record_length = sizeof(get_sdr::SensorDataFullRecord) -
                                       sizeof(get_sdr::SensorDataRecordHeader);
-        record.key.owner_id = 0x20;
-        record.key.owner_lun = lun;
         record.key.sensor_number = sensornumber;
+	record.header.record_id_msb = recordID << 8;
+        record.header.record_id_lsb = recordID & 0xFF;
+	record.key.owner_id = OwnerId;
+        record.key.owner_lun = OwnerLun;
+	record.body.entity_id = EntityId;
+        record.body.entity_instance = EntityInstance;
+        record.body.sensor_initialization = SensorInit;
+        record.body.sensor_capabilities = SensorCap; // auto rearm - todo hysteresis
+        record.body.sensor_type = SensorType;
+        record.body.sensor_units_2_base = SensorUnit2;
+        record.body.nominal_reading = NominalReading;
+        record.body.normal_max = NormalMax;
+        record.body.normal_min = NormalMin;
 
-        record.body.sensor_capabilities = 0x68; // auto rearm - todo hysteresis
-        record.body.sensor_type = getSensorTypeFromPath(path);
         std::string type = getSensorTypeStringFromPath(path);
         auto typeCstr = type.c_str();
         auto findUnits = sensorUnits.find(typeCstr);
@@ -1144,21 +1249,10 @@
 
         record.body.event_reading_type = getSensorEventTypeFromPath(path);
 
-        auto sensorObject = sensorMap.find("xyz.openbmc_project.Sensor.Value");
-        if (sensorObject == sensorMap.end())
-        {
-            return GENERAL_ERROR;
-        }
-
-        uint8_t entityId = 0;
-        uint8_t entityInstance = 0x01;
-
         // follow the association chain to get the parent board's entityid and
         // entityInstance
-        updateIpmiFromAssociation(path, sensorMap, entityId, entityInstance);
+        updateIpmiFromAssociation(path, sensorMap, EntityId, EntityInstance);
 
-        record.body.entity_id = entityId;
-        record.body.entity_instance = entityInstance;
 
         auto maxObject = sensorObject->second.find("MaxValue");
         auto minObject = sensorObject->second.find("MinValue");
