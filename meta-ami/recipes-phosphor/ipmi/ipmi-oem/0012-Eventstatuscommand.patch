--- a/src/sensorcommands.cpp	2021-03-30 21:02:00.364682892 +0530
+++ b/src/sensorcommands.cpp	2021-03-30 21:04:55.494517104 +0530
@@ -1067,9 +1067,26 @@
         sensorMap.find("xyz.openbmc_project.Sensor.Threshold.Warning");
     auto criticalInterface =
         sensorMap.find("xyz.openbmc_project.Sensor.Threshold.Critical");
+       auto sensorObject = sensorMap.find("xyz.openbmc_project.Sensor.Value");
+    if (sensorObject == sensorMap.end() ||
+        sensorObject->second.find("Value") == sensorObject->second.end())
+    {
+        return ipmi::responseResponseError();
+    }
+    auto& valueVariant = sensorObject->second["Value"];
+    double reading = std::visit(VariantToDoubleVisitor(), valueVariant);
+    bool notReading = std::isnan(reading);
 
     uint8_t sensorEventStatus =
         static_cast<uint8_t>(IPMISensorEventEnableByte2::sensorScanningEnable);
+           sensorEventStatus |=
+             static_cast<uint8_t>(IPMISensorReadingByte2::eventMessagesEnable);
+      if (notReading)
+    {
+        sensorEventStatus |= static_cast<uint8_t>(
+            IPMISensorReadingByte2::readingStateUnavailable);
+
+    }
 
     std::optional<bool> criticalDeassertHigh =
         thresholdDeassertMap[path]["CriticalAlarmHigh"];
@@ -1106,8 +1123,8 @@
     if ((warningInterface != sensorMap.end()) ||
         (criticalInterface != sensorMap.end()))
     {
-        sensorEventStatus = static_cast<size_t>(
-            IPMISensorEventEnableByte2::eventMessagesEnable);
+       // sensorEventStatus = static_cast<size_t>(
+         //   IPMISensorEventEnableByte2::eventMessagesEnable);
         if (warningInterface != sensorMap.end())
         {
             auto& warningMap = warningInterface->second;
