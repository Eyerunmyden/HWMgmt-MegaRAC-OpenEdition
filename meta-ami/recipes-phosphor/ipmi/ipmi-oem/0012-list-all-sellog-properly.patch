--- a/src/storagecommands.cpp	2020-09-01 14:57:40.714842148 +0530
+++ b/src/storagecommands.cpp	2020-09-01 15:03:47.331266416 +0530
@@ -809,7 +809,11 @@
 {
     // Record ID is the first entry field following the timestamp. It is
     // preceded by a space and followed by a comma
-    std::string search = " " + std::to_string(recordID) + ",";
+
+    std::stringstream ss;
+    ss << std::hex << recordID;
+    std::string res = ss.str();
+    std::string search = " " + res + ",";
 
     // Loop through the ipmi_sel log entries
     for (const std::filesystem::path& file : selLogFiles)
@@ -834,7 +838,7 @@
 static constexpr uint16_t selInvalidRecID =
     std::numeric_limits<uint16_t>::max();
 
-static unsigned int initializeRecordId(void)
+static uint16_t initializeRecordId(void)
 {
     std::vector<std::filesystem::path> selLogFiles;
     if (!getSELLogFiles(selLogFiles))
@@ -861,7 +865,7 @@
         return selInvalidRecID;
     }
 
-    return std::stoul(newestEntryFields[1]);
+    return std::stoul(newestEntryFields[1],nullptr,16);
 }
 static bool deleteEntry(std::string entry)
 {
@@ -1076,7 +1080,8 @@
     uint8_t recordType;
     try
     {
-        recordID = std::stoul(recordIDStr);
+        //recordID = std::stoul(recordIDStr);
+	recordID = std::stoul(recordIDStr, nullptr, 16);
         recordType = std::stoul(recordTypeStr, nullptr, 16);
     }
     catch (const std::invalid_argument&)
