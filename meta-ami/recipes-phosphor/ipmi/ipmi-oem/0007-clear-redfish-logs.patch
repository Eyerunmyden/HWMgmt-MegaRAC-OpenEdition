diff -Naur a/src/storagecommands.cpp b/src/storagecommands.cpp
--- a/src/storagecommands.cpp	2020-08-30 21:51:23.106242881 +0530
+++ b/src/storagecommands.cpp	2020-08-30 22:01:17.902303489 +0530
@@ -43,6 +43,7 @@
 {
 static const std::filesystem::path selLogDir = "/var/sellog";
 static const std::string selLogFilename = "ipmi_sel";
+static const std::string redfishLogFilename = "redfish";
 
 static int getFileTimestamp(const std::filesystem::path& file)
 {
@@ -731,6 +732,28 @@
     return IPMI_CC_OK;
 }
 
+static bool getRedfishLogFiles(std::vector<std::filesystem::path>& redfishLogFiles)
+{
+    // Loop through the directory looking for ipmi_sel log files
+    for (const std::filesystem::directory_entry& dirEnt :
+         std::filesystem::directory_iterator(intel_oem::ipmi::sel::selLogDir))
+    {
+        std::string filename = dirEnt.path().filename();
+        if (boost::starts_with(filename, intel_oem::ipmi::sel::redfishLogFilename))
+        {
+            // If we find an ipmi_sel log file, save the path
+            redfishLogFiles.emplace_back(intel_oem::ipmi::sel::selLogDir /
+                                     filename);
+        }
+    }
+    // As the log files rotate, they are appended with a ".#" that is higher for
+    // the older logs. Since we don't expect more than 10 log files, we
+    // can just sort the list to get them in order from newest to oldest
+    std::sort(redfishLogFiles.begin(), redfishLogFiles.end());
+
+    return !redfishLogFiles.empty();
+}
+
 static bool getSELLogFiles(std::vector<std::filesystem::path>& selLogFiles)
 {
     // Loop through the directory looking for ipmi_sel log files
@@ -1357,6 +1380,18 @@
         }
     }
 
+
+    // Clear the SEL by deleting the log files
+    std::vector<std::filesystem::path> redfishLogFiles;
+    if (getRedfishLogFiles(redfishLogFiles))
+    {
+        for (const std::filesystem::path& file : redfishLogFiles)
+        {
+            std::error_code ec;
+            std::filesystem::remove(file, ec);
+         }
+     }
+
     // Reload rsyslog so it knows to start new log files
     std::shared_ptr<sdbusplus::asio::connection> dbus = getSdBus();
     sdbusplus::message::message rsyslogReload = dbus->new_method_call(
