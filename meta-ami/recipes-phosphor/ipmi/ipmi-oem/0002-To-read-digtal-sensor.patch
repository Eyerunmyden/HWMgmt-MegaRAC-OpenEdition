diff -Naur a/include/types.hpp b/include/types.hpp
--- a/include/types.hpp	2020-08-26 06:42:50.419585891 +0530
+++ b/include/types.hpp	2020-08-26 06:43:18.011007143 +0530
@@ -30,7 +30,7 @@
 
 using DbusVariant =
     std::variant<std::string, bool, uint8_t, uint16_t, int16_t, uint32_t,
-                 int32_t, uint64_t, int64_t, double, std::vector<Association>>;
+                 int32_t, uint64_t, int64_t, double, std::vector<std::uint8_t> , std::vector<Association>>;
 
 using GetSubTreeType = std::vector<
     std::pair<std::string,
diff -Naur a/include/variantvisitors.hpp b/include/variantvisitors.hpp
--- a/include/variantvisitors.hpp	2020-08-26 06:42:50.419585891 +0530
+++ b/include/variantvisitors.hpp	2020-08-26 06:43:18.011007143 +0530
@@ -23,5 +23,5 @@
 {
 
 using DbusVariant = std::variant<std::string, bool, uint8_t, uint16_t, int16_t,
-                                 uint32_t, int32_t, uint64_t, int64_t, double>;
+                                 uint32_t, int32_t, uint64_t, int64_t, double, std::vector<std::uint8_t>>;
 } // namespace ipmi
diff -Naur a/src/sensorcommands.cpp b/src/sensorcommands.cpp
--- a/src/sensorcommands.cpp	2020-08-26 06:44:23.417726082 +0530
+++ b/src/sensorcommands.cpp	2020-08-26 06:44:51.941204397 +0530
@@ -462,6 +462,74 @@
 
     uint8_t thresholds = 0;
 
+   
+    //Check Digital Sensor
+    /*auto SensorUnitObj = sensorObject->second.find("Unit");
+    std::string sensorUnitStr;
+    if (SensorUnitObj != sensorObject->second.end())
+    {
+         sensorUnitStr= std::get<std::string>(SensorUnitObj->second);
+    }
+    std::cout<< "sensorUnitStr : " << sensorUnitStr;*/
+
+    auto SensorTypeObj = sensorObject->second.find("EventType");
+    uint8_t sensorTypeInt;
+    if (SensorTypeObj != sensorObject->second.end())
+    {
+         sensorTypeInt= std::get<uint8_t>(SensorTypeObj->second);
+    }
+
+    //if(strcmp(sensorUnitStr.c_str(),"xyz.openbmc_project.Sensor.Value.Unit.Digital") == 0)
+    uint8_t DigitalSenStart = 0x02, DigitalSenEnd = 0x0C, SensorSpecific = 0x6f;
+    if(((sensorTypeInt >= DigitalSenStart) && (sensorTypeInt <= DigitalSenEnd)) || (sensorTypeInt == SensorSpecific))
+    {
+         uint8_t res;
+
+         auto stateObject =
+             sensorMap.find("xyz.openbmc_project.Sensor.Discrete.State");
+     if (stateObject != sensorMap.end())
+         {
+            auto alarmState = stateObject->second.find("ActiveAlarmState");
+            if (alarmState != stateObject->second.end())
+             {
+                 std::vector<std::uint8_t> offset = std::get<std::vector<std::uint8_t>>(alarmState->second);
+               switch(offset[0])
+                 {
+                  case 0x00 :
+                       res = 0x01;
+                       break;
+                   case 0x01 :
+                       res = 0x02;
+                       break;
+                   case 0x02 :
+                       res = 0x04;
+                       break;
+                   case 0x03 :
+                       res = 0x08;
+                       break;
+                   case 0x04 :
+                       res = 0x10;
+                       break;
+                   case 0x05 :
+                       res = 0x20;
+                       break;
+                   case 0x06 :
+                       res = 0x40;
+                       break;
+                   case 0x07 :
+                       res = 0x80;
+                       break;
+                   default :
+                       res = 0x00;
+                       break;
+                }
+               return ipmi::responseSuccess(value, operation, res,0);
+             }
+        }
+    }
+
+
+
     auto warningObject =
         sensorMap.find("xyz.openbmc_project.Sensor.Threshold.Warning");
     if (warningObject != sensorMap.end())
@@ -1311,14 +1379,14 @@
     record.body.sensor_type = getSensorTypeFromPath(path);
     std::string type = getSensorTypeStringFromPath(path);
     auto typeCstr = type.c_str();
-    auto findUnits = sensorUnits.find(typeCstr);
-    if (findUnits != sensorUnits.end())
-    {
-        record.body.sensor_units_2_base =
-            static_cast<uint8_t>(findUnits->second);
-    } // else default 0x0 unspecified
+    //auto findUnits = sensorUnits.find(typeCstr);
+    //if (findUnits != sensorUnits.end())
+   // {
+     //   record.body.sensor_units_2_base =
+      //      static_cast<uint8_t>(findUnits->second);
+   // } // else default 0x0 unspecified
 
-    record.body.event_reading_type = getSensorEventTypeFromPath(path);
+   // record.body.event_reading_type = getSensorEventTypeFromPath(path);
 
     auto sensorObject = sensorMap.find("xyz.openbmc_project.Sensor.Value");
     if (sensorObject == sensorMap.end())
@@ -1326,6 +1394,60 @@
         return ipmi::responseResponseError();
     }
 
+       //auto SensorUnitObj = sensorObject->second.find("Unit");
+    //std::string sensorUnitStr;
+    //if (SensorUnitObj != sensorObject->second.end())
+    //{
+    //   sensorUnitStr = std::get<std::string>(SensorUnitObj->second);
+    //}
+    //if(strcmp(sensorUnitStr.c_str(),"xyz.openbmc_project.Sensor.Value.Unit.Digital") == 0 ||
+    //                 strcmp(sensorUnitStr.c_str(),"xyz.openbmc_project.Sensor.Value.Unit.Discrete") == 0)
+   //{
+        //Digital Sensor
+        auto SensorDTypeObj = sensorObject->second.find("DType");
+        if (SensorDTypeObj != sensorObject->second.end())
+        {
+           record.body.sensor_type =  std::get<uint8_t>(SensorDTypeObj->second);
+          record.body.sensor_units_2_base=0;
+
+        }
+        else{
+            record.body.sensor_type=0;
+               auto findUnits = sensorUnits.find(typeCstr);
+        if (findUnits != sensorUnits.end())
+        {
+            record.body.sensor_units_2_base =
+                static_cast<uint8_t>(findUnits->second);
+
+        }
+       }
+        //record.body.sensor_units_2_base=0;
+
+        auto SensorEventTypeObj = sensorObject->second.find("EventType");
+        if (SensorEventTypeObj != sensorObject->second.end())
+       {
+            record.body.event_reading_type =  std::get<uint8_t>(SensorEventTypeObj->second);
+
+        }
+        else
+            record.body.event_reading_type = getSensorEventTypeFromPath(path);
+
+    //}
+    //else
+    //{
+    //    auto findUnits = sensorUnits.find(typeCstr);
+    //    if (findUnits != sensorUnits.end())
+    //    {
+    //        record.body.sensor_units_2_base =
+    //            static_cast<uint8_t>(findUnits->second);
+
+    //    } // else default 0x0 unspecified
+    //    record.body.event_reading_type = getSensorEventTypeFromPath(path);
+
+    //}
+
+
+
     uint8_t entityId = 0;
     uint8_t entityInstance = 0x01;
 
