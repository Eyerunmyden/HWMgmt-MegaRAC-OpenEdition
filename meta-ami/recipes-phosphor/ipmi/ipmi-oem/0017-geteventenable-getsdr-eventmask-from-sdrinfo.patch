diff -Naur a/src/sensorcommands.cpp b/src/sensorcommands.cpp
--- a/src/sensorcommands.cpp	2021-04-28 11:30:42.236988605 +0530
+++ b/src/sensorcommands.cpp	2021-04-28 12:03:54.403846713 +0530
@@ -966,64 +966,35 @@
         return ipmi::responseResponseError();
     }
 
-    auto warningInterface =
-        sensorMap.find("xyz.openbmc_project.Sensor.Threshold.Warning");
-    auto criticalInterface =
-        sensorMap.find("xyz.openbmc_project.Sensor.Threshold.Critical");
-    enabled = static_cast<uint8_t>(
-            IPMISensorEventEnableByte2::sensorScanningEnable);
-    enabled |=
-        static_cast<uint8_t>(IPMISensorReadingByte2::eventMessagesEnable);
+    auto sensorObject = sensorMap.find("xyz.openbmc_project.Sensor.Value");
+    if (sensorObject == sensorMap.end())
+    {
+        return ipmi::responseResponseError();
+    }
 
-    if ((warningInterface != sensorMap.end()) ||
-        (criticalInterface != sensorMap.end()))
+    auto AssertMaskobj = sensorObject->second.find("AssertEventMask");
+    uint16_t AssertMask;
+    if (AssertMaskobj != sensorObject->second.end())
     {
-      //  enabled = static_cast<uint8_t>(
-        //    IPMISensorEventEnableByte2::sensorScanningEnable);
-        if (warningInterface != sensorMap.end())
-        {
-            auto& warningMap = warningInterface->second;
+        AssertMask = std::visit(VariantToUnsignedIntVisitor(), AssertMaskobj->second);
+    }
 
-            auto warningHigh = warningMap.find("WarningHigh");
-            auto warningLow = warningMap.find("WarningLow");
-            if (warningHigh != warningMap.end())
-            {
-                assertionEnabledLsb |= static_cast<uint8_t>(
-                    IPMISensorEventEnableThresholds::upperNonCriticalGoingHigh);
-                deassertionEnabledLsb |= static_cast<uint8_t>(
-                    IPMISensorEventEnableThresholds::upperNonCriticalGoingLow);
-            }
-            if (warningLow != warningMap.end())
-            {
-                assertionEnabledLsb |= static_cast<uint8_t>(
-                    IPMISensorEventEnableThresholds::lowerNonCriticalGoingLow);
-                deassertionEnabledLsb |= static_cast<uint8_t>(
-                    IPMISensorEventEnableThresholds::lowerNonCriticalGoingHigh);
-            }
-        }
-        if (criticalInterface != sensorMap.end())
-        {
-            auto& criticalMap = criticalInterface->second;
+    auto DeassertMaskobj = sensorObject->second.find("DeassertEventMask");
+    uint16_t DeassertMask ;
+    if (DeassertMaskobj != sensorObject->second.end())
+    {
+        DeassertMask = std::visit(VariantToUnsignedIntVisitor(), DeassertMaskobj->second);
+    }
 
-            auto criticalHigh = criticalMap.find("CriticalHigh");
-            auto criticalLow = criticalMap.find("CriticalLow");
+    enabled = static_cast<uint8_t>(
+            IPMISensorEventEnableByte2::sensorScanningEnable);
+    enabled |=
+        static_cast<uint8_t>(IPMISensorReadingByte2::eventMessagesEnable);
 
-            if (criticalHigh != criticalMap.end())
-            {
-                assertionEnabledMsb |= static_cast<uint8_t>(
-                    IPMISensorEventEnableThresholds::upperCriticalGoingHigh);
-                deassertionEnabledMsb |= static_cast<uint8_t>(
-                    IPMISensorEventEnableThresholds::upperCriticalGoingLow);
-            }
-            if (criticalLow != criticalMap.end())
-            {
-                assertionEnabledLsb |= static_cast<uint8_t>(
-                    IPMISensorEventEnableThresholds::lowerCriticalGoingLow);
-                deassertionEnabledLsb |= static_cast<uint8_t>(
-                    IPMISensorEventEnableThresholds::lowerCriticalGoingHigh);
-            }
-        }
-    }
+    assertionEnabledLsb = AssertMask;
+    assertionEnabledMsb = AssertMask >> 8;
+    deassertionEnabledLsb = DeassertMask;
+    deassertionEnabledMsb = DeassertMask >> 8;
 
     return ipmi::responseSuccess(enabled, assertionEnabledLsb,
                                  assertionEnabledMsb, deassertionEnabledLsb,
@@ -1337,6 +1308,19 @@
         NormalMin = std::visit(VariantToUnsignedIntVisitor(), NormalMinobj->second);
     }
 
+    auto AssertMaskobj = sensorObject->second.find("AssertEventMask");
+    uint16_t AssertMask;
+    if (AssertMaskobj != sensorObject->second.end())
+    {
+        AssertMask = std::visit(VariantToUnsignedIntVisitor(), AssertMaskobj->second);
+    }
+
+    auto DeassertMaskobj = sensorObject->second.find("DeassertEventMask");
+    uint16_t DeassertMask ;
+    if (DeassertMaskobj != sensorObject->second.end())
+    {
+        DeassertMask = std::visit(VariantToUnsignedIntVisitor(), DeassertMaskobj->second);
+    }
 
         get_sdr::SensorDataFullRecord record = {0};
 
@@ -1363,6 +1347,11 @@
         record.body.normal_max = NormalMax;
         record.body.normal_min = NormalMin;
 
+	record.body.supported_assertions[0] = AssertMask;
+        record.body.supported_assertions[1] = AssertMask >> 8;
+        record.body.supported_deassertions[0] = DeassertMask;
+        record.body.supported_deassertions[1] = DeassertMask >> 8;
+
         // follow the association chain to get the parent board's entityid and
         // entityInstance
         updateIpmiFromAssociation(path, sensorMap, EntityId, EntityInstance);
@@ -1487,10 +1476,6 @@
             record.body.upper_critical_threshold = *thresholdData.criticalHigh;
             record.body.supported_deassertions[1] |= static_cast<uint8_t>(
                 IPMISensorEventEnableThresholds::criticalThreshold);
-            record.body.supported_deassertions[1] |= static_cast<uint8_t>(
-                IPMISensorEventEnableThresholds::upperCriticalGoingHigh);
-            record.body.supported_assertions[1] |= static_cast<uint8_t>(
-                IPMISensorEventEnableThresholds::upperCriticalGoingHigh);
             record.body.discrete_reading_setting_mask[0] |=
                 static_cast<uint8_t>(IPMISensorReadingByte3::upperCritical);
         }
@@ -1500,10 +1485,6 @@
                 *thresholdData.warningHigh;
             record.body.supported_deassertions[1] |= static_cast<uint8_t>(
                 IPMISensorEventEnableThresholds::nonCriticalThreshold);
-            record.body.supported_deassertions[0] |= static_cast<uint8_t>(
-                IPMISensorEventEnableThresholds::upperNonCriticalGoingHigh);
-            record.body.supported_assertions[0] |= static_cast<uint8_t>(
-                IPMISensorEventEnableThresholds::upperNonCriticalGoingHigh);
             record.body.discrete_reading_setting_mask[0] |=
                 static_cast<uint8_t>(IPMISensorReadingByte3::upperNonCritical);
         }
@@ -1512,10 +1493,6 @@
             record.body.lower_critical_threshold = *thresholdData.criticalLow;
             record.body.supported_assertions[1] |= static_cast<uint8_t>(
                 IPMISensorEventEnableThresholds::criticalThreshold);
-            record.body.supported_deassertions[0] |= static_cast<uint8_t>(
-                IPMISensorEventEnableThresholds::lowerCriticalGoingLow);
-            record.body.supported_assertions[0] |= static_cast<uint8_t>(
-                IPMISensorEventEnableThresholds::lowerCriticalGoingLow);
             record.body.discrete_reading_setting_mask[0] |=
                 static_cast<uint8_t>(IPMISensorReadingByte3::lowerCritical);
         }
@@ -1524,10 +1501,6 @@
             record.body.lower_noncritical_threshold = *thresholdData.warningLow;
             record.body.supported_assertions[1] |= static_cast<uint8_t>(
                 IPMISensorEventEnableThresholds::nonCriticalThreshold);
-            record.body.supported_deassertions[0] |= static_cast<uint8_t>(
-                IPMISensorEventEnableThresholds::lowerNonCriticalGoingLow);
-            record.body.supported_assertions[0] |= static_cast<uint8_t>(
-                IPMISensorEventEnableThresholds::lowerNonCriticalGoingLow);
             record.body.discrete_reading_setting_mask[0] |=
                 static_cast<uint8_t>(IPMISensorReadingByte3::lowerNonCritical);
         }
