diff -Naur a/dcmihandler.cpp b/dcmihandler.cpp
--- a/dcmihandler.cpp	2021-03-11 14:38:24.524345005 +0530
+++ b/dcmihandler.cpp	2021-03-11 14:41:52.266027049 +0530
@@ -56,6 +56,8 @@
 constexpr auto SENSOR_VALUE_PROP = "Value";
 constexpr auto SENSOR_SCALE_PROP = "Scale";
 
+constexpr auto IPMI_INVALID_CMD_RES_UNKNOWN = 0x89;
+constexpr auto POWER_LIMIT_TMP_FILE = "/etc/power_limit.json";
 using namespace phosphor::logging;
 
 namespace dcmi
@@ -331,6 +333,22 @@
         return IPMI_CC_INVALID;
     }
 
+    auto requestData =
+        reinterpret_cast<const dcmi::GetPowerLimitRequest*>(request);
+
+    if (*data_len != sizeof(dcmi::GetPowerLimitRequest))
+    {
+        log<level::ERR>("Malformed request data",
+                        entry("DATA_SIZE=%d", *data_len));
+        return IPMI_CC_REQ_DATA_LEN_INVALID;
+    }
+    *data_len = 0;
+
+    if(requestData->reserved != 0)
+    {
+        return IPMI_CC_INVALID_FIELD_REQUEST;
+    }
+
     std::vector<uint8_t> outPayload(sizeof(dcmi::GetPowerLimitResponse));
     auto responseData =
         reinterpret_cast<dcmi::GetPowerLimitResponse*>(outPayload.data());
@@ -355,8 +373,8 @@
      * with the correction time limit is hardcoded to Hard Power Off system
      * and log event to SEL.
      */
-    constexpr auto exception = 0x01;
-    responseData->exceptionAction = exception;
+    //constexpr auto exception = 0x01;
+    //responseData->exceptionAction = exception;
 
     responseData->powerLimit = static_cast<uint16_t>(pcapValue);
 
@@ -364,6 +382,27 @@
      * Correction time limit and Statistics sampling period is currently not
      * populated.
      */
+    std::ifstream pwrLimitData(POWER_LIMIT_TMP_FILE, std::ios::in | std::ios::binary);
+    if (!pwrLimitData.good())
+    {
+        log<level::ERR>("Error in reading IPMI power limit file");
+	responseData->exceptionAction = 0;
+        responseData->correctionTime = 0;
+        responseData->samplingPeriod = 256;
+    }
+    else
+    {
+	 dcmi::Json jsonPowerLimit = dcmi::Json::array();
+         jsonPowerLimit = dcmi::Json::parse(pwrLimitData, nullptr, false);
+
+         dcmi::Json PwrLimitInfo = jsonPowerLimit[0];
+         responseData->exceptionAction = PwrLimitInfo["ExceptionAction"];
+         responseData->correctionTime = PwrLimitInfo["CorrectionTime"];
+         responseData->samplingPeriod = PwrLimitInfo["SamplingPeriod"];
+
+    }
+
+    pwrLimitData.close();
 
     *data_len = outPayload.size();
     memcpy(response, outPayload.data(), *data_len);
@@ -392,8 +431,30 @@
     auto requestData =
         reinterpret_cast<const dcmi::SetPowerLimitRequest*>(request);
 
-    sdbusplus::bus::bus sdbus{ipmid_get_sd_bus_connection()};
+    if (*data_len != sizeof(dcmi::SetPowerLimitRequest))
+    {
+        log<level::ERR>("Malformed request data",
+                        entry("DATA_SIZE=%d", *data_len));
+        return IPMI_CC_REQ_DATA_LEN_INVALID;
+    }
+    *data_len = 0;
 
+    if((requestData->reserved != 0) || (requestData->reserved1 != 0) || (requestData->reserved2 != 0))
+    {
+        return IPMI_CC_INVALID_FIELD_REQUEST;
+    }
+
+    if((requestData->exceptionAction >= 18) && (requestData->exceptionAction <= 255))
+    {
+        return IPMI_CC_INVALID_FIELD_REQUEST;	    
+    }
+
+    if(requestData->samplingPeriod == 0)
+    {
+	return IPMI_INVALID_CMD_RES_UNKNOWN;
+    }
+
+    sdbusplus::bus::bus sdbus{ipmid_get_sd_bus_connection()};
     // Only process the power limit requested in watts.
     try
     {
@@ -407,6 +468,29 @@
 
     log<level::INFO>("Set Power Cap",
                      entry("POWERCAP=%u", requestData->powerLimit));
+    
+    dcmi::Json jsonPwrLimitTbl = dcmi::Json::array();
+    dcmi::Json powerLimitInfo;
+    powerLimitInfo["ExceptionAction"] = requestData->exceptionAction;
+    powerLimitInfo["CorrectionTime"] = requestData->correctionTime;
+    powerLimitInfo["SamplingPeriod"] = requestData->samplingPeriod;
+
+    jsonPwrLimitTbl.push_back(powerLimitInfo);
+    static std::string tmpFile{POWER_LIMIT_TMP_FILE};
+    int fd = open(tmpFile.c_str(), O_CREAT | O_WRONLY | O_TRUNC | O_SYNC,
+                  S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
+    if (fd < 0)
+    {
+        log<level::ERR>("Error in creating temporary IPMI power Limit data file");
+    }
+    const auto& writeStr = jsonPwrLimitTbl.dump();
+    if (write(fd, writeStr.c_str(), writeStr.size()) !=
+        static_cast<ssize_t>(writeStr.size()))
+    {
+        close(fd);
+        log<level::ERR>("Error in writing temporary IPMI power limit data file");
+    }
+    close(fd);
 
     *data_len = 0;
     return IPMI_CC_OK;
@@ -851,15 +935,7 @@
         std::visit(ipmi::VariantToDoubleVisitor(), result.at("Value"));
     double absTemp = std::abs(temperature);
 
-    auto findFactor = result.find("Scale");
-    double factor = 0.0;
-    if (findFactor != result.end())
-    {
-        factor = std::visit(ipmi::VariantToDoubleVisitor(), findFactor->second);
-    }
-    double scale = std::pow(10, factor);
-
-    auto tempDegrees = absTemp * scale;
+    auto tempDegrees = std::round(absTemp);
     // Max absolute temp as per ipmi spec is 128.
     if (tempDegrees > maxTemp)
     {
diff -Naur a/dcmihandler.hpp b/dcmihandler.hpp
--- a/dcmihandler.hpp	2021-03-11 14:38:35.584435092 +0530
+++ b/dcmihandler.hpp	2021-03-11 14:42:11.310180315 +0530
@@ -211,6 +211,15 @@
 
 /** @struct GetPowerLimitResponse
  *
+ *  DCMI payload for Get Power Limit command resquest.
+ */
+struct GetPowerLimitRequest
+{
+    uint16_t reserved;       //!< Reserved.
+} __attribute__((packed));
+
+/** @struct GetPowerLimitResponse
+ *
  *  DCMI payload for Get Power Limit command response.
  */
 struct GetPowerLimitResponse
