--- a/transporthandler.cpp	2021-03-26 03:47:55.182469018 -0400
+++ b/transporthandler.cpp	2021-03-26 03:46:45.678869219 -0400
@@ -1082,6 +1082,34 @@
     return vlan;
 }
 
+uint16_t getVLANPriority(sdbusplus::bus::bus& bus, const ChannelParams& params)
+{
+    // VLAN devices will always have a separate logical object
+    if (params.ifPath == params.logicalPath)
+    {
+        return -1;
+    }
+
+    auto vlan = std::get<uint32_t>(getDbusProperty(
+        bus, params.service, params.logicalPath, INTF_VLAN, "VlanPriority"));
+    return vlan;
+}
+
+uint16_t setVLANPriority(sdbusplus::bus::bus& bus, const ChannelParams& params, uint32_t vlan_priority)
+{
+         // VLAN devices will always have a separate logical object
+    if (params.ifPath == params.logicalPath)
+    {
+        return -1;
+    }
+
+    setDbusProperty(bus, params.service, params.logicalPath, INTF_VLAN, "VlanPriority",vlan_priority);
+
+    return 0;
+}
+
+
+
 /** @brief Deletes all of the possible configuration parameters for a channel
  *
  *  @param[in] bus    - The bus object used for lookups
@@ -1619,6 +1647,31 @@
             channelCall<reconfigureVLAN>(channel, vlan);
             return responseSuccess();
         }
+        case LanParam::VLANPriority:
+        {
+             uint5_t reserved = 0;
+             uint3_t vlanPriority = 0;
+             if(req.unpack(vlanPriority) || req.unpack(reserved) || (!req.fullyUnpacked()))
+             {
+                  return responseReqDataLenInvalid();
+             }
+
+	     if(((uint32_t)vlanPriority) > 7)
+	     {
+		 return responseInvalidFieldRequest();
+	     }
+
+             if(reserved)
+             {
+	         return responseInvalidFieldRequest();
+             }
+
+             if(channelCall<setVLANPriority>(channel,(uint32_t)vlanPriority) != 0)
+             {
+                  return responseCommandNotAvailable();
+             }
+             return responseSuccess();
+        }
         case LanParam::CiphersuiteSupport:
         case LanParam::CiphersuiteEntries:
         case LanParam::IPFamilySupport:
@@ -1935,6 +1988,13 @@
             ret.pack(vlan);
             return responseSuccess(std::move(ret));
         }
+        case LanParam::VLANPriority:
+        {
+
+             uint32_t vlanPriority = channelCall<getVLANPriority>(channel);
+             ret.pack(vlanPriority);
+             return responseSuccess(ret);
+        }
         case LanParam::CiphersuiteSupport:
         {
             if (getChannelSessionSupport(channel) ==
--- a/transporthandler.hpp	2021-03-26 03:47:52.026305550 -0400
+++ b/transporthandler.hpp	2021-03-26 03:46:53.763287932 -0400
@@ -21,6 +21,7 @@
     Gateway1 = 12,
     Gateway1MAC = 13,
     VLANId = 20,
+    VLANPriority = 21,
     CiphersuiteSupport = 22,
     CiphersuiteEntries = 23,
     cipherSuitePrivilegeLevels = 24,
