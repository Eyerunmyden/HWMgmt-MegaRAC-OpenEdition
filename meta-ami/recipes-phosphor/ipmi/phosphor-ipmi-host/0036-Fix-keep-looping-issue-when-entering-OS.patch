--- a/host-cmd-manager.cpp	2021-02-22 13:14:14.533781367 +0530
+++ b/host-cmd-manager.cpp	2021-02-22 13:18:42.596626718 +0530
@@ -26,6 +26,9 @@
 constexpr auto HOST_STATE_PATH = "/xyz/openbmc_project/state/host0";
 constexpr auto HOST_STATE_INTERFACE = "xyz.openbmc_project.State.Host";
 constexpr auto HOST_TRANS_PROP = "RequestedHostTransition";
+constexpr const char* IPMI_PATH = "/xyz/openbmc_project/Ipmi/Channel/ipmi_kcs3";
+constexpr const char* IPMI_INTERFACE = "xyz.openbmc_project.Ipmi.Channel.SMS";
+
 
 // For throwing exceptions
 using namespace phosphor::logging;
@@ -106,6 +109,20 @@
         // `false` indicating Failure
         std::get<CallBack>(command)(ipmiCmdData, false);
     }
+
+    auto host = ::ipmi::getService(this->bus, IPMI_INTERFACE, IPMI_PATH);
+    auto method = this->bus.new_method_call(host.c_str(), IPMI_PATH,
+                                            IPMI_INTERFACE, "clearAttention");
+
+    try
+    {
+        auto reply = this->bus.call(method);
+    }
+    catch (sdbusplus::exception_t&)
+    {
+        log<level::ERR>("Error in clearing SMS attention");
+        elog<InternalFailure>();
+    }
 }
 
 // Called for alerting the host
@@ -115,8 +132,6 @@
     {
         log<level::DEBUG>("Asserting SMS Attention");
 
-        std::string IPMI_PATH("/org/openbmc/HostIpmi/1");
-        std::string IPMI_INTERFACE("org.openbmc.HostIpmi");
 
         auto host = ::ipmi::getService(this->bus, IPMI_INTERFACE, IPMI_PATH);
 
@@ -130,10 +145,9 @@
             log<level::ERR>("Error starting timer for control host");
             return;
         }
+     auto method = this->bus.new_method_call(host.c_str(), IPMI_PATH,
+                                                IPMI_INTERFACE, "setAttention");
 
-        auto method =
-            this->bus.new_method_call(host.c_str(), IPMI_PATH.c_str(),
-                                      IPMI_INTERFACE.c_str(), "setAttention");
         auto reply = this->bus.call(method);
 
         if (reply.is_method_error())
