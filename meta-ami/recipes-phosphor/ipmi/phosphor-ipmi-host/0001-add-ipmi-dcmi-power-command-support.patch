--- a/dcmihandler.cpp	2020-08-03 11:49:58.998967422 -0400
+++ b/dcmihandler.cpp	2020-08-07 19:18:27.478811998 -0400
@@ -681,7 +681,13 @@
      {3,
       {{"MandatoryPrimaryLanOOBSupport", 1, 0, 8},
        {"OptionalSecondaryLanOOBSupport", 2, 0, 8},
-       {"OptionalSerialOOBMTMODECapability", 3, 0, 8}}}}};
+       {"OptionalSerialOOBMTMODECapability", 3, 0, 8}}}},
+       {dcmi::DCMICapParameters::ENHANCED_SYSTEM_POWER_ATTRIBUTES,
+     {2,
+      {{"NumberOfRollingTimesPeriods", 1, 0, 8},
+       {"TimeDurationUnits", 2, 0, 6},
+   	   {"TimeDuration", 2, 6, 2}}}}
+   };
 
 ipmi_ret_t getDCMICapabilities(ipmi_netfn_t netfn, ipmi_cmd_t cmd,
                                ipmi_request_t request, ipmi_response_t response,
@@ -988,7 +994,8 @@
                         entry("POWER_SENSOR_FILE=%s", POWER_READING_SENSOR));
         elog<InternalFailure>();
     }
-
+    
+    /*
     auto data = nlohmann::json::parse(sensorFile, nullptr, false);
     if (data.is_discarded())
     {
@@ -996,7 +1003,7 @@
                         entry("POWER_SENSOR_FILE=%s", POWER_READING_SENSOR));
         elog<InternalFailure>();
     }
-
+    
     objectPath = data.value("path", "");
     if (objectPath.empty())
     {
@@ -1004,7 +1011,7 @@
                         entry("POWER_SENSOR_FILE=%s", POWER_READING_SENSOR));
         elog<InternalFailure>();
     }
-
+    */
     // Return default value if failed to read from D-Bus object
     int64_t power = 0;
     try
@@ -1182,9 +1189,11 @@
     }
 
     ipmi_ret_t rc = IPMI_CC_OK;
+    auto requestData =
+        reinterpret_cast<dcmi::GetPowerReadingRequest*>(request);
     auto responseData =
         reinterpret_cast<dcmi::GetPowerReadingResponse*>(response);
-
+    /*
     sdbusplus::bus::bus bus{ipmid_get_sd_bus_connection()};
     int64_t power = 0;
     try
@@ -1198,11 +1207,58 @@
                         entry("PROPERTY=%s", SENSOR_VALUE_PROP));
         return IPMI_CC_UNSPECIFIED_ERROR;
     }
-
+    */
     // TODO: openbmc/openbmc#2819
     // Minimum, Maximum, Average power, TimeFrame, TimeStamp,
     // PowerReadingState readings need to be populated
     // after Telemetry changes.
+
+    if((requestData->mode > dcmi::DCMIPowerReadingMode::MODE_ENHANCED_POWER_STATS) || (requestData->reserved2))
+      {
+	*data_len = 0;
+        log<level::ERR>("Invalid data fields");
+        return IPMI_CC_INVALID;
+      }
+
+    sdbusplus::bus::bus bus{ipmid_get_sd_bus_connection()};
+    int64_t power = 0;
+
+    switch(requestData->mode)
+      {
+	
+      case dcmi::DCMIPowerReadingMode::MODE_POWER_STATS:
+	if(requestData->modeAttribute != 0)
+	  {
+	    *data_len = 0;
+	    log<level::ERR>("Invalid data fields");
+	    return IPMI_CC_INVALID;
+	  }
+
+
+       // Get Time in milli seconds
+       try
+       {
+           power = getPowerReading(bus);
+       }
+       catch (InternalFailure& e)
+       {
+           log<level::ERR>("Error in reading power sensor value",
+                           entry("INTERFACE=%s", SENSOR_VALUE_INTF),
+                           entry("PROPERTY=%s", SENSOR_VALUE_PROP));
+           return IPMI_CC_UNSPECIFIED_ERROR;
+       }
+       break;
+   case dcmi::DCMIPowerReadingMode::MODE_ENHANCED_POWER_STATS:
+
+       // check if Rolling Average Time Period is allowed (only ones 
+       //   specified in DMCI Capability Parameter 5 are allowed)
+
+
+       break;
+   default:
+     return IPMI_CC_INVALID;
+   }
+    
     uint16_t totalPower = static_cast<uint16_t>(power);
     responseData->currentPower = totalPower;
     responseData->minimumPower = totalPower;

diff -Naur a/dcmihandler.hpp b/dcmihandler.hpp
--- a/dcmihandler.hpp   2020-08-03 11:49:58.998967422 -0400
+++ b/dcmihandler.hpp   2020-08-10 12:21:17.668104635 -0400
@@ -310,6 +310,7 @@
     MANDATORY_PLAT_ATTRIBUTES = 0x02,       //!< Mandatory Platform Attributes
     OPTIONAL_PLAT_ATTRIBUTES = 0x03,        //!< Optional Platform Attributes
     MANAGEABILITY_ACCESS_ATTRIBUTES = 0x04, //!< Manageability Access Attributes
+    ENHANCED_SYSTEM_POWER_ATTRIBUTES = 0x05 //!< Enhanced System Power Attributes
 };

 /** @struct GetDCMICapRequest
@@ -476,6 +477,16 @@
  */
 int64_t getPowerReading(sdbusplus::bus::bus& bus);

+/** @enum DCMIPowerReadingModes
+*
+* DCMI Power Reading Modes
+*/
+enum DCMIPowerReadingMode : uint8_t
+{
+   MODE_POWER_STATS = 0x01,            //!< Mode Power Stats
+   MODE_ENHANCED_POWER_STATS = 0x02    //!< Mode Enhanced Power Stats
+};
+
 /** @struct GetPowerReadingRequest
  *
  *  DCMI Get Power Reading command request.
@@ -485,6 +496,7 @@
 {
     uint8_t mode;          //!< Mode
     uint8_t modeAttribute; //!< Mode Attributes
+    uint8_t reserved2;     //!< Reserved2
 } __attribute__((packed));

 /** @struct GetPowerReadingResponse
@@ -502,8 +514,14 @@
     uint16_t averagePower;     //!< Average power over sampling duration
                                //!< in watts
     uint32_t timeStamp;        //!< IPMI specification based time stamp
-    uint32_t timeFrame;        //!< Statistics reporting time period in milli
-                               //!< seconds.
+                               //!< For Mode 02: Time Stamp specifies the end
+                               //!< of the averaging window
+    uint32_t timeFrame;        //!< Statistics reporting time
+                               //!< For Mode 01: timeframe in period in milli
+                                //!< seconds.
+                               //!< For Mode 02: Timeframe reflects the
+                               //!<   Averaging Time period unit
+                               //!< Averaging Time period unit
     uint8_t powerReadingState; //!< Power Reading State
 } __attribute__((packed));
