--- a/chassishandler.cpp	2021-03-08 22:04:37.277295695 +0530
+++ b/chassishandler.cpp	2021-03-08 22:04:56.825497311 +0530
@@ -28,7 +28,10 @@
 #include <sstream>
 #include <string>
 #include <xyz/openbmc_project/Common/error.hpp>
+#include <xyz/openbmc_project/Control/Boot/Mode/server.hpp>
+#include <xyz/openbmc_project/Control/Boot/Source/server.hpp>
 #include <xyz/openbmc_project/Control/Power/RestorePolicy/server.hpp>
+#include <xyz/openbmc_project/State/Chassis/server.hpp>
 #include <xyz/openbmc_project/State/Host/server.hpp>
 #include <xyz/openbmc_project/State/PowerOnHours/server.hpp>
 
@@ -557,7 +560,8 @@
 
     // Convert to string equivalent of the passed in transition enum.
     auto request = State::convertForMessage(transition);
-
+    
+    log<level::ERR>(request.c_str());
     rc = sd_bus_call_method(bus_type,                // On the system bus
                             busname,                 // Service to contact
                             HOST_STATE_MANAGER_ROOT, // Object path
@@ -585,6 +589,64 @@
 }
 
 //------------------------------------------
+// Calls into Chassis State Manager Dbus object
+//------------------------------------------
+int initiate_chassis_state_transition(State::Chassis::Transition transition)
+{
+    // OpenBMC Host State Manager dbus framework
+    constexpr auto CHASSIS_STATE_MANAGER_ROOT = "/xyz/openbmc_project/state/chassis0";
+    constexpr auto CHASSIS_STATE_MANAGER_IFACE = "xyz.openbmc_project.State.Chassis";
+    constexpr auto DBUS_PROPERTY_IFACE = "org.freedesktop.DBus.Properties";
+    constexpr auto PROPERTY = "RequestedPowerTransition";
+
+    // sd_bus error
+    int rc = 0;
+    char* busname = NULL;
+
+    // SD Bus error report mechanism.
+    sd_bus_error bus_error = SD_BUS_ERROR_NULL;
+
+    // Gets a hook onto either a SYSTEM or SESSION bus
+    sd_bus* bus_type = ipmid_get_sd_bus_connection();
+    rc = mapper_get_service(bus_type, CHASSIS_STATE_MANAGER_ROOT, &busname);
+    if (rc < 0)
+    {
+        log<level::ERR>(
+            "Failed to get bus name",
+            entry("ERRNO=0x%X, OBJPATH=%s", -rc, CHASSIS_STATE_MANAGER_ROOT));
+        return rc;
+    }
+
+    // Convert to string equivalent of the passed in transition enum.
+    auto request = State::convertForMessage(transition);
+log<level::ERR>(request.c_str());
+    rc = sd_bus_call_method(bus_type,                // On the system bus
+                            busname,                 // Service to contact
+                            CHASSIS_STATE_MANAGER_ROOT, // Object path
+                            DBUS_PROPERTY_IFACE,     // Interface name
+                            "Set",                   // Method to be called
+                            &bus_error,              // object to return error
+                            nullptr,                 // Response buffer if any
+                            "ssv",                   // Takes 3 arguments
+                            CHASSIS_STATE_MANAGER_IFACE, PROPERTY, "s",
+                            request.c_str());
+    if (rc < 0)
+    {
+        log<level::ERR>("Failed to initiate chassis transition",
+                        entry("ERRNO=0x%X, REQUEST=%s", -rc, request.c_str()));
+    }
+    else
+    {
+        log<level::INFO>("Chassis transition request initiated successfully");
+    }
+
+   sd_bus_error_free(&bus_error);
+    free(busname);
+
+    return rc;
+}
+
+//------------------------------------------
 // Set Enabled property to inform NMI source
 // handling to trigger a NMI_OUT BSOD.
 //------------------------------------------
@@ -1124,7 +1186,7 @@
                 indicate_no_softoff_needed();
 
                 // Now request the shutdown
-                rc = initiate_state_transition(State::Host::Transition::Off);
+                 rc = initiate_chassis_state_transition(State::Chassis::Transition::Off); 
             }
             else
             {
