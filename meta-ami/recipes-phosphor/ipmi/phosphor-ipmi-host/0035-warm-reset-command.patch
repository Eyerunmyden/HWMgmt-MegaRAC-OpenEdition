From 1a61cca1f1f803c43cdad052302ecd4c63888ef8 Mon Sep 17 00:00:00 2001
From: Ryon Heichelbech <ryonh@ami.com>
Date: Wed, 17 Feb 2021 15:14:06 -0500
Subject: [PATCH] warm reset command

---
 globalhandler.cpp               | 81 +++++++++++++++++++++++++++++++--
 host-ipmid-whitelist.conf       |  2 +
 phosphor-ipmi-host-ami.service  | 31 +++++++++++++
 phosphor-ipmi-warm-reset.target |  3 ++
 4 files changed, 114 insertions(+), 3 deletions(-)
 create mode 100644 phosphor-ipmi-host-ami.service
 create mode 100644 phosphor-ipmi-warm-reset.target

diff --git a/globalhandler.cpp b/globalhandler.cpp
index 37122b2..d522e8e 100644
--- a/globalhandler.cpp
+++ b/globalhandler.cpp
@@ -1,13 +1,18 @@
 #include "globalhandler.hpp"
 
+#include <atomic>
+#include <chrono>
 #include <ipmid/api.hpp>
 #include <ipmid/utils.hpp>
 #include <phosphor-logging/elog-errors.hpp>
 #include <phosphor-logging/log.hpp>
 #include <string>
+#include <thread>
 #include <xyz/openbmc_project/Common/error.hpp>
 #include <xyz/openbmc_project/State/BMC/server.hpp>
 
+static std::atomic_flag reset_queued = ATOMIC_FLAG_INIT;
+
 static constexpr auto bmcStateRoot = "/xyz/openbmc_project/state";
 static constexpr auto bmcStateIntf = "xyz.openbmc_project.State.BMC";
 static constexpr auto reqTransition = "RequestedBMCTransition";
@@ -18,6 +23,11 @@ using BMC = sdbusplus::xyz::openbmc_project::State::server::BMC;
 
 void register_netfn_global_functions() __attribute__((constructor));
 
+constexpr auto SYSTEMD_SERVICE = "org.freedesktop.systemd1";
+constexpr auto SYSTEMD_OBJ_PATH = "/org/freedesktop/systemd1";
+constexpr auto SYSTEMD_INTERFACE = "org.freedesktop.systemd1.Manager";
+constexpr auto SYSTEMD_WARM_RESET_TARGET = "phosphor-ipmi-warm-reset.target";
+
 void resetBMC()
 {
     sdbusplus::bus::bus bus{ipmid_get_sd_bus_connection()};
@@ -32,11 +42,11 @@ void resetBMC()
                           convertForMessage(BMC::Transition::Reboot));
 }
 
-/** @brief implements cold and warm reset commands
+/** @brief implements cold reset command
  *  @param - None
  *  @returns IPMI completion code.
  */
-ipmi::RspType<> ipmiGlobalReset()
+ipmi::RspType<> ipmiColdReset()
 {
     const char* filename = "/var/configuration/system.json";
 
@@ -58,12 +68,77 @@ ipmi::RspType<> ipmiGlobalReset()
     return ipmi::responseSuccess();
 }
 
+void warmResetBMC()
+{
+    try {
+        std::shared_ptr<sdbusplus::asio::connection> busp = getSdBus();
+        // Reset the failed units so we don't end up having systemd
+        // not properly restart if the command is spammed.
+        busp->async_method_call(
+            [](boost::system::error_code ec) {
+                if (ec)
+                {
+                    log<level::ERR>("Error in warm reset");
+                }
+                return;
+            },
+            SYSTEMD_SERVICE, SYSTEMD_OBJ_PATH, SYSTEMD_INTERFACE, "ResetFailed"
+        );
+        // Restart the target (restart will propagate to units).
+        busp->async_method_call(
+            [](boost::system::error_code ec) {
+                if (ec)
+                {
+                    log<level::ERR>("Error in warm reset");
+                }
+                return;
+            },
+            SYSTEMD_SERVICE, SYSTEMD_OBJ_PATH, SYSTEMD_INTERFACE, "RestartUnit",
+            SYSTEMD_WARM_RESET_TARGET, "replace"
+        );
+    }
+    catch (std::exception& e)
+    {
+        log<level::ERR>(e.what());
+    }
+}
+
+/** @brief implements warm reset command
+ *  @param - None
+ *  @returns IPMI completion code.
+ */
+ipmi::RspType<> ipmiWarmReset()
+{
+    try
+    {
+	if (!reset_queued.test_and_set()) {
+	    // Do this asynchronously so that we can properly return this command.
+	    std::thread t(warmResetBMC);
+	    t.detach();
+	}
+    }
+    catch (std::exception& e)
+    {
+	log<level::ERR>(e.what());
+	reset_queued.clear();
+	return ipmi::responseUnspecifiedError();
+    }
+
+    // Status code.
+    return ipmi::responseSuccess();
+}
+
 void register_netfn_global_functions()
 {
 
     // Cold Reset
     ipmi::registerHandler(ipmi::prioOpenBmcBase, ipmi::netFnApp,
                           ipmi::app::cmdColdReset, ipmi::Privilege::Admin,
-                          ipmiGlobalReset);
+                          ipmiColdReset);
+
+    // Warm Reset
+    ipmi::registerHandler(ipmi::prioOpenBmcBase, ipmi::netFnApp,
+                          ipmi::app::cmdWarmReset, ipmi::Privilege::Admin,
+                          ipmiWarmReset);
     return;
 }
diff --git a/host-ipmid-whitelist.conf b/host-ipmid-whitelist.conf
index 5397115..507df40 100644
--- a/host-ipmid-whitelist.conf
+++ b/host-ipmid-whitelist.conf
@@ -12,6 +12,8 @@
 0x04:0x2F    //<Sensor/Event>:<Get Sensor Type>
 0x04:0x30    //<Sensor/Event>:<Set Sensor Reading and Event Status>
 0x06:0x01    //<App>:<Get Device ID>
+0x06:0x02    //<App>:<Cold Reset>
+0x06:0x03    //<App>:<Warm Reset>
 0x06:0x04    //<App>:<Get Self Test Results>
 0x06:0x06    //<App>:<Set ACPI Power State>
 0x06:0x07    //<App>:<Get ACPI Power State>
diff --git a/phosphor-ipmi-host-ami.service b/phosphor-ipmi-host-ami.service
new file mode 100644
index 0000000..c2a1560
--- /dev/null
+++ b/phosphor-ipmi-host-ami.service
@@ -0,0 +1,31 @@
+[Unit]
+Description=Phosphor Inband IPMI
+# TODO openbmc/openbmc#2059 - The wants/after below should be based on providers
+Wants=mapper-wait@-xyz-openbmc_project-control-host0-boot.service
+After=mapper-wait@-xyz-openbmc_project-control-host0-boot.service
+Wants=mapper-wait@-xyz-openbmc_project-control-host0-boot-one_time.service
+After=mapper-wait@-xyz-openbmc_project-control-host0-boot-one_time.service
+Wants=mapper-wait@-xyz-openbmc_project-control-host0-power_restore_policy.service
+After=mapper-wait@-xyz-openbmc_project-control-host0-power_restore_policy.service
+Wants=mapper-wait@-xyz-openbmc_project-control-host0-restriction_mode.service
+After=mapper-wait@-xyz-openbmc_project-control-host0-restriction_mode.service
+Wants=clear-once.service
+After=clear-once.service
+After=org.openbmc.HostIpmi.service
+PartOf=phosphor-ipmi-warm-reset.target
+
+[Service]
+Restart=always
+ExecStart=/usr/bin/env ipmid
+SyslogIdentifier=ipmid
+RuntimeDirectory = ipmi
+RuntimeDirectoryPreserve = yes
+StateDirectory = ipmi
+Type=dbus
+BusName=xyz.openbmc_project.Control.Host
+StartLimitIntervalSec=0
+SuccessExitStatus=6
+
+[Install]
+WantedBy=multi-user.target
+Alias=xyz.openbmc_project.Control.Host.service
diff --git a/phosphor-ipmi-warm-reset.target b/phosphor-ipmi-warm-reset.target
new file mode 100644
index 0000000..f882153
--- /dev/null
+++ b/phosphor-ipmi-warm-reset.target
@@ -0,0 +1,3 @@
+[Unit]
+Description=IPMI service collection
+AllowIsolate=no
