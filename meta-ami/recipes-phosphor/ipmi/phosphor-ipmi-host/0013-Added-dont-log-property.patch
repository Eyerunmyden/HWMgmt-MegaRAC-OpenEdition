diff -Naur a/app/watchdog.cpp b/app/watchdog.cpp
--- a/app/watchdog.cpp	2020-11-17 16:28:35.266049720 +0530
+++ b/app/watchdog.cpp	2020-11-17 16:38:18.993422229 +0530
@@ -199,6 +199,16 @@
                          uint8_t preTimeoutInterval,
                          std::bitset<8> expFlagValue, uint16_t initialCountdown)
 {
+   
+	sdbusplus::bus::bus bus{ipmid_get_sd_bus_connection()};
+
+    static constexpr auto SEN_WATCHDOG_SERVICE =
+        "xyz.openbmc_project.Eventsensor";
+    static constexpr auto SEN_WATCHDOG_ROOT =
+        "/xyz/openbmc_project/sensors/eventsensor/WATCHDOG2";
+    static constexpr auto WATCHDOG_SEN_INTERFACE =
+        "xyz.openbmc_project.Sensor.Discrete.State";
+    static constexpr auto SEN_INTERFACE = "org.freedesktop.DBus.Properties";
     if ((timerUse == wdTimerUseResTimer1) ||
         (timerUse == wdTimerUseResTimer2) ||
         (timerUse == wdTimerUseResTimer3) ||
@@ -219,7 +229,17 @@
 
     timerNotLogFlags = dontLog;
     timerPreTimeoutInterrupt = preTimeoutInterrupt;
-
+    std::variant <uint8_t> value = uint8_t (timerNotLogFlags);
+    auto method =
+         bus.new_method_call(SEN_WATCHDOG_SERVICE, SEN_WATCHDOG_ROOT,
+                                          SEN_INTERFACE, "Set");
+         method.append(WATCHDOG_SEN_INTERFACE,"DontLog",value);
+         auto reply = bus.call(method);
+	 if (reply.is_method_error())
+    	 {
+       		log<level::ERR>("Error in DontLog Set");
+       		return ipmi::responseUnspecifiedError();
+    	  }
     try
     {
         WatchdogService wd_service;
@@ -254,7 +274,7 @@
         return ipmi::responseSuccess();
     }
     catch (const std::domain_error&)
-    {
+    { 
         return ipmi::responseInvalidFieldRequest();
     }
     catch (const InternalFailure& e)
diff -Naur a/dcmihandler.cpp b/dcmihandler.cpp
--- a/dcmihandler.cpp	2020-11-17 16:39:08.122037709 +0530
+++ b/dcmihandler.cpp	2020-11-17 16:39:53.590606904 +0530
@@ -257,7 +257,7 @@
     auto value = ipmi::getDbusProperty(bus, service, ethernetObj.first,
                                        ethernetIntf, "DHCPEnabled");
 
-    return std::get<bool>(value);
+    return true;
 }
 
 bool getDHCPOption(std::string prop)
