diff -Naur a/app/access-control/controllers/user-accounts-modal-settings.html b/app/access-control/controllers/user-accounts-modal-settings.html
--- a/app/access-control/controllers/user-accounts-modal-settings.html	2021-05-21 14:46:52.085395684 +0530
+++ b/app/access-control/controllers/user-accounts-modal-settings.html	2021-05-21 14:50:11.072677758 +0530
@@ -27,6 +27,42 @@
                   Value must be between <span class="nowrap">1 - 65535</span></span>
               </div>
             </div>
+
+            <div class="field-group-container">
+              <label for="PasswordPolicyHistory">Password Policy</label>
+              <p class="label__helper-text">Password Policy History </p>
+              <input id="PasswordPolicyHistory"
+                     name="PasswordPolicyHistory"
+                     type="number"
+                     required
+                     min="1"
+                     max="5"
+                     ng-model="modalCtrl.settings.PasswordPolicyHistory" />
+              <div ng-if="form.PasswordPolicyHistory.$invalid && form.PasswordPolicyHistory.$dirty" class="form__validation-message">
+                <span ng-show="form.PasswordPolicyHistory.$error.required">
+                  Field is required</span>
+                <span ng-show="form.PasswordPolicyHistory.$error.min || form.PasswordPolicyHistory.$error.max">
+                  Value must be between <span class="nowrap">1 - 5</span></span>
+              </div>
+            </div>
+
+            <div class="field-group-container">
+              <!-- <label for="PasswordPolicyHistory">Password Policy</label> -->
+              <p class="label__helper-text">Password Policy Complexity </p>
+              <input id="PasswordPolicyComplexity"
+                     name="PasswordPolicyComplexity"
+                     type="number"
+                     required
+                     min="0"
+                     max="3"
+                     ng-model="modalCtrl.settings.PasswordPolicyComplexity" />
+              <div ng-if="form.PasswordPolicyComplexity.$invalid && form.PasswordPolicyComplexity.$dirty" class="form__validation-message">
+                <span ng-show="form.PasswordPolicyComplexity.$error.required">
+                  Field is required</span>
+                <span ng-show="form.PasswordPolicyComplexity.$error.min || form.PasswordPolicyComplexity.$error.max">
+                  Value must be between <span class="nowrap">0 - 3</span></span>
+              </div>
+            </div>
         </div>
         <div class="column medium-6">
           <!-- User unlock method -->
diff -Naur a/app/access-control/controllers/user-accounts-modal-user.html b/app/access-control/controllers/user-accounts-modal-user.html
--- a/app/access-control/controllers/user-accounts-modal-user.html	2021-05-21 14:46:52.085395684 +0530
+++ b/app/access-control/controllers/user-accounts-modal-user.html	2021-05-21 14:50:36.500589077 +0530
@@ -113,7 +113,7 @@
                    type="password"
                    ng-minlength="modalCtrl.minPasswordLength"
                    ng-maxlength="modalCtrl.maxPasswordLength"
-                   ng-pattern="/^(?=.*[\w\d]).+/"
+                   ng-pattern="modalCtrl.check_pass_validation"
                    autocomplete="new-password"
                    ng-required="modalCtrl.user.new || form.password.$touched || form.passwordConfirm.$touched"
                    ng-model="modalCtrl.user.password"
diff -Naur a/app/access-control/controllers/user-controller.js b/app/access-control/controllers/user-controller.js
--- a/app/access-control/controllers/user-controller.js	2021-05-21 14:46:52.085395684 +0530
+++ b/app/access-control/controllers/user-controller.js	2021-05-21 14:53:00.228098046 +0530
@@ -265,8 +265,20 @@
        * @param {number} lockoutDuration
        * @param {number} lockoutThreshold
        */
-      function updateAccountSettings(lockoutDuration, lockoutThreshold) {
+      function updateAccountSettings(lockoutDuration, lockoutThreshold, password_policy_history, password_policy_complexity) {
         $scope.loading = true;
+        APIUtils.save_password_policy_history_api(password_policy_history).then(function(){
+          $scope.accountSettings['PasswordPolicyHistory'] = password_policy_history;
+        },function(){
+          toastService.error("Error in saving Password Policy History");
+        });
+
+        APIUtils.password_policy_complexity_api(password_policy_complexity).then(function(){
+          $scope.accountSettings['PasswordPolicyComplexity'] = password_policy_complexity;
+        },function(){
+          toastService.error("Error in saving Password Policy Complexity");
+        });
+
         APIUtils.saveUserAccountProperties(lockoutDuration, lockoutThreshold)
             .then(() => {
               $scope.accountSettings['AccountLockoutDuration'] =
@@ -303,6 +315,8 @@
                 this.settings = {};
                 this.settings.maxLogin =
                     $scope.accountSettings.AccountLockoutThreshold;
+                this.settings.PasswordPolicyHistory = $scope.accountSettings.PasswordPolicyHistory;
+                this.settings.PasswordPolicyComplexity = $scope.accountSettings.PasswordPolicyComplexity;
                 this.settings.lockoutMethod = lockoutMethod;
                 this.settings.timeoutDuration = !lockoutMethod ?
                     null :
@@ -316,7 +330,9 @@
                     form.timeoutDuration.$modelValue :
                     0;
                 const lockoutThreshold = form.maxLogin.$modelValue;
-                updateAccountSettings(lockoutDuration, lockoutThreshold);
+                const password_policy_history = form.PasswordPolicyHistory.$modelValue;
+                const password_policy_complexity = form.PasswordPolicyComplexity.$modelValue;
+                updateAccountSettings(lockoutDuration, lockoutThreshold, password_policy_history, password_policy_complexity);
               }
             })
             .catch(
@@ -387,6 +403,81 @@
                 this.maxPasswordLength = $scope.accountSettings ?
                     $scope.accountSettings.MaxPasswordLength :
                     null;
+                var pass_policy_complexity = $scope.accountSettings.PasswordPolicyComplexity;
+                console.log('pass_policy_complexity', pass_policy_complexity);
+
+                var that = this;
+                this.check_pass_validation = (function(){
+                  return {
+                    test: function(value){
+                      if(pass_policy_complexity == 0){
+                        if(/^(?=.*[\w\d]).+/.test(value)){
+                          return true;
+                        }
+                        return false;
+                      }
+
+                      if(pass_policy_complexity == 1){
+                        // Password Complexity LOW
+                        if(/([A-Z])/g.test(value) &&    // should contain upper case
+                            /([a-z])/g.test(value) &&   // should contain lower case
+                              /[0-9]/g.test(value) &&   // should contain number
+                                !(/\s/.test(value)) &&  // should not contain space
+                                  /([!@#\$%\^\&*\)\(\]\[\}\{+=.,?:;_-])/g.test(value) && value.length >= 6){  // should contain special character and minium of 6 characters
+                                    if(that.user.username != undefined && that.user.username != ''){
+                                      var uname_l = that.user.username.toLocaleLowerCase();
+                                      var val_l = value.toLocaleLowerCase();
+                                      return val_l.indexOf(uname_l) != -1 ? false : true; // should not contain username in password
+                                    }
+                          return true;
+                        }
+                      }
+
+                      if(pass_policy_complexity == 2){
+                        if(/([A-Z])/g.test(value) &&
+                            /([a-z])/g.test(value) &&
+                              /[0-9]/g.test(value) &&
+                                (/\s/.test(value) || /([!@#\$%\^\&*\)\(\]\[\}\{+=.,?:;_-])/g.test(value)) &&  // should contain special character or space
+                                  value.length >= 8){
+                                    if(that.user.username != undefined && that.user.username != ''){
+                                      var uname_l = that.user.username.toLocaleLowerCase();
+                                      var val_l = value.toLocaleLowerCase();
+                                      var uname_l_rev = uname_l.split("").reverse().join("");
+                                      if(val_l.indexOf(uname_l) != -1){
+                                        return false;
+                                      }
+                                      if(val_l.indexOf(uname_l_rev) != -1){
+                                        return false;
+                                      }
+                                      return true;
+                                    }
+                          return true;
+                        }
+                      }
+
+                      if(pass_policy_complexity == 3){
+                        if(/([A-Z])/g.test(value) &&    // should contain upper case
+                            /([a-z])/g.test(value) &&   // should contain lower case
+                              /[0-9]/g.test(value) &&   // should contain number
+                                !(/\s/.test(value)) &&  // should not contain space
+                                  !(/([a-zA-Z0-9])\1\1+|(abc|bcd|cde|def|efg|fgh|ghi|hij|ijk|jkl|klm|lmn|mno|nop|opq|pqr|qrs|rst|stu|tuv|uvw|vwx|wxy|xyz|012|123|234|345|456|567|678|789)+/ig.test(value)) &&  // should not contains continuous digits longer than 3 characters - should not contains continuous alphabets longer than 3 characters
+                                    /([!@#\$%\^\&*\)\(\]\[\}\{+=.,?:;_-])/g.test(value) && value.length >= 6){  // should contain special character and minium of 6 characters
+                                      if(that.user.username != undefined && that.user.username != ''){
+                                        var uname_l = that.user.username.toLocaleLowerCase();
+                                        var val_l = value.toLocaleLowerCase();
+                                        return val_l.indexOf(uname_l) != -1 ? false : true; // should not contain username in password
+                                      }
+                          return true;
+                        }
+                      }
+                      return false;
+                    }
+                  }
+                })();
+
+                this.close_the_modal = function(form){
+                  console.log("inside close modal",form, this);
+                }
               }
             })
             .result
diff -Naur a/app/access-control/directives/role-table.html b/app/access-control/directives/role-table.html
--- a/app/access-control/directives/role-table.html	2021-05-21 14:46:52.085395684 +0530
+++ b/app/access-control/directives/role-table.html	2021-05-21 14:53:33.071987974 +0530
@@ -12,4 +12,118 @@
                 size="'small'">
     </bmc-table>
   </div>
-</div>
\ No newline at end of file
+</div>
+
+<div class="role-table" ng-init="pass_desc_table = false">
+  <button class="btn btn-tertiary accordion-trigger"
+          ng-click="pass_desc_table = !pass_desc_table">
+    <icon file="icon-chevron-right.svg" aria-hidden="true"></icon>
+    <span ng-if="!pass_desc_table">View Password Policy descriptions</span>
+    <span ng-if="pass_desc_table">Hide Password Policy descriptions</span>
+  </button>
+  <div ng-if="pass_desc_table" class="ldap__configure-settings row column">
+    
+    <div class="large-3 column ldap__ssl-column disabled">
+      <ul>
+        <h3>Password History</h3>
+      </ul>
+    </div>
+    <div class="large-9 columns ldap__server-info">
+      <div>
+        <ul>
+          <li>Supports 1 to 5</li>
+        </ul>
+      </div>
+    </div>
+
+    <div class="large-3 column ldap__ssl-column disabled">
+      <ul>
+        <h3>Password Complexity </h3>
+      </ul>
+    </div>
+    <div class="large-9 columns ldap__server-info">
+      <div>
+        <ul>
+          <li>Supports 0 to 3</li>
+        </ul>
+      </div>
+    </div>
+    
+    <div class="large-3 column ldap__ssl-column disabled">
+      <ul>
+        <h3>0 - Disabled</h3>
+      </ul>
+    </div>
+    <div class="large-9 columns ldap__server-info">
+      <div>
+        <ul>
+          <li>Default Password validation.</li>
+        </ul>
+      </div>
+    </div>
+
+    <div class="large-3 column ldap__ssl-column disabled">
+      <ul>
+        <h3>1- Low</h3>
+      </ul>
+    </div>
+    <div class="large-9 columns ldap__server-info">
+      <div>
+        <ul>
+          <li>Contains printable characters only</li>
+          <li>Password length should not be shorter than 8 characters</li>
+          <li>Contains upper case (e.g. A, G)</li>
+          <li>Contains lower case (e.g. a, g)</li>
+          <li>Contains digit numbers (e.g. 1, 6)</li>
+          <li>Contains symbols (e.g. $, &)</li>
+          <li>Could not contains user name (case insensitive) (e.g., username=Hello, Password=th12(heLLo)_78 is not allowed)</li>
+        </ul>
+      </div>
+    </div>
+
+    <div class="large-3 column ldap__ssl-column disabled">
+      <ul>
+        <h3>2 - Medium</h3>
+      </ul>
+    </div>
+    <div class="large-9 columns ldap__server-info">
+      <div>
+        <ul>
+          <li>Contains printable characters only</li>
+          <li>Password length should not be shorter than 8 characters</li>
+          <li>Contains upper case (e.g. A, G)</li>
+          <li>Contains lower case (e.g. a, g)</li>
+          <li>Contains digit numbers (e.g. 1, 6)</li>
+          <li>Contains symbols (e.g. $, &)</li>
+          <li>Cannot be the same as the user name or the user name in reverse order.</li>
+          <li>Have at least two new characters when compared with the previous password</li>
+        </ul>
+      </div>
+    </div>
+  
+    <div class="large-3 column ldap__ssl-column disabled">
+      <ul>
+        <h3>3 - High</h3>
+      </ul>
+    </div>
+    <div class="large-9 columns ldap__server-info">
+      <div>
+        <ul>
+          <li>Contains printable characters only</li>
+          <li>Password length should not be shorter than 8 characters</li>
+          <li>Contains upper case (e.g. A, G)</li>
+          <li>Contains lower case (e.g. a, g)</li>
+          <li>Contains digit numbers (e.g. 1, 6)</li>
+          <li>Contains symbols (e.g. $, &)</li>
+          <li>Could not contains user name (case insensitive)</li>
+          <li>Could not contains continuous digits longer than 3 characters (e.g. BMC(123)ste, BMC(654)sfc are not allowed)</li>
+          <li>Could not contains continuous alphabets longer than 3 characters (e.g. (AbC)3478!, 57$(DeF)68k are not allowed))</li>
+          <li>Alphabets could no longer than 3 characters (e.g. (Fher)145! are not allowed))</li>
+          <li>Digits could no longer than 3 characters (e.g. Fgke(1245)#@, (4390)FGL$ are not allowed)</li>
+          <li>Contains no more than 3 same alphabets(case insensitive) (e.g. Fkr4fcpF&f (4 'f' or 'F'), Glg5gt2G! (4 'g' or 'G') are not allowed)</li>
+        </ul>
+      </div>
+    </div>
+
+  </div>
+</div>
diff -Naur a/app/common/services/api-utils.js b/app/common/services/api-utils.js
--- a/app/common/services/api-utils.js	2021-05-21 14:46:52.085395684 +0530
+++ b/app/common/services/api-utils.js	2021-05-21 14:54:04.411883594 +0530
@@ -782,6 +782,24 @@
               });
         },
 
+        save_password_policy_history_api : function(password_policy_history){
+          console.log('save_password_policy_history_api');
+          return $http({
+            method : 'PUT',
+            url : DataService.getHost() + '/xyz/openbmc_project/user/attr/PasswordPolicyHistory',
+            data: JSON.stringify({'data': password_policy_history})
+          });
+        },
+
+        password_policy_complexity_api : function(password_policy_complexity){
+          console.log('password_policy_complexity_api');
+          return $http({
+            method : 'PUT',
+            url : DataService.getHost() + '/xyz/openbmc_project/user/attr/PasswordPolicyComplexity',
+            data: JSON.stringify({'data': password_policy_complexity})
+          });
+        },
+
         saveUserAccountProperties: function(lockoutduration, lockoutthreshold) {
           var data = {};
           if (lockoutduration != undefined) {
