diff -Naur d/app/common/directives/app-header.js a/app/common/directives/app-header.js
--- d/app/common/directives/app-header.js	2020-08-17 23:50:41.261740055 +0530
+++ a/app/common/directives/app-header.js	2020-08-17 16:29:46.258256980 +0530
@@ -2,8 +2,8 @@
   'use strict';
 
   angular.module('app.common.directives').directive('appHeader', [
-    'APIUtils',
-    function(APIUtils) {
+    'APIUtils','dataService',
+    function(APIUtils,dataService) {
       return {
         'restrict': 'E',
         'template': require('./app-header.html'),
@@ -126,15 +126,32 @@
 
             loadData();
 
-            $scope.logout = function() {
-              userModel.logout(function(status, error) {
-                if (status) {
-                  $location.path('/logout');
-                } else {
-                  console.log(error);
-                }
-              });
-            };
+	$scope.logout = function() {
+		if(sessionStorage.getItem('VM_State') == 2)
+		{
+			var r = window.confirm("VMedia is Running , Do you want to stop or resume!");
+			if (r == true){
+				dataService.getLoggedOutVM();
+				userModel.logout(function(status, error) {
+					if (status) {
+	                		  $location.path('/logout');
+        	        		} else {
+                	  		  console.log(error);
+	                		}
+        	      		      });
+				      }
+		}
+		else{
+			
+			userModel.logout(function(status, error) {
+			if (status) {
+                  	  $location.path('/logout');
+                	} else {
+                  	  console.log(error);
+                	}
+              	      });
+		    }
+		};
 
             $scope.refresh = function() {
               // reload current page controllers and header
diff -Naur d/app/common/services/api-utils.js a/app/common/services/api-utils.js
--- d/app/common/services/api-utils.js	2020-08-17 23:50:41.333740704 +0530
+++ a/app/common/services/api-utils.js	2020-08-17 23:51:33.654213714 +0530
@@ -586,6 +586,19 @@
           return deferred.promise;
         },
 
+        getUserRole: function(username) {
+          return $http({
+                                    method: 'GET',
+                  url: DataService.getHost() + '/redfish/v1/AccountService/Accounts/' + username,
+                  withCredentials: true
+                })
+            .then(
+              function(response) {
+                sessionStorage.setItem("ROLE", response.data["RoleId"]);
+              });
+        },
+
+
         getAllUserAccountProperties: function() {
           return $http({
                    method: 'GET',
diff -Naur d/app/common/services/dataService.js a/app/common/services/dataService.js
--- d/app/common/services/dataService.js	2020-08-17 23:50:41.337740740 +0530
+++ a/app/common/services/dataService.js	2020-08-17 16:32:06.215565910 +0530
@@ -11,8 +11,8 @@
   'use strict';
 
   angular.module('app.common.services').service('dataService', [
-    'Constants',
-    function(Constants) {
+    'Constants','nbdServerService','$rootScope',	
+    function(Constants,nbdServerService,$rootScope) {
       this.server_health = Constants.SERVER_HEALTH.unknown;
       this.server_state = 'Unreachable';
       this.LED_state = Constants.LED_STATE_TEXT.off;
@@ -110,6 +110,35 @@
       this.setSystemName = function(sysName) {
         this.systemName = sysName;
       };
+      this.getLoggedOutVM = function(){
+	var vmDevice = {};
+	this.devices = [];
+	vmDevice.id = 0;
+	
+	vmDevice.deviceName = 'Virtual media device';
+	this.findExistingConnectionService(vmDevice);
+	this.devices.push(vmDevice);
+	this.devices[sessionStorage.getItem('VM_Index')].isActive = false;
+	var server = this.devices[sessionStorage.getItem('VM_Index')].nbdServer;	
+	server.stop();
+	this.devices[sessionStorage.getItem('VM_Index')].file = '';
+      }
+
+     this.findExistingConnectionService = function(vmDevice) {
+        // Checks with existing connections kept in nbdServerService for an open
+        // Websocket connection.
+        var existingConnectionsMap = nbdServerService.getExistingConnections();
+        if (existingConnectionsMap.hasOwnProperty(vmDevice.id)) {
+          // Open ws will have a ready state of 1
+          if (existingConnectionsMap[vmDevice.id].server.ws.readyState === 1) {
+            vmDevice.isActive = true;
+            vmDevice.file = existingConnectionsMap[vmDevice.id].file;
+            vmDevice.nbdServer = existingConnectionsMap[vmDevice.id].server;
+          }
+        }
+        return vmDevice;
+      }
+
     }
   ]);
 })(window.angular);
diff -Naur d/app/common/services/userModel.js a/app/common/services/userModel.js
--- d/app/common/services/userModel.js	2020-08-17 23:50:41.341740776 +0530
+++ a/app/common/services/userModel.js	2020-08-17 23:51:39.590267519 +0530
@@ -20,6 +20,7 @@
                 (response.status == APIUtils.API_RESPONSE.SUCCESS_STATUS ||
                  response.status === undefined)) {
               sessionStorage.setItem('LOGIN_ID', username);
+	      APIUtils.getUserRole(username);
               callback(true);
             } else if (
                 response && response.data && response.data.data &&
diff -Naur d/app/server-control/controllers/virtual-media-controller.js a/app/server-control/controllers/virtual-media-controller.js
--- d/app/server-control/controllers/virtual-media-controller.js	2020-08-17 23:50:41.669743734 +0530
+++ a/app/server-control/controllers/virtual-media-controller.js	2020-08-17 18:40:54.542002984 +0530
@@ -30,9 +30,16 @@
       $scope.devices.push(vmDevice);
 
       $scope.startVM = function(index) {
+	if(sessionStorage.getItem('ROLE') != "Administrator"){
+	   if ($scope.devices[index].isActive == true){
+	   	$scope.devices[index].isActive = false;}
+	   window.alert("Vmedia can't access in  " + sessionStorage.getItem('ROLE'));
+	}
+	else {
         APIUtils.getNBDInstance().then(
           function(instance){
             if(instance == false) {
+	       sessionStorage.setItem("VM_Index",index);
                $scope.devices[index].isActive = true;
                var file = $scope.devices[index].file;
                var id = $scope.devices[index].id;
@@ -54,6 +61,7 @@
             $log.error(JSON.stringify(error));
             return $q.reject();
           });
+	}
       };
 
       $scope.stopVM = function(index) {
@@ -86,6 +94,7 @@
            });
       }
 
+/*
       function findExistingConnection(vmDevice) {
         // Checks with existing connections kept in nbdServerService for an open
         // Websocket connection.
@@ -99,7 +108,10 @@
           }
         }
         return vmDevice;
-      }
+      }*/
+	function findExistingConnection(vmDevice) {
+		return dataService.findExistingConnectionService(vmDevice);
+	}
     }
   ]);
 })(angular);
@@ -147,6 +159,7 @@
   this.start = function() {
     this.ws = new WebSocket(this.endpoint, [token]);
     this.state = NBD_STATE_OPEN;
+    sessionStorage.setItem("VM_State",this.state);
     this.ws.binaryType = 'arraybuffer';
     this.ws.onmessage = this._on_ws_message.bind(this);
     this.ws.onopen = this._on_ws_open.bind(this);
@@ -165,12 +178,14 @@
 
   this._on_ws_close = function(ev) {
     /* Check if the user has directly ejected the
-    * image from the Host Machine.*/
+     * image from the Host Machine.*/
+    this.state = NBD_STATE_UNKNOWN;
+    sessionStorage.setItem("VM_State",this.state);
     var scope = angular.element(document.getElementById('VmWrap')).scope();
     scope.$apply(function(){
       scope.isEjected(0);
     });
-    this.state = NBD_STATE_UNKNOWN;
+//    this.state = NBD_STATE_UNKNOWN;
 
     console.log(
         'vm/0/' + id + ' closed with code: ' + ev.code +
