diff -Naur a/app/common/directives/app-header.js b/app/common/directives/app-header.js
--- a/app/common/directives/app-header.js	2020-12-23 18:49:48.152708861 +0530
+++ b/app/common/directives/app-header.js	2020-12-23 18:52:16.927690886 +0530
@@ -131,32 +131,51 @@
 
             loadData();
 
-	$scope.logout = function() {
-		if(sessionStorage.getItem('VM_State') == 2)
+	    function do_LogOut() {
+	       userModel.logout(function(status, error) {
+	       			   if (status) {
+	       			     $location.path('/logout');
+               			   } else {
+               			     console.log(error);
+	       			   }
+                     		});
+	    }
+
+	    $scope.logout = function() {
+	        var ret;
+		if ((dataService.KVM_window_obj != null) && (sessionStorage.getItem('VM_State') == 2))
 		{
-			var r = window.confirm("VMedia is Running , Do you want to stop or resume!");
-			if (r == true){
-				dataService.getLoggedOutVM();
-				userModel.logout(function(status, error) {
-					if (status) {
-	                		  $location.path('/logout');
-        	        		} else {
-                	  		  console.log(error);
-	                		}
-        	      		      });
-				      }
+	    	     ret = window.confirm ("KVM and Virtual Media Sesions are running, If you logout the Web Session then both the Sessions will also gets closed!\nDo you want to logout or continue ?");
+                     if (ret == true) {
+		             dataService.KVM_window_obj.close();	
+		             dataService.KVM_window_obj = null;
+			     sessionStorage.setItem("KVM_Win_State",0);
+	    	     	     dataService.getLoggedOutVM();
+		     	     do_LogOut();
+		     }
 		}
-		else{
-			
-			userModel.logout(function(status, error) {
-			if (status) {
-                  	  $location.path('/logout');
-                	} else {
-                  	  console.log(error);
-                	}
-              	      });
-		    }
-		};
+		else if (dataService.KVM_window_obj != null)
+	    	{
+	    	     ret = window.confirm ("KVM Sesion is running, If you logout the Web Session then KVM Session will also gets closed!\nDo you want to logout or continue ?");
+                     if (ret == true) {
+		             dataService.KVM_window_obj.close();	
+		             dataService.KVM_window_obj = null;
+			     sessionStorage.setItem("KVM_Win_State",0);
+		             do_LogOut();
+	    	     }
+	    	}
+	    	else if (sessionStorage.getItem('VM_State') == 2)
+	    	{
+	    	     ret = window.confirm ("Virtual Media Session is running, If you logout the Web Session then Virtual Media session will also gets closed\nDo you want to logout or continue ?");
+	    	     if (ret == true){
+	    	     	     dataService.getLoggedOutVM();
+		     	     do_LogOut();
+		     }
+	    	}
+	    	else{
+		     do_LogOut();
+	    	}
+	    };
 
             $scope.refresh = function() {
               // reload current page controllers and header
diff -Naur a/app/common/services/dataService.js b/app/common/services/dataService.js
--- a/app/common/services/dataService.js	2020-12-23 18:49:48.156708939 +0530
+++ b/app/common/services/dataService.js	2020-12-23 18:51:11.746363529 +0530
@@ -203,6 +203,10 @@
           return true;
         }
       }
+    
+      // Create a KVM Window Object,
+      // for handling the kvm window at the time of logout.  
+      this.KVM_window_obj = null;
     }
   ]);
 })(window.angular);
diff -Naur a/app/server-control/directives/kvm-console.js b/app/server-control/directives/kvm-console.js
--- a/app/server-control/directives/kvm-console.js	2020-12-23 18:49:48.184709483 +0530
+++ b/app/server-control/directives/kvm-console.js	2020-12-23 18:53:43.509497228 +0530
@@ -97,9 +97,19 @@
                   rfb.disconnect();
                 }
 
-                window.open(
+                var kvm_window = window.open(
                     '#/server-control/kvm-window', 'Kvm Window',
                     'directories=no,titlebar=no,toolbar=no,location=no,status=no,menubar=no,scrollbars=no,resizable=yes,width=800,height=600');
+		// Store the kvm window object and add a timer event to it,
+		// which will handle the kvm window close event.
+		dataService.KVM_window_obj = kvm_window;
+
+		var interval = setInterval(function() { 
+		    if(kvm_window.closed) {
+		        clearInterval(interval);
+			dataService.KVM_window_obj = null;
+		    }
+		}, 1000);
               };
             }
       }
