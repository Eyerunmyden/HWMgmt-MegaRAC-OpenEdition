diff -Naur a/app/common/services/api-utils.js b/app/common/services/api-utils.js
--- a/app/common/services/api-utils.js	2020-11-23 15:36:22.517584241 +0530
+++ b/app/common/services/api-utils.js	2020-11-23 15:39:20.097771726 +0530
@@ -1977,6 +1977,15 @@
             withCredentials: true,
             data: JSON.stringify({'data': []})
           })
+        },
+        setInterfaceName_to_bke: function(InterfaceName) {
+          return $http({
+            method: 'PUT',
+            url: DataService.getHost() + 
+              '/xyz/openbmc_project/VirtualMedia/Nbd/NetworkIface/attr/NwIfaceName',
+            withCredentials: true,
+            data: JSON.stringify({'data': InterfaceName})
+          });
         }
       };
       return SERVICE;
diff -Naur a/app/common/services/dataService.js b/app/common/services/dataService.js
--- a/app/common/services/dataService.js	2020-11-23 15:36:22.517584241 +0530
+++ b/app/common/services/dataService.js	2020-11-23 15:39:39.322418494 +0530
@@ -31,6 +31,7 @@
 
       this.ignoreHttpError = false;
       this.systemName = '';
+      this.logged_interface_name = '';
       this.userErrors = {
         "The request failed due to an internal service error.  The service is still operational.": "which is currently logged-in from other browser"
       }
diff -Naur a/app/overview/controllers/system-overview-controller.js b/app/overview/controllers/system-overview-controller.js
--- a/app/overview/controllers/system-overview-controller.js	2020-11-23 15:36:22.581585683 +0530
+++ b/app/overview/controllers/system-overview-controller.js	2020-11-23 15:40:33.280199642 +0530
@@ -101,10 +101,28 @@
 
         var getNetworkInfoPromise = APIUtils.getNetworkInfo().then(
             function(data) {
+              console.log("network ", data);
               // TODO: openbmc/openbmc#3150 Support IPV6 when
               // officially supported by the backend
               $scope.bmc_ip_addresses = data.formatted_data.ip_addresses.ipv4;
               $scope.newHostname = data.hostname;
+              
+              var all_interfaces = data.formatted_data.interfaces;
+              for (var each_interface in all_interfaces){
+                var tmp_add_check = all_interfaces[each_interface].ipv4.values;
+                var break_flag = false;
+                if(tmp_add_check.length > 0){
+                    for(var i=0;i<tmp_add_check.length;i++){
+                        if(window.location.host == tmp_add_check[i].Address){
+                            dataService.logged_interface_name = each_interface;
+                            break_flag = true;
+                        }
+                    }
+                }
+                if(break_flag){
+                    break;
+                }
+            }
             },
             function(error) {
               console.log(JSON.stringify(error));
diff -Naur a/app/server-control/controllers/virtual-media-controller.js b/app/server-control/controllers/virtual-media-controller.js
--- a/app/server-control/controllers/virtual-media-controller.js	2020-11-23 15:36:22.597586043 +0530
+++ b/app/server-control/controllers/virtual-media-controller.js	2020-11-23 15:42:34.780047597 +0530
@@ -26,7 +26,9 @@
       // device IDs and names.
       vmDevice.id = 0;
       vmDevice.deviceName = 'Virtual media device';
+
       findExistingConnection(vmDevice);
+      getInterfaceName();
       $scope.devices.push(vmDevice);
 
       $scope.startVM = function(index) {
@@ -127,7 +129,18 @@
       }*/
 	function findExistingConnection(vmDevice) {
 		return dataService.findExistingConnectionService(vmDevice);
-	}
+  }
+  function getInterfaceName(){
+    console.log("get interface function", dataService.logged_interface_name);
+    setInterfaceName(dataService.logged_interface_name);
+  }
+  function setInterfaceName(interface_name){
+    APIUtils.setInterfaceName_to_bke(interface_name).then(
+      function(Status){
+        console.log("Vmedia set interface status", Status);
+      }
+    );
+  }
     }
   ]);
 })(angular);
