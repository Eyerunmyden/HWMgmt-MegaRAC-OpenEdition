diff -Naur a/include/discrete_event_monitor.hpp b/include/discrete_event_monitor.hpp
--- a/include/discrete_event_monitor.hpp	2021-01-20 14:44:51.633491456 +0530
+++ b/include/discrete_event_monitor.hpp	2021-01-20 14:43:21.635356538 +0530
@@ -12,16 +12,32 @@
 #include <string_view>
 #include <variant>
 #include <map>
-
 enum class discreteEventOffsets : uint8_t
 {
     state0 = 0x00,
     state1 = 0x01,
 };
 
+enum class EventTypeCode : uint8_t
+{
+    generic = 0x3,
+    sensor_specific = 0x6f,
+};
+
+
 /* Map a event-byte to it's name */
-const std::map<std::uint8_t, std::map<bool, std::string>> EVENT_TABLE = {
-    {0x03, {{true, "Asserted"},{false, "Deasserted"}}}};
+const std::map<std::uint8_t, std::map<uint8_t, std::string>> SENSOR_SPECIFIC_EVENT_TABLE = {
+    {0x0C, {{0x00, ".CorrectableECC"},{0x01, ".UncorrectableECC"},{0x02, ".Parity"},{0x03,".MemoryScrubFailed"},{0x04,".MemoryDeviceDisabled"},{0x05,".CorrectableECClogging"},{0x06,".PresenceDetected"},{0x07,".ConfigurationError"},{0x08,".Spare"},{0x09,".Throttled"},{0x0a,".CriticalOvertemp"}}},
+    {0x0D, {{0x00,".DrivePresent"},{0x01,".DriveFault"},{0x02,".PredictiveFailure"},{0x03,".HotSpare"},{0x04,".ParityCheck"},{0x05,".InCriticalArray"},{0x06,".InFailedArray"},{0x07,".RebuildInProgress"},{0x08,".RebuildAborted"}}},
+    {0x05, {{0x00,".GenChassisIntrusion"},{0x01,".DriveBayIntrusion"},{0x02,".IOCardAreaIntrusion"},{0x03,".ProcessorAreaIntrusion"},{0x04,".LanLost"},{0x05,".UnauthorizedDock"},{0x06,".FanAreaIntrusion"}}},
+    {0x10, {{0x00,".Correctablememoryerror"},{0x01,".Eventloggingdisabled"},{0x02,".Logareareset"},{0x03,".Alleventloggingdisabled"},{0x04,".Logfull"},{0x05,".Logalmostfull"}}},
+    {0x22, {{0x00,".S0_G0"},{0x01,".S1"},{0x02,".S2"},{0x03,".S3"},{0x04,".S4"},{0x05,".S5_G2"},{0x06,".S4_S5"},{0x07,".G3"},{0x08,".S1_S2_S3"},{0x09,".G1"},{0x0a,".S5"},{0x0b,".LegacyOn"},{0x0c,".LegacyOff"},{0x0e,".ACPI_Unknown"}}},
+    {0x23, {{0x00,".Timerexpired"},{0x01,".Hardreset"},{0x02,".Powerdown"},{0x03,".Powercycle"},{0x08,".Timerinterrupt"}}}};
+
+const std::map<std::uint8_t, std::map<uint8_t, std::string>> GENERIC_EVENT_TABLE = {
+        {0x07, {{0x00,".ActiveStateLow"},{0x01,".ActiveStateHigh"}}},
+        {0x01, {{0x00,".ActiveStateLow"},{0x01,".ActiveStateHigh"}}}};
+
 
 static constexpr const uint8_t discreteEventDataTriggerReadingByte2 = (1 << 6);
 static constexpr const uint8_t discreteEventDataTriggerReadingByte3 = (1 << 4);
@@ -93,8 +109,8 @@
 	}
 
         // Indicate that bytes 2 and 3 are threshold sensor trigger values
-        eventData[0] |= discreteEventDataTriggerReadingByte2 |
-                        discreteEventDataTriggerReadingByte3;
+       // eventData[0] |= discreteEventDataTriggerReadingByte2 |
+         //               discreteEventDataTriggerReadingByte3;
 
         // Get the sensor reading to put in the event data
         sdbusplus::message::message getSensorValue =
@@ -125,7 +141,7 @@
                 std::visit(ipmi::VariantToDoubleVisitor(), findVal->second);
         }
 
-        auto findSenType = sensorValue.find("DType");
+        auto findSenType = sensorValue.find("SensorType");
         if (findSenType != sensorValue.end())
         {
             sensorType = std::get<uint8_t>(findSenType->second);
@@ -151,11 +167,25 @@
         std::string state;
         std::string redfishMessageID =
             "OpenBMC." + openBMCMessageRegistryVersion;
-	//auto offset = EVENT_TABLE.find(eventType)->second;
-	//state = offset.find(assert)->second;
+
+	if(eventType == static_cast<uint8_t>(EventTypeCode::generic))
+	{
+		auto offset = GENERIC_EVENT_TABLE.find(sensorType)->second;
+		state = offset.find(eventData[0])->second;
+	}
+	else if(eventType == static_cast<uint8_t>(EventTypeCode::sensor_specific))
+	{
+		auto offset = SENSOR_SPECIFIC_EVENT_TABLE.find(sensorType)->second;
+                state = offset.find(eventData[0])->second;
+	}
+	redfishMessageID += state;
+
+	// Indicate that bytes 2 and 3 are threshold sensor trigger values
+        eventData[0] |= discreteEventDataTriggerReadingByte2 |
+                        discreteEventDataTriggerReadingByte3;
         //if (assert)
         //{
-           redfishMessageID += ".ActiveStateHigh";
+           //redfishMessageID += ".ActiveStateHigh";
         //}
         //else
         //{
