diff -Naur a/src/CPUSensorMain.cpp b/src/CPUSensorMain.cpp
--- a/src/CPUSensorMain.cpp	2021-03-19 18:33:51.542453136 +0530
+++ b/src/CPUSensorMain.cpp	2021-03-19 19:05:24.294193787 +0530
@@ -303,17 +303,6 @@
             std::cerr << "No temperature sensors in system\n";
             continue;
         }
-	auto findSensorUnit = baseConfiguration->second.find("Unit");
-	std::string sensorUnit;
-        if (findSensorUnit == baseConfiguration->second.end())
-        {
-            std::cerr << "could not determine configuration Unit " << "\n";
-        }
-	else
-	{
-         sensorUnit = std::get<std::string>(findSensorUnit->second);
-	}
-
         auto findEvStat = baseConfiguration->second.find("EvStat");
 	 uint16_t EvStat;
        if (findEvStat == baseConfiguration->second.end())
@@ -387,8 +376,20 @@
                                            findThrOffset->second);
                 }
             }
+
+	    auto findSensorUnit = baseConfiguration->second.find(type + "_Unit");
+            std::string sensorUnit;
+            if (findSensorUnit == baseConfiguration->second.end())
+            {
+            	std::cerr << "could not determine configuration Unit " << "\n";
+            }
+            else
+            {
+                sensorUnit = std::get<std::string>(findSensorUnit->second);
+            }
+
              struct sdr::SdrRecord sdrRecord;
-                   if( !parseSdrRecordFromConfig(*sensorData ,sdrRecord))
+                   if( !parseSdrRecordFromConfig(*sensorData ,sdrRecord, &type))
             {
                std::cerr << "error getting sdr record for " << sensorName << std::endl;
             }
diff -Naur a/src/Utils.cpp b/src/Utils.cpp
--- a/src/Utils.cpp	2021-03-19 18:33:51.542453136 +0530
+++ b/src/Utils.cpp	2021-03-19 19:06:48.890796536 +0530
@@ -137,6 +137,72 @@
     return biosHasPost;
 }
 
+static void
+    getPowerStatus(const std::shared_ptr<sdbusplus::asio::connection>& conn,
+                   size_t retries = 2)
+{
+    conn->async_method_call(
+        [conn, retries](boost::system::error_code ec,
+                        const std::variant<std::string>& state) {
+            if (ec)
+            {
+                if (retries)
+                {
+                    auto timer = std::make_shared<boost::asio::steady_timer>(
+                        conn->get_io_context());
+                    timer->expires_after(std::chrono::seconds(15));
+                    timer->async_wait(
+                        [timer, conn, retries](boost::system::error_code) {
+                            getPowerStatus(conn, retries - 1);
+                        });
+                    return;
+                }
+
+                // we commonly come up before power control, we'll capture the
+                // property change later
+                std::cerr << "error getting power status " << ec.message()
+                          << "\n";
+                return;
+            }
+            powerStatusOn =
+                boost::ends_with(std::get<std::string>(state), "Running");
+        },
+        power::busname, power::path, properties::interface, properties::get,
+        power::interface, power::property);
+}
+
+static void
+    getPostStatus(const std::shared_ptr<sdbusplus::asio::connection>& conn,
+                  size_t retries = 2)
+{
+    conn->async_method_call(
+        [conn, retries](boost::system::error_code ec,
+                        const std::variant<std::string>& state) {
+            if (ec)
+            {
+                if (retries)
+                {
+                    auto timer = std::make_shared<boost::asio::steady_timer>(
+                        conn->get_io_context());
+                    timer->expires_after(std::chrono::seconds(15));
+                    timer->async_wait(
+                        [timer, conn, retries](boost::system::error_code) {
+                            getPostStatus(conn, retries - 1);
+                        });
+                    return;
+                }
+                // we commonly come up before power control, we'll capture the
+                // property change later
+                std::cerr << "error getting post status " << ec.message()
+                          << "\n";
+                return;
+            }
+            biosHasPost = std::get<std::string>(state) != "Inactive";
+        },
+        post::busname, post::path, properties::interface, properties::get,
+        post::interface, post::property);
+}
+
 void setupPowerMatch(const std::shared_ptr<sdbusplus::asio::connection>& conn)
 {
     static boost::asio::steady_timer timer(conn->get_io_context());
@@ -203,34 +269,8 @@
             }
         });
 
-    conn->async_method_call(
-        [](boost::system::error_code ec,
-           const std::variant<std::string>& state) {
-            if (ec)
-            {
-                // we commonly come up before power control, we'll capture the
-                // property change later
-                return;
-            }
-            powerStatusOn =
-                boost::ends_with(std::get<std::string>(state), "Running");
-        },
-        power::busname, power::path, properties::interface, properties::get,
-        power::interface, power::property);
-
-    conn->async_method_call(
-        [](boost::system::error_code ec,
-           const std::variant<std::string>& state) {
-            if (ec)
-            {
-                // we commonly come up before power control, we'll capture the
-                // property change later
-                return;
-            }
-            biosHasPost = std::get<std::string>(state) != "Inactive";
-        },
-        post::busname, post::path, properties::interface, properties::get,
-        post::interface, post::property);
+    getPowerStatus(conn);
+    getPostStatus(conn);
 }
 
 // replaces limits if MinReading and MaxReading are found.
