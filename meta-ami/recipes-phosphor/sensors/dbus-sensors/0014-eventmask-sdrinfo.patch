diff -Naur a/include/ChassisIntrusionSensor.hpp b/include/ChassisIntrusionSensor.hpp
--- a/include/ChassisIntrusionSensor.hpp	2020-11-23 20:16:09.971942336 +0530
+++ b/include/ChassisIntrusionSensor.hpp	2020-11-23 22:15:49.616734805 +0530
@@ -23,12 +23,12 @@
     ~ChassisIntrusionSensor();
 
     void start(IntrusionSensorType type, int busId, int slaveAddr,
-              bool gpioInverted, uint8_t dtype, uint8_t eventType, uint8_t evStat,
-              uint8_t sdrVersion,uint8_t recordType, uint8_t recordLen,uint8_t ownerId,uint8_t ownerLun,
-              uint8_t entityId,uint8_t entityInstance, uint8_t sensorInit,uint8_t sensorCap,uint8_t sensorType,
-              uint8_t sensorUnit1,uint8_t modifierUnit,uint8_t maxReading,uint8_t minReading,uint8_t sensorUnit2,
-              uint8_t linearization,uint8_t nominalReading,uint8_t normalMax,uint8_t normalMin,
-              uint8_t positiveHysteris,uint8_t negativeHysteresis,uint8_t idStringLen);
+              bool gpioInverted, uint8_t dtype, uint8_t eventType, uint8_t evStat, uint16_t assertEventMask, 
+	      uint16_t deassertEventMask, uint8_t sdrVersion,uint8_t recordType, uint8_t recordLen,
+	      uint8_t ownerId,uint8_t ownerLun, uint8_t entityId,uint8_t entityInstance, uint8_t sensorInit,
+	      uint8_t sensorCap,uint8_t sensorType, uint8_t sensorUnit1,uint8_t modifierUnit,uint8_t maxReading,
+	      uint8_t minReading,uint8_t sensorUnit2, uint8_t linearization,uint8_t nominalReading,uint8_t normalMax,
+	      uint8_t normalMin,uint8_t positiveHysteris,uint8_t negativeHysteresis,uint8_t idStringLen);
 
 
   private:
@@ -55,6 +55,7 @@
            msensorUnit1,mmodifierUnit,mmaxReading,mminReading,msensorUnit2,
            mlinearization,mnominalReading,mnormalMax,mnormalMin,
            mpositiveHysteris,mnegativeHysteresis,midStringLen;
+    uint16_t massertEventMask, mdeassertEventMask;
     std::string mPinName = "CHASSIS_INTRUSION";
     gpiod::line mGpioLine;
     boost::asio::posix::stream_descriptor mGpioFd;
diff -Naur a/include/SdrRecord.hpp b/include/SdrRecord.hpp
--- a/include/SdrRecord.hpp	2020-11-23 20:16:09.971942336 +0530
+++ b/include/SdrRecord.hpp	2020-11-23 21:14:26.345762942 +0530
@@ -17,6 +17,8 @@
         uint8_t SensorCap;
         uint8_t SensorType;
         uint8_t EventType;
+	uint16_t AssertEventMask;
+	uint16_t DeassertEventMask;
         uint8_t SensorUnit1;
         uint8_t SensorUnit2;
         uint8_t ModifierUnit;
diff -Naur a/include/sensor.hpp b/include/sensor.hpp
--- a/include/sensor.hpp	2020-11-23 20:16:09.975942366 +0530
+++ b/include/sensor.hpp	2020-11-23 21:22:36.984100460 +0530
@@ -36,7 +36,8 @@
 	 RecordType(sdrRecord.RecordType),RecordLen(sdrRecord.RecordLen),OwnerId(sdrRecord.OwnerId),
        OwnerLun(sdrRecord.OwnerLun),EntityId(sdrRecord.EntityId),EntityInstance(sdrRecord.EntityInstance),
        SensorInit(sdrRecord.SensorInit),SensorCap(sdrRecord.SensorCap),SensorType(sdrRecord.SensorType),
-       EventType(sdrRecord.EventType),SensorUnit1(sdrRecord.SensorUnit1),ModifierUnit(sdrRecord.ModifierUnit),
+       EventType(sdrRecord.EventType),AssertEventMask(sdrRecord.AssertEventMask),DeassertEventMask(sdrRecord.DeassertEventMask),
+       SensorUnit1(sdrRecord.SensorUnit1),ModifierUnit(sdrRecord.ModifierUnit),
        MaxReading(sdrRecord.MaxReading),MinReading(sdrRecord.MinReading),SensorUnit2(sdrRecord.SensorUnit2),
        Linearization(sdrRecord.Linearization),NominalReading(sdrRecord.NominalReading),NormalMax(sdrRecord.NormalMax),
        NormalMin(sdrRecord.NormalMin),PositiveHysteris(sdrRecord.PositiveHysteris),
@@ -62,6 +63,8 @@
     uint8_t SensorCap;
     uint8_t SensorType;
     uint8_t EventType;
+    uint16_t AssertEventMask;
+    uint16_t DeassertEventMask;
     uint8_t SensorUnit1;
     uint8_t SensorUnit2;
     uint8_t ModifierUnit;
@@ -134,6 +137,8 @@
         sensorInterface->register_property("SensorCap",SensorCap );
         sensorInterface->register_property("SensorType",SensorType );
         sensorInterface->register_property("EventType",EventType );
+	sensorInterface->register_property("AssertEventMask",AssertEventMask );
+	sensorInterface->register_property("DeassertEventMask",DeassertEventMask );
         sensorInterface->register_property("SensorUnit1", SensorUnit1 );
         sensorInterface->register_property("SensorUnit2", SensorUnit2 );
         sensorInterface->register_property("ModifierUnit", ModifierUnit );
@@ -399,9 +404,11 @@
 	SdrVersion(sdrRecord.SdrVersion),RecordType(sdrRecord.RecordType),RecordLen(sdrRecord.RecordLen),
 	OwnerId(sdrRecord.OwnerId),OwnerLun(sdrRecord.OwnerLun),EntityId(sdrRecord.EntityId),
 	EntityInstance(sdrRecord.EntityInstance),SensorInit(sdrRecord.SensorInit),SensorCap(sdrRecord.SensorCap),
-	SensorType(sdrRecord.SensorType),EventType(sdrRecord.EventType),SensorUnit1(sdrRecord.SensorUnit1),
-	ModifierUnit(sdrRecord.ModifierUnit),MaxReading(sdrRecord.MaxReading),MinReading(sdrRecord.MinReading),
-	SensorUnit2(sdrRecord.SensorUnit2),Linearization(sdrRecord.Linearization),NominalReading(sdrRecord.NominalReading),
+	SensorType(sdrRecord.SensorType),EventType(sdrRecord.EventType),AssertEventMask(sdrRecord.AssertEventMask),
+	DeassertEventMask(sdrRecord.DeassertEventMask),SensorUnit1(sdrRecord.SensorUnit1),
+	ModifierUnit(sdrRecord.ModifierUnit),MaxReading(sdrRecord.MaxReading),
+	MinReading(sdrRecord.MinReading),SensorUnit2(sdrRecord.SensorUnit2),Linearization(sdrRecord.Linearization),
+	NominalReading(sdrRecord.NominalReading),
 	NormalMax(sdrRecord.NormalMax),NormalMin(sdrRecord.NormalMin),PositiveHysteris(sdrRecord.PositiveHysteris),
 	NegativeHysteresis(sdrRecord.NegativeHysteresis),IdStringLen(sdrRecord.IdStringLen)
     {
@@ -426,6 +433,8 @@
     uint8_t SensorCap;
     uint8_t SensorType;
     uint8_t EventType;
+    uint16_t AssertEventMask;
+    uint16_t DeassertEventMask;
     uint8_t SensorUnit1;
     uint8_t SensorUnit2;
     uint8_t ModifierUnit;
@@ -490,6 +499,8 @@
         sensorInterface->register_property("SensorCap",SensorCap );
         sensorInterface->register_property("SensorType",SensorType );
 //        sensorInterface->register_property("EventType",EventType );
+	sensorInterface->register_property("AssertEventMask",AssertEventMask );
+        sensorInterface->register_property("DeassertEventMask",DeassertEventMask );
         sensorInterface->register_property("SensorUnit1", SensorUnit1 );
         sensorInterface->register_property("SensorUnit2", SensorUnit2 );
         sensorInterface->register_property("ModifierUnit", ModifierUnit );
diff -Naur a/src/ChassisIntrusionSensor.cpp b/src/ChassisIntrusionSensor.cpp
--- a/src/ChassisIntrusionSensor.cpp	2020-11-23 20:15:48.867788680 +0530
+++ b/src/ChassisIntrusionSensor.cpp	2020-11-23 22:12:33.034777963 +0530
@@ -281,7 +281,8 @@
 
 void ChassisIntrusionSensor::start(IntrusionSensorType type, int busId,
                                   int slaveAddr, bool gpioInverted, uint8_t dtype, uint8_t eventType, uint8_t evStat,
-				  uint8_t sdrVersion,uint8_t recordType, uint8_t recordLen,uint8_t ownerId,uint8_t ownerLun,uint8_t entityId,
+				  uint16_t assertEventMask, uint16_t deassertEventMask, uint8_t sdrVersion,uint8_t recordType, 
+				  uint8_t recordLen,uint8_t ownerId,uint8_t ownerLun,uint8_t entityId,
 				  uint8_t entityInstance, uint8_t sensorInit,uint8_t sensorCap,uint8_t sensorType,
          			  uint8_t sensorUnit1,uint8_t modifierUnit,uint8_t maxReading,uint8_t minReading,
                                   uint8_t sensorUnit2,uint8_t linearization,uint8_t nominalReading,uint8_t normalMax,
@@ -321,6 +322,8 @@
     mdtype = dtype;
     meventType = eventType;
     mevStat = evStat;
+    massertEventMask = assertEventMask;
+    mdeassertEventMask = deassertEventMask;
     msdrVersion = sdrVersion;
     mrecordType = recordType;
     mrecordLen = recordLen;
@@ -364,6 +367,8 @@
            mIface->register_property("DType", mdtype);
            mIface->register_property("EventType", meventType);
            mIface->register_property("EvStat", mevStat);
+	   mIface->register_property("AssertEventMask", massertEventMask);
+	   mIface->register_property("DeassertEventMask", mdeassertEventMask);
            mIface->register_property("SdrVersion",msdrVersion );
            mIface->register_property("RecordType", mrecordType );
            mIface->register_property("RecordLen",mrecordLen );
diff -Naur a/src/IntrusionSensorMain.cpp b/src/IntrusionSensorMain.cpp
--- a/src/IntrusionSensorMain.cpp	2020-11-23 20:15:48.871788708 +0530
+++ b/src/IntrusionSensorMain.cpp	2020-11-23 22:06:58.055703279 +0530
@@ -57,7 +57,7 @@
     std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
     IntrusionSensorType* pType, int* pBusId, int* pSlaveAddr,
     bool* pGpioInverted, uint8_t *pDtype, uint8_t *pEventType, uint8_t *pEvState,
-    uint8_t *psdrVersion,
+    uint16_t *pAssertEventMask, uint16_t *pDeassertEventMask, uint8_t *psdrVersion,
     uint8_t *precordType,uint8_t *precordLen, uint8_t *pownerId,uint8_t *pownerLun,
     uint8_t *pentityId,uint8_t *pentityInstance,uint8_t *psensorInit,uint8_t *psensorCap,
     uint8_t *psensorType,uint8_t *psensorUnit1,uint8_t *pmodifierUnit,
@@ -145,6 +145,8 @@
                     findEvState->second);*/
                std::visit(VariantToUnsignedIntVisitor(), findEvState->second);
 
+	       *pAssertEventMask = sdrRecord.AssertEventMask;
+	       *pDeassertEventMask = sdrRecord.DeassertEventMask;
 	       *psdrVersion = sdrRecord.SdrVersion;
                *precordType = sdrRecord.RecordType;
                *precordLen = sdrRecord.RecordLen;
@@ -500,6 +502,7 @@
             entityInstance,sensorInit,sensorCap,SensorType,
             sensorUnit1,sensorUnit2,modifierUnit,maxReading,minReading,linearization,
            nominalReading,normalMax,normalMin,positiveHysteris,negativeHysteresis,idStringLen;
+    uint16_t AssertEventMask, DeassertEventMask;
     IntrusionSensorType type = IntrusionSensorType::gpio;
 
     // setup connection to dbus
@@ -523,7 +526,7 @@
     ChassisIntrusionSensor chassisIntrusionSensor(io, ifaceChassis, ifaceDiscrete);
 
     if (getIntrusionSensorConfig(systemBus, &type, &busId, &slaveAddr,
-                                 &gpioInverted, &dtype, &eventType, &evStat,
+                                 &gpioInverted, &dtype, &eventType, &evStat, &AssertEventMask, &DeassertEventMask,
                          	  &sdrVersion,&recordType,&recordLen,&ownerId,&ownerLun,
                                &entityId,&entityInstance,&sensorInit,&sensorCap,&SensorType,
                                 &sensorUnit1,&modifierUnit,&maxReading,&minReading,&sensorUnit2,
@@ -531,9 +534,10 @@
                                 &negativeHysteresis,&idStringLen))
 
     {
-        chassisIntrusionSensor.start(type, busId, slaveAddr, gpioInverted, dtype, eventType, evStat,sdrVersion,
-			             recordType,recordLen,ownerId,ownerLun,entityId,entityInstance,sensorInit,sensorCap,
-				     SensorType,sensorUnit1,modifierUnit,maxReading,minReading,sensorUnit2,linearization,nominalReading,
+        chassisIntrusionSensor.start(type, busId, slaveAddr, gpioInverted, dtype, eventType, evStat,AssertEventMask,
+				     DeassertEventMask, sdrVersion, recordType,recordLen,ownerId,ownerLun,entityId,
+				     entityInstance,sensorInit,sensorCap,SensorType,sensorUnit1,modifierUnit,maxReading,
+				     minReading,sensorUnit2,linearization,nominalReading,
 				     normalMax,normalMin,positiveHysteris,negativeHysteresis, idStringLen);
     }
 
@@ -548,7 +552,7 @@
 
             std::cout << "rescan due to configuration change \n";
             if (getIntrusionSensorConfig(systemBus, &type, &busId, &slaveAddr,
-                                         &gpioInverted, &dtype, &eventType, &evStat ,
+                                         &gpioInverted, &dtype, &eventType, &evStat , &AssertEventMask, &DeassertEventMask,
 					 &sdrVersion,&recordType,&recordLen,&ownerId,&ownerLun,
                                          &entityId,&entityInstance,&sensorInit,&sensorCap,&SensorType,
                                          &sensorUnit1,&modifierUnit,&maxReading,&minReading,&sensorUnit2,
@@ -557,7 +561,7 @@
 
             {
                 chassisIntrusionSensor.start(type, busId, slaveAddr,
-                                             gpioInverted, dtype, eventType, evStat ,
+                                             gpioInverted, dtype, eventType, evStat , AssertEventMask, DeassertEventMask,
 					     sdrVersion,recordType,recordLen,ownerId,ownerLun,entityId,
                                              entityInstance,sensorInit,sensorCap,SensorType,sensorUnit1,
                                              modifierUnit,maxReading,minReading, sensorUnit2,linearization,
diff -Naur a/src/PSUEvent.cpp b/src/PSUEvent.cpp
--- a/src/PSUEvent.cpp	2020-11-23 20:15:48.867788680 +0530
+++ b/src/PSUEvent.cpp	2020-11-23 22:48:21.366658737 +0530
@@ -48,6 +48,8 @@
         "xyz.openbmc_project.Sensor.Value");
 
     SenInterface->register_property("EventType",EventType);
+    SenInterface->register_property("AssertEventMask",sdrRecord.AssertEventMask );
+    SenInterface->register_property("DeassertEventMask",sdrRecord.DeassertEventMask );
     SenInterface->register_property("DType", DType);
     SenInterface->register_property("EvStat", EvStat);
     SenInterface->register_property("SensorStat", false);
diff -Naur a/src/PwmSensor.cpp b/src/PwmSensor.cpp
--- a/src/PwmSensor.cpp	2020-11-23 20:15:48.871788708 +0530
+++ b/src/PwmSensor.cpp	2020-11-23 21:57:30.904093452 +0530
@@ -99,6 +99,8 @@
     sensorInterface->register_property("SensorCap",sdrRecord_t.SensorCap);
     sensorInterface->register_property("SensorType",sdrRecord_t.SensorType);
     sensorInterface->register_property("EventType",sdrRecord_t.EventType);
+    sensorInterface->register_property("AssertEventMask",sdrRecord_t.AssertEventMask );
+    sensorInterface->register_property("DeassertEventMask",sdrRecord_t.DeassertEventMask );
     sensorInterface->register_property("SensorUnit1", sdrRecord_t.SensorUnit1);
     sensorInterface->register_property("SensorUnit2", sdrRecord_t.SensorUnit2);
     sensorInterface->register_property("ModifierUnit", sdrRecord_t.ModifierUnit);
diff -Naur a/src/SdrRecord.cpp b/src/SdrRecord.cpp
--- a/src/SdrRecord.cpp	2020-11-23 20:15:48.871788708 +0530
+++ b/src/SdrRecord.cpp	2020-11-23 23:31:47.441840703 +0530
@@ -41,6 +41,8 @@
         auto SensorCapFind = item.second.find("SensorCap");
         auto SensorTypeFind = item.second.find("SensorType");
         auto EventTypeFind = item.second.find("EventType");
+	auto AssertEventMaskFind = item.second.find("AssertEventMask");
+	auto DeassertEventMaskFind = item.second.find("DeassertEventMask");
         auto SensorUnit1Find = item.second.find("SensorUnit1");
         auto SensorUnit2Find = item.second.find("SensorUnit2");
         auto ModifierUnitFind = item.second.find("ModifierUnit");
@@ -60,9 +62,10 @@
              OwnerLunFind == item.second.end() || entityidFind == item.second.end() ||
              EntityInstanceFind == item.second.end() || SensorInitFind == item.second.end() ||
              SensorCapFind ==  item.second.end() || SensorTypeFind == item.second.end() ||
-             EventTypeFind == item.second.end() || SensorUnit2Find  == item.second.end() ||
-             ModifierUnitFind == item.second.end() || MaxReadingFind == item.second.end() ||
-             MinReadingFind == item.second.end() || LinearizationFind == item.second.end() ||
+             EventTypeFind == item.second.end() || AssertEventMaskFind == item.second.end() ||
+	     DeassertEventMaskFind == item.second.end() || SensorUnit2Find  == item.second.end() || 
+	     ModifierUnitFind == item.second.end() || MaxReadingFind == item.second.end() || 
+	     MinReadingFind == item.second.end() || LinearizationFind == item.second.end() ||
             NominalReadingFind == item.second.end() ||SensorUnit1Find == item.second.end() ||
             NormalMaxFind == item.second.end() || NormalMinFind == item.second.end() ||
             PositiveHysterisFind == item.second.end () || NegativeHysteresisFind == item.second.end () ||
@@ -84,6 +87,8 @@
         sdrRecord.SensorCap = std::visit(VariantToUnsignedIntVisitor(),SensorCapFind->second);
         sdrRecord.SensorType = std::visit(VariantToUnsignedIntVisitor(),SensorTypeFind->second);
         sdrRecord.EventType = std::visit(VariantToUnsignedIntVisitor(),EventTypeFind->second);
+	sdrRecord.AssertEventMask = std::visit(VariantToUnsignedIntVisitor(),AssertEventMaskFind->second);
+	sdrRecord.DeassertEventMask = std::visit(VariantToUnsignedIntVisitor(),DeassertEventMaskFind->second);
         sdrRecord.SensorUnit1 = std::visit(VariantToUnsignedIntVisitor(),SensorUnit1Find->second);
         sdrRecord.SensorUnit2 = std::visit(VariantToUnsignedIntVisitor(),SensorUnit2Find->second);
         sdrRecord.ModifierUnit = std::visit(VariantToUnsignedIntVisitor(),ModifierUnitFind->second);
