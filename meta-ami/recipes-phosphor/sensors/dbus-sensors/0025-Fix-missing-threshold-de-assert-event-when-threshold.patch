diff -Naur a/include/Thresholds.hpp b/include/Thresholds.hpp
--- a/include/Thresholds.hpp	2021-03-01 20:12:07.876618915 +0530
+++ b/include/Thresholds.hpp	2021-03-01 20:13:33.052692574 +0530
@@ -45,6 +45,10 @@
 void assertThresholds(Sensor* sensor, double assertValue,
                       thresholds::Level level, thresholds::Direction direction,
                       bool assert);
+void forceDeassertThresholds(Sensor* sensor, thresholds::Level level,
+                             thresholds::Direction direction);
+
+
 
 struct TimerUsed
 {
diff -Naur a/src/ADCSensor.cpp b/src/ADCSensor.cpp
--- a/src/ADCSensor.cpp	2021-03-01 20:14:26.848753523 +0530
+++ b/src/ADCSensor.cpp	2021-03-01 20:17:09.900994450 +0530
@@ -79,6 +79,19 @@
     association = objectServer.add_interface(
         "/xyz/openbmc_project/sensors/voltage/" + name, association::interface);
     setInitialProperties(conn);
+
+
+    // Destructor can be called when sensor interface changes
+    // like a new threshold value. Ensure thresholds are de-asserted
+    // on construction. These events can be missed if the new threshold
+    // value fixes the alarm because default state for new threshold
+    // interface is de-asserted.
+    for (auto& threshold : thresholds)
+    {
+        thresholds::forceDeassertThresholds(this, threshold.level,
+                                            threshold.direction);
+    }
+
 }
 
 ADCSensor::~ADCSensor()
diff -Naur a/src/Thresholds.cpp b/src/Thresholds.cpp
--- a/src/Thresholds.cpp	2021-03-01 20:14:26.816753483 +0530
+++ b/src/Thresholds.cpp	2021-03-01 20:19:26.281247691 +0530
@@ -440,6 +440,68 @@
     }
 }
 
+void forceDeassertThresholds(Sensor* sensor, thresholds::Level level,
+                             thresholds::Direction direction)
+{
+    std::string property;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> interface;
+    if (level == thresholds::Level::WARNING &&
+        direction == thresholds::Direction::HIGH)
+    {
+        property = "WarningAlarmHigh";
+        interface = sensor->thresholdInterfaceWarning;
+   }
+    else if (level == thresholds::Level::WARNING &&
+             direction == thresholds::Direction::LOW)
+    {
+        property = "WarningAlarmLow";
+        interface = sensor->thresholdInterfaceWarning;
+    }
+    else if (level == thresholds::Level::CRITICAL &&
+             direction == thresholds::Direction::HIGH)
+    {
+        property = "CriticalAlarmHigh";
+        interface = sensor->thresholdInterfaceCritical;
+    }
+    else if (level == thresholds::Level::CRITICAL &&
+             direction == thresholds::Direction::LOW)
+    {
+        property = "CriticalAlarmLow";
+        interface = sensor->thresholdInterfaceCritical;
+     }
+    else
+    {
+        std::cerr << "Unknown threshold, level " << level << "direction "
+                  << direction << "\n";
+        return;
+    }
+    if (!interface)
+    {
+        std::cout << "trying to set uninitialized interface\n";
+        return;
+    }
+
+    if (interface->set_property<bool, false>(property, false))
+    {
+        try
+        {
+            // msg.get_path() is interface->get_object_path()
+            sdbusplus::message::message msg =
+                interface->new_signal("ThresholdAsserted");
+
+            msg.append(sensor->name, interface->get_interface_name(), property,
+                       false, sensor->value);
+            msg.signal_send();
+        }
+        catch (const sdbusplus::exception::exception& e)
+        {
+            std::cerr << "Failed to send thresholdAsserted signal from forced "
+                         "de-assert\n";
+        }
+    }
+}
+
+
 bool parseThresholdsFromAttr(
     std::vector<thresholds::Threshold>& thresholdVector,
     const std::string& inputPath, const double& scaleFactor,
