diff -Naur a/include/sensor.hpp b/include/sensor.hpp
--- a/include/sensor.hpp	2021-03-02 13:22:35.472548732 +0530
+++ b/include/sensor.hpp	2021-03-02 13:23:24.700729269 +0530
@@ -86,6 +86,7 @@
     std::shared_ptr<sdbusplus::asio::dbus_interface> availableInterface;
     std::shared_ptr<sdbusplus::asio::dbus_interface> operationalInterface;
     double value = std::numeric_limits<double>::quiet_NaN();
+    double rawValue = std::numeric_limits<double>::quiet_NaN();
     bool overriddenState = false;
     bool internalSet = false;
     double hysteresisTrigger;
diff -Naur a/src/ADCSensor.cpp b/src/ADCSensor.cpp
--- a/src/ADCSensor.cpp	2021-03-02 13:24:13.004908717 +0530
+++ b/src/ADCSensor.cpp	2021-03-02 13:24:22.920945817 +0530
@@ -179,9 +179,8 @@
         // todo read scaling factors from configuration
         try
         {
-            double nvalue = std::stod(response);
-
-            nvalue = (nvalue / sensorScaleFactor) / scaleFactor;
+            rawValue = std::stod(response);
+            double nvalue = (rawValue / sensorScaleFactor) / scaleFactor;
             nvalue = std::round(nvalue * roundFactor) / roundFactor;
 
             updateValue(nvalue);
@@ -205,6 +204,7 @@
     int fd = open(path.c_str(), O_RDONLY);
     if (fd < 0)
     {
+        std::cerr << "adcsensor " << name << " failed to open " << path << "\n";
         return; // we're no longer valid
     }
     inputDev.assign(fd);
@@ -213,6 +213,15 @@
         std::shared_ptr<ADCSensor> self = weakRef.lock();
         if (ec == boost::asio::error::operation_aborted)
         {
+            if (self)
+            {
+                std::cerr << "adcsensor " << self->name << " read cancelled\n";
+            }
+            else
+            {
+                std::cerr << "adcsensor read cancelled no self\n";
+            }
+
             return; // we're being canceled
         }
 
@@ -220,6 +229,11 @@
         {
             self->setupRead();
         }
+        else
+        {
+            std::cerr << "adcsensor weakref no self\n";
+        }
+
     });
 }
 
diff -Naur a/src/CPUSensor.cpp b/src/CPUSensor.cpp
--- a/src/CPUSensor.cpp	2021-03-02 13:24:13.004908717 +0530
+++ b/src/CPUSensor.cpp	2021-03-02 13:24:22.920945817 +0530
@@ -206,10 +206,9 @@
         try
         {
             std::getline(responseStream, response);
-            double nvalue = std::stod(response);
+	    rawValue = std::stod(response);
             responseStream.clear();
-            nvalue /= CPUSensor::sensorScaleFactor;
-
+            double nvalue = rawValue / CPUSensor::sensorScaleFactor;
             if (show)
             {
                 updateValue(nvalue);
diff -Naur a/src/HwmonTempSensor.cpp b/src/HwmonTempSensor.cpp
--- a/src/HwmonTempSensor.cpp	2021-03-02 13:24:13.004908717 +0530
+++ b/src/HwmonTempSensor.cpp	2021-03-02 13:24:22.920945817 +0530
@@ -105,6 +105,8 @@
     if ((err == boost::system::errc::bad_file_descriptor) ||
         (err == boost::asio::error::misc_errors::not_found))
     {
+       std::cerr << "Hwmon temp sensor " << name << " removed " << path
+                  << "\n";
         return; // we're being destroyed
     }
     std::istream responseStream(&readBuf);
@@ -114,16 +116,16 @@
         std::getline(responseStream, response);
         try
         {
-            double nvalue = std::stod(response);
-            if (nvalue < 0)
+            rawValue = std::stod(response);
+            if (rawValue < 0)
             {
                 std::cerr << "Hwmon temp sensor " << name
-                          << ": ignore negative rawValue " << nvalue << "\n";
+                          << ": ignore negative rawValue " << rawValue << "\n";
                 incrementError();
             }
             else
             {
-                nvalue /= sensorScaleFactor;
+		double nvalue = rawValue / sensorScaleFactor;
                 updateValue(nvalue);
             }
 
@@ -143,6 +145,9 @@
     int fd = open(path.c_str(), O_RDONLY);
     if (fd < 0)
     {
+       std::cerr << "Hwmon temp sensor " << name << " not valid " << path
+                  << "\n";
+
         return; // we're no longer valid
     }
     inputDev.assign(fd);
@@ -152,6 +157,16 @@
         std::shared_ptr<HwmonTempSensor> self = weakRef.lock();
         if (ec == boost::asio::error::operation_aborted)
         {
+           if (self)
+            {
+                std::cerr << "Hwmon temp sensor " << self->name
+                          << " read cancelled " << self->path << "\n";
+            }
+            else
+            {
+                std::cerr << "Hwmon sensor read cancelled, no self\n";
+            }
+
             return; // we're being canceled
         }
         if (self)
diff -Naur a/src/IpmbSensor.cpp b/src/IpmbSensor.cpp
--- a/src/IpmbSensor.cpp	2021-03-02 13:24:13.004908717 +0530
+++ b/src/IpmbSensor.cpp	2021-03-02 13:24:22.920945817 +0530
@@ -333,6 +333,19 @@
                     return;
                 }
 
+                else
+                {
+                    // rawValue only used in debug logging
+                    // up to 5th byte in data are used to derive value
+                    size_t end = std::min(sizeof(uint64_t), data.size());
+                    uint64_t rawData = 0;
+                    for (size_t i = 0; i < end; i++)
+                    {
+                        reinterpret_cast<uint8_t*>(&rawData)[i] = data[i];
+                    }
+                    rawValue = static_cast<double>(rawData);
+                }
+
                 /* Adjust value as per scale and offset */
                 value = (value * scaleVal) + offsetVal;
                 updateValue(value);
diff -Naur a/src/PSUSensor.cpp b/src/PSUSensor.cpp
--- a/src/PSUSensor.cpp	2021-03-02 13:24:13.000908703 +0530
+++ b/src/PSUSensor.cpp	2021-03-02 13:24:22.920945817 +0530
@@ -142,9 +142,9 @@
         try
         {
             std::getline(responseStream, response);
-            double nvalue = std::stod(response);
+	    rawValue = std::stod(response);
             responseStream.clear();
-            nvalue /= sensorFactor;
+            double nvalue = rawValue / sensorFactor; 
 
             updateValue(nvalue);
         }
diff -Naur a/src/TachSensor.cpp b/src/TachSensor.cpp
--- a/src/TachSensor.cpp	2021-03-02 13:24:13.000908703 +0530
+++ b/src/TachSensor.cpp	2021-03-02 13:24:22.916945802 +0530
@@ -147,9 +147,9 @@
             try
             {
                 std::getline(responseStream, response);
-                double nvalue = std::stod(response);
+                rawValue = std::stod(response); 
                 responseStream.clear();
-                updateValue(nvalue);
+                updateValue(rawValue);
             }
             catch (const std::invalid_argument&)
             {
diff -Naur a/src/Thresholds.cpp b/src/Thresholds.cpp
--- a/src/Thresholds.cpp	2021-03-02 13:24:13.004908717 +0530
+++ b/src/Thresholds.cpp	2021-03-02 13:24:22.920945817 +0530
@@ -244,6 +244,7 @@
 static int cLoFalse = 0;
 static int cLoMidstate = 0;
 static int cDebugThrottle = 0;
+static constexpr int assertLogCount = 10;
 
 struct ChangeParam
 {
@@ -276,7 +277,13 @@
             if (value >= threshold.value)
             {
                 thresholdChanges.emplace_back(threshold, true, value);
-                ++cHiTrue;
+		if (++cHiTrue < assertLogCount)
+                {
+                    std::cerr << "Sensor " << sensor->name << " high threshold "
+                              << threshold.value << " assert: value " << value
+                              << " raw data " << sensor->rawValue << "\n";
+                }
+
             }
             else if (value < (threshold.value - sensor->hysteresisTrigger))
             {
@@ -293,7 +300,14 @@
             if (value <= threshold.value)
             {
                 thresholdChanges.emplace_back(threshold, true, value);
-                ++cLoTrue;
+                if (++cLoTrue < assertLogCount)
+                {
+                    std::cerr << "Sensor " << sensor->name << " low threshold "
+                              << threshold.value << " assert: value "
+                              << sensor->value << " raw data "
+                              << sensor->rawValue << "\n";
+                }
+
             }
             else if (value > (threshold.value + sensor->hysteresisTrigger))
             {
