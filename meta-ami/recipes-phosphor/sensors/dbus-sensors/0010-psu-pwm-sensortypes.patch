diff -Naur a/include/sensor.hpp b/include/sensor.hpp
--- a/include/sensor.hpp	2020-10-15 23:07:42.050834649 +0530
+++ b/include/sensor.hpp	2020-10-15 23:14:32.783316369 +0530
@@ -541,4 +541,5 @@
         }
     }
 };
-bool  parseSdrRecordFromConfig( const SensorData& sensorData,struct sdr::SdrRecord& sdrRecord );
+bool  parseSdrRecordFromConfig( const SensorData& sensorData,struct sdr::SdrRecord& sdrRecord,
+                const std::string* matchLabel = nullptr );
diff -Naur a/src/FanMain.cpp b/src/FanMain.cpp
--- a/src/FanMain.cpp	2020-10-15 23:07:35.878766217 +0530
+++ b/src/FanMain.cpp	2020-10-15 23:22:45.192566953 +0530
@@ -48,7 +48,7 @@
     "xyz.openbmc_project.Configuration.I2CFan",
     "xyz.openbmc_project.Configuration.NuvotonFan"};
 static constexpr std::array<const char*, 1> pwmsensorTypes = {
-    	"xyz.openbmc_project.Configuration.IntelFanConnector"};
+    	"xyz.openbmc_project.Configuration.NuvotonFanConnector"};
 constexpr const char* redundancyConfiguration =
     "xyz.openbmc_project.Configuration.FanRedundancy";
 static std::regex inputRegex(R"(fan(\d+)_input)");
@@ -98,6 +98,7 @@
                       const ManagedObjectType& sensorConfigurations) {
             bool firstScan = sensorsChanged == nullptr;
             std::vector<fs::path> paths;
+	    bool useCache = false;
             if (!findFiles(fs::path("/sys/class/hwmon"), R"(fan\d+_input)",
                            paths))
             {
@@ -374,16 +375,16 @@
                 std::cerr << "No pwm in system\n";
                 return;
             }
-	    //useCache = false;
+	    useCache = false;
 	    for (const char* type : pwmsensorTypes)
 	    {
 	        if (!getSensorConfiguration(type, dbusConnection, pwmsensorConfigurations,
-                                false))
+                                useCache))
 	    	{
             	std::cerr << "error communicating to entity manager\n";
             	return;
             	}
-            	//useCache = true;
+            	useCache = true;
     	    }
             for (const fs::path& pwm : pwms)
             {
@@ -392,8 +393,6 @@
                     continue;
                 }
                 const std::string* path = nullptr;
-                const std::string* pwmName = nullptr;
-
                 for (const auto& [index, configPath, name] : pwmNumbers)
                 {
                     if (boost::ends_with(pwm.string(),
@@ -429,23 +428,38 @@
                           		std::cerr << pwmbaseConfiguration->first << " missing Pwm\n";
                           		continue;
                      		}
+				unsigned int configPwm =
+                                std::visit(VariantToUnsignedIntVisitor(), findPwm->second);
+                        	if (configPwm != index)
+                        	{
+                                	continue;
+                        	}
+                        	pwmsensorData = &(pwmsensor.second);
+                        	path = &configPath;
+                        	memset(&pwmsdrRecord, 0, sizeof(pwmsdrRecord));
+                        	if( !parseSdrRecordFromConfig(*pwmsensorData,pwmsdrRecord))
+                        	{
+                                	std::cerr << "error getting sdr record " << std::endl;
+                        	}
+                        	break;
                  	}
            	}
+	}
 
-		if (path == nullptr)
-                {
-                    continue;
-                }
+	if (path == nullptr)
+        {
+                continue;
+        }
 
-                // only add new elements
-                const std::string& sysPath = pwm.string();
-		std::string sensorUnit = "xyz.openbmc_project.Sensor.Value.Unit.Percent";
-                pwmSensors.insert(
-                    std::pair<std::string, std::unique_ptr<PwmSensor>>(
-                        sysPath, std::make_unique<PwmSensor>(
-                                     *pwmName, sysPath, dbusConnection,
+        // only add new elements
+       	const std::string& sysPath = pwm.string();
+	std::string sensorUnit = "xyz.openbmc_project.Sensor.Value.Unit.Percent";
+	const std::string& pwmName =
+            "Pwm_" + sysPath.substr(sysPath.find_last_of("pwm") + 1);
+        pwmSensors.insert(
+			std::pair<std::string, std::unique_ptr<PwmSensor>>(
+                        sysPath, std::make_unique<PwmSensor>(pwmName, sysPath, dbusConnection,
                                      objectServer, *path, "Fan",sensorUnit, pwmsdrRecord)));
-            }
 	    }
         }));
     getter->getConfiguration(
diff -Naur a/src/IntrusionSensorMain.cpp b/src/IntrusionSensorMain.cpp
--- a/src/IntrusionSensorMain.cpp	2020-10-15 23:07:35.878766217 +0530
+++ b/src/IntrusionSensorMain.cpp	2020-10-15 23:14:32.791316451 +0530
@@ -51,7 +51,8 @@
 static constexpr std::array<const char*, 1> nicTypes = {nicType};
 
 namespace fs = std::filesystem;
-bool  parseSdrRecordFromConfig( const SensorData& sensorData,struct sdr::SdrRecord& sdrRecord );
+bool  parseSdrRecordFromConfig( const SensorData& sensorData,struct sdr::SdrRecord& sdrRecord,
+                const std::string* matchLabel = nullptr );
 static bool getIntrusionSensorConfig(
     std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
     IntrusionSensorType* pType, int* pBusId, int* pSlaveAddr,
diff -Naur a/src/PSUSensorMain.cpp b/src/PSUSensorMain.cpp
--- a/src/PSUSensorMain.cpp	2020-10-15 23:07:35.878766217 +0530
+++ b/src/PSUSensorMain.cpp	2020-10-15 23:19:07.578205130 +0530
@@ -40,7 +40,7 @@
 
 static constexpr bool DEBUG = false;
 
-static constexpr std::array<const char*, 13> sensorTypes = {
+static constexpr std::array<const char*, 17> sensorTypes = {
     "xyz.openbmc_project.Configuration.ADM1272",
     "xyz.openbmc_project.Configuration.ADM1278",
     "xyz.openbmc_project.Configuration.INA219",
@@ -53,12 +53,17 @@
     "xyz.openbmc_project.Configuration.MAX34451",
     "xyz.openbmc_project.Configuration.pmbus",
     "xyz.openbmc_project.Configuration.PXE1610",
-    "xyz.openbmc_project.Configuration.RAA228228"};
+    "xyz.openbmc_project.Configuration.RAA228228",
+    "xyz.openbmc_project.Configuration.TPS53622",
+    "xyz.openbmc_project.Configuration.TPS53659",
+    "xyz.openbmc_project.Configuration.TPS53679",
+    "xyz.openbmc_project.Configuration.FLEXPOWER"};
 
 static std::vector<std::string> pmbusNames = {
     "adm1272",  "adm1278",  "ina219",   "ina230",   "isl68137",
     "max16601", "max20730", "max20734", "max20796", "max34451",
-    "pmbus",    "pxe1610",  "raa228228"};
+    "pmbus",    "pxe1610",  "raa228228", "tps53622","tps53659",
+    "tps53679", "flexpower"};
 
 namespace fs = std::filesystem;
 
@@ -747,7 +752,7 @@
 
               struct sdr::SdrRecord sdrRecord;
 
-           if( !parseSdrRecordFromConfig(*sensorData,sdrRecord))
+           if( !parseSdrRecordFromConfig(*sensorData,sdrRecord, &labelHead))
            {
                  std::cerr << "error getting sdr record for " << sensorNameSubStr << std::endl;
            }
@@ -880,6 +885,7 @@
                   {"vout15", PSUProperty("Output Voltage", 255, 0, 3)},
                   {"vout16", PSUProperty("Output Voltage", 255, 0, 3)},
                   {"in1", PSUProperty("Output Voltage", 255, 0, 3)},
+		  {"vin1", PSUProperty("Output Voltage", 255, 0, 3)},
                   {"iin", PSUProperty("Input Current", 20, 0, 3)},
                   {"iout1", PSUProperty("Output Current", 255, 0, 3)},
                   {"iout2", PSUProperty("Output Current", 255, 0, 3)},
diff -Naur a/src/SdrRecord.cpp b/src/SdrRecord.cpp
--- a/src/SdrRecord.cpp	2020-10-15 23:07:35.878766217 +0530
+++ b/src/SdrRecord.cpp	2020-10-15 23:14:32.791316451 +0530
@@ -13,15 +13,24 @@
 #include <sdbusplus/asio/object_server.hpp>
 #include <Utils.hpp>
 #include <syslog.h>
-bool  parseSdrRecordFromConfig( const SensorData& sensorData,struct sdr::SdrRecord& sdrRecord )
+bool  parseSdrRecordFromConfig( const SensorData& sensorData,struct sdr::SdrRecord& sdrRecord, 
+		const std::string* matchLabel )
 {
-   for (const auto& item : sensorData)
-    {
-        if (item.first.find("SdrInfo") == std::string::npos)
+	std::string sdrName;
+	if (matchLabel != nullptr)
         {
-            continue;
-        }
-auto SdrVersionFind = item.second.find("SdrVersion");
+		sdrName = (*matchLabel) + "_SdrInfo";
+        }else{
+		sdrName = "SdrInfo";
+	}
+
+   	for (const auto& item : sensorData)
+    	{
+		if (item.first.find(sdrName) == std::string::npos)
+        	{
+            		continue;
+        	}
+	auto SdrVersionFind = item.second.find("SdrVersion");
         auto RecordTypeFind = item.second.find("RecordType");
         auto RecordLenFind = item.second.find("RecordLen");
         auto OwnerIdFind = item.second.find("OwnerId");
@@ -93,4 +102,3 @@
    return true;
 
 }
-
