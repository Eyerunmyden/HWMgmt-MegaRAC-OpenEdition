diff -Naur a/include/CPUSensor.hpp b/include/CPUSensor.hpp
--- a/include/CPUSensor.hpp	2021-03-02 13:57:23.601922066 +0530
+++ b/include/CPUSensor.hpp	2021-03-02 13:57:33.630066681 +0530
@@ -48,6 +48,7 @@
     size_t pollTime;
     void setupRead(void);
     void handleResponse(const boost::system::error_code& err);
+    thresholds::ThresholdTimer thresholdTimer;
     void checkThresholds(void) override;
     void updateMinMaxValues(void);
 };
diff -Naur a/src/CPUSensor.cpp b/src/CPUSensor.cpp
--- a/src/CPUSensor.cpp	2021-03-02 13:58:14.830655279 +0530
+++ b/src/CPUSensor.cpp	2021-03-02 13:58:25.506806401 +0530
@@ -46,7 +46,8 @@
            minReading,EvStat,sensorUnit,sdrRecord,PowerState::on),
     objServer(objectServer), busConn(conn),inputDev(io), waitTimer(io), path(path),
     privTcontrol(std::numeric_limits<double>::quiet_NaN()),
-    dtsOffset(dtsOffset), show(show), pollTime(CPUSensor::sensorPollMs)
+    dtsOffset(dtsOffset), show(show), pollTime(CPUSensor::sensorPollMs) ,
+    thresholdTimer(io, this)
 {
     nameTcontrol = labelTcontrol;
     nameTcontrol += " CPU" + std::to_string(cpuId);
@@ -270,19 +271,10 @@
 {
     if (show)
     {
-        // give the power match callback to have a chance to run
-        // checkThresholds checks for host power state
-        auto timer = std::make_shared<boost::asio::steady_timer>(
-            busConn->get_io_context());
-        timer->expires_after(std::chrono::milliseconds(100));
-        timer->async_wait([this, timer](boost::system::error_code ec) {
-            if (ec)
-            {
-                // log the error but still check the thresholds
-                std::cerr << "Cpu sensor threshold timer error!\n";
-            }
-            thresholds::checkThresholds(this);
-        });
-
+        if (!readingStateGood())
+        {
+            return;
+        }
+        thresholds::checkThresholdsPowerDelay(this, thresholdTimer);
     }
 }
diff -Naur a/src/Thresholds.cpp b/src/Thresholds.cpp
--- a/src/Thresholds.cpp	2021-03-02 13:58:14.830655279 +0530
+++ b/src/Thresholds.cpp	2021-03-02 13:58:25.506806401 +0530
@@ -366,29 +366,29 @@
     std::vector<ChangeParam> changes = checkThresholds(sensor, sensor->value);
     for (const auto& change : changes)
     {
-        // When CPU is powered off, some volatges are expected to
-        // go below low thresholds. Filter these events with thresholdTimer.
-        // 1. always delay the assertion of low events to see if they are
-        //   caused by power off event.
-        // 2. conditional delay the de-assertion of low events if there is
-        //   an existing timer for assertion.
-        // 3. no delays for de-assert of low events if there is an existing
-        //   de-assert for low event. This means 2nd de-assert would happen
-        //   first and when timer expires for the previous one, no additional
-        //   signal will be logged.
-        // 4. no delays for all high events.
-        if (change.threshold.direction == thresholds::Direction::LOW)
-        {
-            if (change.asserted || thresholdTimer.hasActiveTimer(
-                                       change.threshold, !change.asserted))
-            {
-                thresholdTimer.startTimer(change.threshold, change.asserted,
-                                          change.assertValue);
-                continue;
-            }
-        }
-        assertThresholds(sensor, change.assertValue, change.threshold.level,
-                         change.threshold.direction, change.asserted);
+        // When CPU is powered off, some voltages are expected to
+        // go below low thresholds.
+        // Some CPU sensors may appear to be high during the CPU reset.
+        // Delay the threshold check to let CPU power status gets updated first.
+        // 1. If there is already a timer for the same event,
+        //    but not the opposite event, do nothing.
+        // 2. Add a delay timer for this event when
+        //    a) There is already a timer for the same event and a timer for
+        //    opposite event
+        //    b) There is a timer for the opposite event only
+        //    c) There is no timer for this threshold
+        // This would ensure that any "pulse" event is logged and
+        // last log represents the latest reading
+
+        if (thresholdTimer.hasActiveTimer(change.threshold, change.asserted) &&
+            !thresholdTimer.hasActiveTimer(change.threshold, !change.asserted))
+         {
+              continue; // case 1
+	 }
+
+        thresholdTimer.startTimer(change.threshold, change.asserted,
+                                  change.assertValue);
+
     }
 }
 
