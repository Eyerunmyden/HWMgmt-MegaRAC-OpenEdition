diff -Naur a/drivers/usb/gadget/function/f_mass_storage.c b/drivers/usb/gadget/function/f_mass_storage.c
--- a/drivers/usb/gadget/function/f_mass_storage.c	2020-12-15 23:37:37.505989489 +0530
+++ b/drivers/usb/gadget/function/f_mass_storage.c	2020-12-15 23:41:22.211162116 +0530
@@ -225,7 +225,6 @@
 
 #include "configfs.h"
 
-
 /*------------------------------------------------------------------------*/
 
 #define FSG_DRIVER_DESC		"Mass Storage Function"
@@ -1152,7 +1151,6 @@
 		curlun->sense_data = SS_INVALID_FIELD_IN_CDB;
 		return -EINVAL;
 	}
-
 	put_unaligned_be32(curlun->num_sectors - 1, &buf[0]);
 						/* Max logical block */
 	put_unaligned_be32(curlun->blksize, &buf[4]);/* Block length */
@@ -1181,6 +1179,63 @@
 	return 8;
 }
 
+static int do_read_CD_info(struct fsg_common* common, struct fsg_buffhd * bh)
+{
+	struct fsg_lun *curlun = common->curlun;
+	if (common->cmnd[1] & ~0x02) {  /* Mask away MSF */
+		curlun->sense_data = SS_INVALID_FIELD_IN_CDB;
+		return -EINVAL;
+	}
+	u8* outbuf = (u8*)bh->buf;
+	memset(outbuf,0,34);
+	outbuf[1] = 32;
+	outbuf[2] = 0xe; /* last session complete, disc finalized */
+	outbuf[3] = 1;   /* first track on disc */
+	outbuf[4] = 1;   /* # of sessions */
+	outbuf[5] = 1;   /* first track of last session */
+	outbuf[6] = 1;   /* last track of last session */
+	outbuf[7] = 0x20; /* unrestricted use */
+	outbuf[8] = 0x00; /* CD-ROM or DVD-ROM */
+	return 34;
+}
+
+static int do_get_CD_config(struct fsg_common *common, struct fsg_buffhd *bh)
+{
+	struct fsg_lun *curlun = common->curlun;
+	if (common->cmnd[1] & ~0x02) {  /* Mask away MSF */
+		curlun->sense_data = SS_INVALID_FIELD_IN_CDB;
+		return -EINVAL;
+	}
+	u8* buf = (u8*)bh->buf;
+	int cur;
+	if ( curlun->num_sectors > CD_MAX_SECTORS )
+	{
+		cur = MMC_PROFILE_DVD_ROM;
+	}
+	else
+		cur = MMC_PROFILE_CD_ROM;
+	memset(buf,0,40);
+	put_unaligned_be32(36,&buf[0]);
+	put_unaligned_be16(cur,&buf[6]);
+	buf[10] = 0x03;
+	buf[11] = 8;
+	put_unaligned_be16(MMC_PROFILE_DVD_ROM,&buf[12]);
+	buf[14] = ( cur == MMC_PROFILE_DVD_ROM );
+	put_unaligned_be16(MMC_PROFILE_CD_ROM,&buf[16]);
+	buf[18] = ( cur == MMC_PROFILE_CD_ROM );
+	put_unaligned_be16(1,&buf[20]);
+	buf[22] = 0x08 | 0x03;
+	buf[23] = 8;
+	put_unaligned_be32(1,&buf[24]);
+	buf[28] = 1;
+	put_unaligned_be16(3,&buf[32]);
+	buf[34] = 0x08 | 0x3;
+	buf[35] = 4;
+	buf[36] = 0x39;
+	return 40;
+}
+
+
 static int do_read_toc(struct fsg_common *common, struct fsg_buffhd *bh)
 {
 	struct fsg_lun	*curlun = common->curlun;
@@ -1668,9 +1723,9 @@
 	if (common->data_dir != DATA_DIR_UNKNOWN)
 		sprintf(hdlen, ", H%c=%u", dirletter[(int) common->data_dir],
 			common->data_size);
-	VDBG(common, "SCSI command: %s;  Dc=%d, D%c=%u;  Hc=%d%s\n",
-	     name, cmnd_size, dirletter[(int) data_dir],
-	     common->data_size_from_cmnd, common->cmnd_size, hdlen);
+//	VDBG(common, "SCSI command: %s;  Dc=%d, D%c=%u;  Hc=%d%s\n",
+//	     name, cmnd_size, dirletter[(int) data_dir],
+//	     common->data_size_from_cmnd, common->cmnd_size, hdlen);
 
 	/*
 	 * We can't reply at all until we know the correct data direction
@@ -2027,7 +2082,18 @@
 		if (reply == 0)
 			reply = do_write(common);
 		break;
-
+	case 0x51: //READ_DISC_INFORMATION
+		common->data_size_from_cmnd = 0;
+		if (!common->curlun || !common->curlun->cdrom)
+			goto unknown_cmnd;
+		reply = do_read_CD_info(common,bh);
+		break;
+	case 0x46: //GET_CONFIGURATION
+		common->data_size_from_cmnd = 0;
+		if (!common->curlun || !common->curlun->cdrom)
+			goto unknown_cmnd;
+		reply = do_get_CD_config(common,bh);
+		break;
 	/*
 	 * Some mandatory commands that we recognize but don't implement.
 	 * They don't mean much in this setting.  It's left as an exercise
diff -Naur a/drivers/usb/gadget/function/storage_common.c b/drivers/usb/gadget/function/storage_common.c
--- a/drivers/usb/gadget/function/storage_common.c	2020-12-15 23:37:37.505989489 +0530
+++ b/drivers/usb/gadget/function/storage_common.c	2020-12-15 23:41:08.242840426 +0530
@@ -241,15 +241,15 @@
 
 	num_sectors = size >> blkbits; /* File size in logic-block-size blocks */
 	min_sectors = 1;
-	if (curlun->cdrom) {
-		min_sectors = 300;	/* Smallest track is 300 frames */
-		if (num_sectors >= 256*60*75) {
-			num_sectors = 256*60*75 - 1;
-			LINFO(curlun, "file too big: %s\n", filename);
-			LINFO(curlun, "using only first %d blocks\n",
-					(int) num_sectors);
-		}
-	}
+//	if (curlun->cdrom) {
+//		min_sectors = 300;	/* Smallest track is 300 frames */
+//		if (num_sectors >= 256*60*75) {
+//			num_sectors = 256*60*75 - 1;
+//			LINFO(curlun, "file too big: %s\n", filename);
+//			LINFO(curlun, "using only first %d blocks\n",
+//					(int) num_sectors);
+//		}
+//	}
 	if (num_sectors < min_sectors) {
 		LINFO(curlun, "file too small: %s\n", filename);
 		rc = -ETOOSMALL;
@@ -265,6 +265,7 @@
 	curlun->filp = filp;
 	curlun->file_length = size;
 	curlun->num_sectors = num_sectors;
+	//printk("lun_open: %zd\n",curlun->num_sectors-1);
 	LDBG(curlun, "open backing file: %s\n", filename);
 	return 0;
 
@@ -301,6 +302,8 @@
 		addr /= 75;
 		dest[2] = addr % 60;	/* Seconds */
 		addr /= 60;
+		if (addr > 255)
+			printk("store_cdrom_address: overflow \n");
 		dest[1] = addr;		/* Minutes */
 		dest[0] = 0;		/* Reserved */
 	} else {
diff -Naur a/drivers/usb/gadget/function/storage_common.h b/drivers/usb/gadget/function/storage_common.h
--- a/drivers/usb/gadget/function/storage_common.h	2020-12-15 23:37:37.505989489 +0530
+++ b/drivers/usb/gadget/function/storage_common.h	2020-12-15 23:41:08.242840426 +0530
@@ -85,6 +85,43 @@
 #define SS_WRITE_ERROR				0x030c02
 #define SS_WRITE_PROTECTED			0x072700
 
+
+#define CD_MINS                       80 /* max. minutes per CD */
+#define CD_SECS                       60 /* seconds per minute */
+#define CD_FRAMES                     75 /* frames per second */
+#define CD_FRAMESIZE                2048 /* bytes per frame, "cooked" mode */
+#define CD_MAX_BYTES       (CD_MINS * CD_SECS * CD_FRAMES * CD_FRAMESIZE)
+#define CD_MAX_SECTORS     (CD_MAX_BYTES / 512)
+
+#define MMC_PROFILE_NONE                0x0000
+#define MMC_PROFILE_CD_ROM              0x0008
+#define MMC_PROFILE_CD_R                0x0009
+#define MMC_PROFILE_CD_RW               0x000A
+#define MMC_PROFILE_DVD_ROM             0x0010
+#define MMC_PROFILE_DVD_R_SR            0x0011
+#define MMC_PROFILE_DVD_RAM             0x0012
+#define MMC_PROFILE_DVD_RW_RO           0x0013
+#define MMC_PROFILE_DVD_RW_SR           0x0014
+#define MMC_PROFILE_DVD_R_DL_SR         0x0015
+#define MMC_PROFILE_DVD_R_DL_JR         0x0016
+#define MMC_PROFILE_DVD_RW_DL           0x0017
+#define MMC_PROFILE_DVD_DDR             0x0018
+#define MMC_PROFILE_DVD_PLUS_RW         0x001A
+#define MMC_PROFILE_DVD_PLUS_R          0x001B
+#define MMC_PROFILE_DVD_PLUS_RW_DL      0x002A
+#define MMC_PROFILE_DVD_PLUS_R_DL       0x002B
+#define MMC_PROFILE_BD_ROM              0x0040
+#define MMC_PROFILE_BD_R_SRM            0x0041
+#define MMC_PROFILE_BD_R_RRM            0x0042
+#define MMC_PROFILE_BD_RE               0x0043
+#define MMC_PROFILE_HDDVD_ROM           0x0050
+#define MMC_PROFILE_HDDVD_R             0x0051
+#define MMC_PROFILE_HDDVD_RAM           0x0052
+#define MMC_PROFILE_HDDVD_RW            0x0053
+#define MMC_PROFILE_HDDVD_R_DL          0x0058
+#define MMC_PROFILE_HDDVD_RW_DL         0x005A
+#define MMC_PROFILE_INVALID             0xFFFF
+
 #define SK(x)		((u8) ((x) >> 16))	/* Sense Key byte, etc. */
 #define ASC(x)		((u8) ((x) >> 8))
 #define ASCQ(x)		((u8) (x))
