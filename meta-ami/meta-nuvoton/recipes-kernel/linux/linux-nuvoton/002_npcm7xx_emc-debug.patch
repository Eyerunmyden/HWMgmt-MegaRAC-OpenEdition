diff -Naur a/drivers/net/ethernet/nuvoton/npcm7xx_emc.c b/drivers/net/ethernet/nuvoton/npcm7xx_emc.c
--- a/drivers/net/ethernet/nuvoton/npcm7xx_emc.c	2020-04-07 15:41:32.317956524 -0400
+++ b/drivers/net/ethernet/nuvoton/npcm7xx_emc.c	2020-04-08 12:37:45.653583549 -0400
@@ -1878,6 +1878,7 @@
 	if (IS_ERR(emc_clk))
 		return PTR_ERR(emc_clk);
 
+	// dev_err(&pdev->dev, "%s: LOC 1 in ethernet_probe. ===============================\n", __func__);
 	/* Enable Clock */
 	clk_prepare_enable(emc_clk);
 
@@ -1891,6 +1892,8 @@
 
 	ether = netdev_priv(dev);
 
+	// dev_err(&pdev->dev, "%s: LOC 2 in ethernet_probe. ===============================\n", __func__);
+
 	ether->rst_regmap =
 		syscon_regmap_lookup_by_compatible("nuvoton,npcm750-rst");
 	if (IS_ERR(ether->rst_regmap)) {
@@ -1898,6 +1901,7 @@
 		return IS_ERR(ether->rst_regmap);
 	}
 
+	// dev_err(&pdev->dev, "%s: LOC 3 in ethernet_probe. ===============================\n", __func__);
 	/* Reset EMC module */
 	if (pdev->id == 0) {
 		regmap_update_bits(ether->rst_regmap, IPSRST1_OFFSET,
@@ -1919,6 +1923,7 @@
 		goto failed_free;
 	}
 
+	// dev_err(&pdev->dev, "%s: LOC 4 in ethernet_probe. ===============================\n", __func__);
 	if (!request_mem_region(ether->res->start,
 				resource_size(ether->res), pdev->name)) {
 		dev_err(&pdev->dev, "failed to request I/O memory\n");
@@ -1926,6 +1931,7 @@
 		goto failed_free;
 	}
 
+	// dev_err(&pdev->dev, "%s: LOC 5 in ethernet_probe. ===============================\n", __func__);
 	ether->reg = ioremap(ether->res->start, resource_size(ether->res));
 	dev_dbg(&pdev->dev, "%s ether->reg = 0x%x\n", __func__,
 		(unsigned int)ether->reg);
@@ -1936,6 +1942,7 @@
 		goto failed_free_mem;
 	}
 
+	// dev_err(&pdev->dev, "%s: LOC 6 in ethernet_probe. ===============================\n", __func__);
 	ether->txirq = platform_get_irq(pdev, 0);
 	if (ether->txirq < 0) {
 		dev_err(&pdev->dev, "failed to get ether tx irq\n");
@@ -1943,6 +1950,7 @@
 		goto failed_free_io;
 	}
 
+	// dev_err(&pdev->dev, "%s: LOC 7 in ethernet_probe. ===============================\n", __func__);
 	ether->rxirq = platform_get_irq(pdev, 1);
 	if (ether->rxirq < 0) {
 		dev_err(&pdev->dev, "failed to get ether rx irq\n");
@@ -1950,10 +1958,12 @@
 		goto failed_free_io;
 	}
 
+	// dev_err(&pdev->dev, "%s: LOC 8 in ethernet_probe. ===============================\n", __func__);
 	SET_NETDEV_DEV(dev, &pdev->dev);
 	platform_set_drvdata(pdev, dev);
 	ether->ndev = dev;
 
+	// dev_err(&pdev->dev, "%s: LOC 9 in ethernet_probe. ===============================\n", __func__);
 	ether->pdev = pdev;
 	ether->msg_enable = NETIF_MSG_LINK;
 
@@ -1964,8 +1974,13 @@
 	dev->dma = 0x0;
 	dev->watchdog_timeo = TX_TIMEOUT;
 
-	get_mac_address(dev);
+	dev_err(&pdev->dev, "%s: LOC a in ethernet_probe. ===============================\n", __func__);
+	/* comment from Joseph:
+	 * try to set a mac address to emc in u-boot env., it should fix this issue.
+	 * get_mac_address(dev);
+	 */
 
+	dev_err(&pdev->dev, "%s: LOC b in ethernet_probe. ===============================\n", __func__);
 	ether->cur_tx = 0x0;
 	ether->cur_rx = 0x0;
 	ether->finish_tx = 0x0;
@@ -1992,10 +2007,12 @@
 	ether->tx_tdu_i = 0;
 	ether->tx_cp_i = 0;
 
+	// dev_err(&pdev->dev, "%s: LOC c in ethernet_probe. ===============================\n", __func__);
 	spin_lock_init(&ether->lock);
 
 	netif_napi_add(dev, &ether->napi, npcm7xx_poll, RX_POLL_SIZE);
 
+	// dev_err(&pdev->dev, "%s: LOC d in ethernet_probe. ===============================\n", __func__);
 	if (pdev->dev.of_node &&
 	    of_get_property(pdev->dev.of_node, "use-ncsi", NULL)) {
 		if (!IS_ENABLED(CONFIG_NET_NCSI)) {
@@ -2019,6 +2036,7 @@
 		}
 	}
 
+	// dev_err(&pdev->dev, "%s: LOC e in ethernet_probe. ===============================\n", __func__);
 	error = register_netdev(dev);
 	if (error != 0) {
 		dev_err(&pdev->dev, "register_netdev() failed\n");
@@ -2026,6 +2044,7 @@
 		goto failed_free_napi;
 	}
 
+	// dev_err(&pdev->dev, "%s: LOC f in ethernet_probe. ===============================\n", __func__);
 #ifdef CONFIG_DEBUG_FS
 	npcm7xx_debug_fs(ether);
 #endif
