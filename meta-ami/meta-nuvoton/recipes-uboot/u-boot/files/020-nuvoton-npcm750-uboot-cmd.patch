diff -Naur a/cmd/mem.c b/cmd/mem.c
--- a/cmd/mem.c	2019-07-22 22:57:53.000000000 -0400
+++ b/cmd/mem.c	2020-06-04 10:32:00.714848520 -0400
@@ -21,6 +21,8 @@
 #include <watchdog.h>
 #include <asm/io.h>
 #include <linux/compiler.h>
+#include <spi.h>
+#include <spi_flash.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -39,6 +41,7 @@
 
 static	ulong	base_address = 0;
 
+static struct spi_flash *flash;
 /* Memory Display
  *
  * Syntax:
@@ -304,6 +307,11 @@
 {
 	ulong	addr, dest, count;
 	int	size;
+#ifdef CONFIG_ARCH_NPCM750
+	ulong flash_base = 0;
+	int bus;
+	int cs;
+#endif
 
 	if (argc != 4)
 		return CMD_RET_USAGE;
@@ -342,6 +350,115 @@
 		return 0;
 	}
 #endif
+#ifdef CONFIG_ARCH_NPCM750
+	if ((dest >= SPI0_BASE_ADDR) &&  (dest < SPI0_END_ADDR)) {
+		bus = 0;
+		cs = (dest - SPI0_BASE_ADDR) / SPI_FLASH_REGION_SIZE;
+		flash_base = SPI0_BASE_ADDR + cs * SPI_FLASH_REGION_SIZE;
+	} else if ((dest >= SPI3_BASE_ADDR) && (dest < SPI3_END_ADDR)) {
+		bus = 3;
+		cs = (dest - SPI3_BASE_ADDR) / SPI_FLASH_REGION_SIZE;
+		flash_base = SPI3_BASE_ADDR + cs * SPI_FLASH_REGION_SIZE;
+	}
+	/* copying to SPI Flash */
+	if (flash_base > 0) {
+		int	ret;
+		char *src, *buf;
+		u32 len, sector_addr, sector_offset;
+		u32 dest_addr, end_addr;
+		int chunk_sz;
+
+		if (((dest + count * size) - flash_base) >= SPI_FLASH_REGION_SIZE ) {
+			printf("Copying to multiple chips is not supported!\n");
+			return 1;
+		}
+
+		src = (char *)addr;
+		printf("Copy %lu bytes from 0x%lx to 0x%lx(bus:%d cs:%d)\n",
+			count*size, addr, dest, bus, cs);
+
+		if (flash == NULL) {
+			struct udevice *new;
+
+			ret = spi_flash_probe_bus_cs(bus, cs,
+					CONFIG_SF_DEFAULT_SPEED, CONFIG_SF_DEFAULT_MODE,
+					&new);
+			if (ret) {
+				return ret;
+			}
+
+			flash = dev_get_uclass_priv(new);
+		}
+		src = (char *)addr;
+		dest_addr = dest - flash_base;
+		end_addr = dest_addr + count * size;
+		len = count * size;
+		/*
+		 * sector_addr                             sector_end
+		 * v                                          v
+		 * | <-- secotr_offset--> | <## chunk_sz ##>  |
+		 *                        ^
+		 * ----------------------> dest_addr
+		 */
+
+		buf = memalign(ARCH_DMA_MINALIGN, flash->erase_size);
+		printf("Copy %d bytes to flash\n", len);
+
+		while (dest_addr < end_addr) {
+			sector_offset = dest_addr % flash->erase_size;
+			chunk_sz = min(len, (flash->erase_size - sector_offset));
+
+			if (memcmp(src, (void *)(dest_addr + flash_base),
+				chunk_sz) == 0) {
+				printf(".");
+				/* source and target are the same, skip programming */
+				dest_addr += chunk_sz;
+				src += chunk_sz;
+				len -= chunk_sz;
+				continue;
+			}
+
+			sector_addr = dest_addr - sector_offset;
+			if (chunk_sz < flash->erase_size) {
+
+				/* read sector to buf */
+				memcpy(buf, (void *)(sector_addr + flash_base),
+					flash->erase_size);
+
+				/* erase sector */
+				ret = spi_flash_erase(flash, sector_addr, flash->erase_size);
+				printf("SF: %zu bytes @ %#x Erased: %s\n", (size_t)flash->erase_size,
+						sector_addr, ret ? "ERROR" : "OK");
+
+				/* update buf */
+				memcpy(buf + sector_offset, src, chunk_sz);
+
+				/* program sector */
+				ret = spi_flash_write(flash, sector_addr, flash->erase_size, buf);
+				printf("SF: %zu bytes @ %#x Written: %s\n", (size_t)flash->erase_size,
+						sector_addr, ret ? "ERROR" : "OK");
+			} else {
+				printf("#");
+				/* erase sector */
+				ret = spi_flash_erase(flash, sector_addr, flash->erase_size);
+				debug("SF: %zu bytes @ %#x Erased: %s\n", (size_t)flash->erase_size,
+						sector_addr, ret ? "ERROR" : "OK");
+
+				/* program sector */
+				ret = spi_flash_write(flash, sector_addr, chunk_sz, src);
+				debug("SF: %zu bytes @ %#x Written: %s\n", (size_t)chunk_sz,
+						sector_addr, ret ? "ERROR" : "OK");
+			}
+			dest_addr += chunk_sz;
+			src += chunk_sz;
+			len -= chunk_sz;
+		}
+		printf("\n");
+		free(buf);
+
+		return 0;
+	}
+#endif
 
 	memcpy((void *)dest, (void *)addr, count * size);
 
