--- a/drivers/gpio/gpio-aspeed-sgpio.c	2020-03-12 11:59:34.698649718 -0400
+++ b/drivers/gpio/gpio-aspeed-sgpio.c	2020-05-07 21:44:44.494053671 -0400
@@ -17,7 +17,8 @@
 #include <linux/spinlock.h>
 #include <linux/string.h>
 
-#define MAX_NR_SGPIO			80
+#define MAX_NR_SGPIO_AST2500			80
+#define MAX_NR_SGPIO_AST2600                    128
 
 #define ASPEED_SGPIO_CTRL		0x54
 
@@ -428,6 +429,8 @@
 static const struct of_device_id aspeed_sgpio_of_table[] = {
 	{ .compatible = "aspeed,ast2400-sgpio" },
 	{ .compatible = "aspeed,ast2500-sgpio" },
+        { .compatible = "aspeed,ast2600-sgpio" },
+
 	{}
 };
 
@@ -436,7 +439,8 @@
 static int __init aspeed_sgpio_probe(struct platform_device *pdev)
 {
 	struct aspeed_sgpio *gpio;
-	u32 nr_gpios, sgpio_freq, sgpio_clk_div;
+	struct device_node *node = dev_of_node(&pdev->dev);
+	u32 nr_gpios, sgpio_freq, sgpio_clk_div, base;
 	int rc;
 	unsigned long apb_freq;
 
@@ -452,12 +456,24 @@
 	if (rc < 0) {
 		dev_err(&pdev->dev, "Could not read ngpios property\n");
 		return -EINVAL;
-	} else if (nr_gpios > MAX_NR_SGPIO) {
-		dev_err(&pdev->dev, "Number of GPIOs exceeds the maximum of %d: %d\n",
-			MAX_NR_SGPIO, nr_gpios);
-		return -EINVAL;
 	}
 
+	if (of_device_is_compatible(node, "aspeed,ast2600-sgpio")) {
+		if(nr_gpios > MAX_NR_SGPIO_AST2600) {
+			dev_err(&pdev->dev, "Number of GPIOs exceeds the maximum of %d: %d\n",
+				MAX_NR_SGPIO_AST2600, nr_gpios);
+			return -EINVAL;
+		}
+	} 
+	else {
+		if(nr_gpios > MAX_NR_SGPIO_AST2500) {
+		                dev_err(&pdev->dev, "Number of GPIOs exceeds the maximum of %d: %d\n",
+                        MAX_NR_SGPIO_AST2500, nr_gpios);
+                	return -EINVAL;
+		}
+	}
+
+	rc = of_property_read_u32(pdev->dev.of_node, "base", &base);
 	rc = of_property_read_u32(pdev->dev.of_node, "bus-frequency", &sgpio_freq);
 	if (rc < 0) {
 		dev_err(&pdev->dev, "Could not read bus-frequency property\n");
@@ -507,7 +523,7 @@
 	gpio->chip.set = aspeed_sgpio_set;
 	gpio->chip.set_config = NULL;
 	gpio->chip.label = dev_name(&pdev->dev);
-	gpio->chip.base = -1;
+	gpio->chip.base = (u16) base;
 
 	/* set all SGPIO pins as input (1). */
 	memset(gpio->dir_in, 0xff, sizeof(gpio->dir_in));
