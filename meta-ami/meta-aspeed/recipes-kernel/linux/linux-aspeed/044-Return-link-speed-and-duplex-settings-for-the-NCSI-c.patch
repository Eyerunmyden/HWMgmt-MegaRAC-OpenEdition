From f280c15c79e7d13e4a59d413a3091eb21b56dd92 Mon Sep 17 00:00:00 2001
From: Johnathan Mantey <johnathanx.mantey@intel.com>
Date: Mon, 27 Jan 2020 09:03:56 -0800
Subject: [PATCH] Return link speed and duplex settings for the NCSI channel

The ftgmac100_open function initializes state for the NCSI
channel. The get link settings function does not return this
data. This caused the link speed, and the duplex value to be returned
incorrectly by the PHY driver (0 Mbps, and duplex off).

Update the driver to return either the PHY settings when not using
NCSI, or the NCSI values that were assigned when the driver is opened.

Signed-off-by: Johnathan Mantey <johnathanx.mantey@intel.com>
---
 drivers/net/ethernet/faraday/ftgmac100.c | 22 +++++++++++++++++++++-
 1 file changed, 21 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/faraday/ftgmac100.c b/drivers/net/ethernet/faraday/ftgmac100.c
index 8ed85037f021..a53878eecfc8 100644
--- a/drivers/net/ethernet/faraday/ftgmac100.c
+++ b/drivers/net/ethernet/faraday/ftgmac100.c
@@ -1218,10 +1218,30 @@ static int ftgmac100_set_pauseparam(struct net_device *netdev,
 	return 0;
 }
 
+int ftgmac100_ethtool_get_link_ksettings(struct net_device *netdev,
+					 struct ethtool_link_ksettings *cmd)
+{
+	struct phy_device *phydev = netdev->phydev;
+	struct ftgmac100 *priv = netdev_priv(netdev);
+	int retval = 0;
+
+	if (phydev) {
+		phy_ethtool_ksettings_get(phydev, cmd);
+	} else if (priv->use_ncsi) {
+		cmd->base.speed = priv->cur_speed;
+		cmd->base.duplex = priv->cur_duplex;
+		cmd->base.autoneg = 0;
+	} else {
+		retval = -ENODEV;
+	}
+
+	return retval;
+}
+
 static const struct ethtool_ops ftgmac100_ethtool_ops = {
 	.get_drvinfo		= ftgmac100_get_drvinfo,
 	.get_link		= ethtool_op_get_link,
-	.get_link_ksettings	= phy_ethtool_get_link_ksettings,
+	.get_link_ksettings	= ftgmac100_ethtool_get_link_ksettings,
 	.set_link_ksettings	= phy_ethtool_set_link_ksettings,
 	.nway_reset		= phy_ethtool_nway_reset,
 	.get_ringparam		= ftgmac100_get_ringparam,
-- 
2.24.1
