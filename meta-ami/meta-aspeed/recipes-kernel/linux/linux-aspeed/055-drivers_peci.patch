--- a/drivers/peci/busses/peci-aspeed.c	2020-02-10 12:45:18.366567733 -0500
+++ b/drivers/peci/busses/peci-aspeed.c	2020-02-10 13:03:35.535391228 -0500
@@ -28,6 +28,7 @@
 #define   ASPEED_PECI_CTRL_INVERT_IN		BIT(6)
 #define   ASPEED_PECI_CTRL_BUS_CONTENT_EN	BIT(5)
 #define   ASPEED_PECI_CTRL_PECI_EN		BIT(4)
+#define   PECI_CTRL_64BYTE_MODE_EN		BIT(1)
 #define   ASPEED_PECI_CTRL_PECI_CLK_EN		BIT(0)
 
 /* Timing Negotiation Register */
@@ -97,6 +98,39 @@
 #define ASPEED_PECI_R_DATA6			0x58
 #define ASPEED_PECI_R_DATA7			0x5c
 #define   ASPEED_PECI_DATA_BUF_SIZE_MAX		32
+#define ASPEED_PECI_NEW_W_DATA0			0x80
+#define ASPEED_PECI_NEW_W_DATA1			0x84
+#define ASPEED_PECI_NEW_W_DATA2			0x88
+#define ASPEED_PECI_NEW_W_DATA3			0x8C
+#define ASPEED_PECI_NEW_W_DATA4			0x90
+#define ASPEED_PECI_NEW_W_DATA5			0x94
+#define ASPEED_PECI_NEW_W_DATA6			0x98
+#define ASPEED_PECI_NEW_W_DATA7			0x9C
+#define ASPEED_PECI_NEW_W_DATA8			0xA0
+#define ASPEED_PECI_NEW_W_DATA9			0xA4
+#define ASPEED_PECI_NEW_W_DATAA			0xA8
+#define ASPEED_PECI_NEW_W_DATAB			0xAC
+#define ASPEED_PECI_NEW_W_DATAC			0xB0
+#define ASPEED_PECI_NEW_W_DATAD			0xB4
+#define ASPEED_PECI_NEW_W_DATAE			0xB8
+#define ASPEED_PECI_NEW_W_DATAF			0xBC
+#define ASPEED_PECI_NEW_R_DATA0			0xC0
+#define ASPEED_PECI_NEW_R_DATA1			0xC4
+#define ASPEED_PECI_NEW_R_DATA2			0xC8
+#define ASPEED_PECI_NEW_R_DATA3			0xCC
+#define ASPEED_PECI_NEW_R_DATA4			0xD0
+#define ASPEED_PECI_NEW_R_DATA5			0xD4
+#define ASPEED_PECI_NEW_R_DATA6			0xD8
+#define ASPEED_PECI_NEW_R_DATA7			0xDC
+#define ASPEED_PECI_NEW_R_DATA8			0xE0
+#define ASPEED_PECI_NEW_R_DATA9			0xE4
+#define ASPEED_PECI_NEW_R_DATAA			0xE8
+#define ASPEED_PECI_NEW_R_DATAB			0xEC
+#define ASPEED_PECI_NEW_R_DATAC			0xF0
+#define ASPEED_PECI_NEW_R_DATAD			0xF4
+#define ASPEED_PECI_NEW_R_DATAE			0xF8
+#define ASPEED_PECI_NEW_R_DATAF			0xFC
+
 
 /* Timing Negotiation */
 #define ASPEED_PECI_RD_SAMPLING_POINT_DEFAULT	8
@@ -125,6 +159,7 @@
 	struct completion	xfer_complete;
 	u32			status;
 	u32			cmd_timeout_ms;
+	int			xfer_mode;
 };
 
 static inline int aspeed_peci_check_idle(struct aspeed_peci *priv)
@@ -167,7 +202,10 @@
 	writel(peci_head, priv->base + ASPEED_PECI_RW_LENGTH);
 
 	for (i = 0; i < msg->tx_len; i += 4) {
-		reg = i < 16 ? ASPEED_PECI_W_DATA0 + i % 16 :
+		if (priv->xfer_mode)
+			reg = ASPEED_PECI_NEW_W_DATA0 + i % 16;
+		else
+			reg = i < 16 ? ASPEED_PECI_W_DATA0 + i % 16 :
 			       ASPEED_PECI_W_DATA4 + i % 16;
 		writel(le32_to_cpup((__le32 *)&msg->tx_buf[i]),
 		       priv->base + reg);
@@ -215,7 +253,10 @@
 		u8 byte_offset = i % 4;
 
 		if (byte_offset == 0) {
-			reg = i < 16 ? ASPEED_PECI_R_DATA0 + i % 16 :
+			if (priv->xfer_mode)
+				reg = ASPEED_PECI_NEW_R_DATA0 + i % 16;
+			else
+				reg = i < 16 ? ASPEED_PECI_R_DATA0 + i % 16 :
 				       ASPEED_PECI_R_DATA4 + i % 16;
 			rx_data = readl(priv->base + reg);
 		}
@@ -280,7 +321,7 @@
 static int aspeed_peci_init_ctrl(struct aspeed_peci *priv)
 {
 	u32 msg_timing, addr_timing, rd_sampling_point;
-	u32 clk_freq, clk_divisor, clk_div_val = 0;
+	u32 clk_freq, clk_div_val = 0;
 	int ret;
 
 	priv->clk = devm_clk_get(priv->dev, NULL);
@@ -303,10 +344,8 @@
 		return ret;
 	}
 
-	clk_divisor = clk_get_rate(priv->clk) / clk_freq;
-
-	while ((clk_divisor >> 1) && (clk_div_val < ASPEED_PECI_CLK_DIV_MAX))
-		clk_div_val++;
+	ret = of_property_read_u32(priv->dev->of_node, "clk-div",
+				   &clk_div_val);
 
 	ret = device_property_read_u32(priv->dev, "msg-timing", &msg_timing);
 	if (ret || msg_timing > ASPEED_PECI_MSG_TIMING_MAX) {
@@ -349,8 +388,11 @@
 		priv->cmd_timeout_ms = ASPEED_PECI_CMD_TIMEOUT_MS_DEFAULT;
 	}
 
+	if (of_property_read_bool(priv->dev->of_node, "64byte-mode")) 
+		priv->xfer_mode = 1;
+
 	writel(FIELD_PREP(ASPEED_PECI_CTRL_CLK_DIV_MASK,
-			  ASPEED_PECI_CLK_DIV_DEFAULT) |
+			  ASPEED_PECI_CLK_DIV_DEFAULT) | (priv->xfer_mode ? PECI_CTRL_64BYTE_MODE_EN : 0) |
 	       ASPEED_PECI_CTRL_PECI_CLK_EN, priv->base + ASPEED_PECI_CTRL);
 
 	/*
@@ -371,9 +413,10 @@
 	       ASPEED_PECI_INT_MASK, priv->base + ASPEED_PECI_INT_CTRL);
 
 	/* Read sampling point and clock speed setting */
-	writel(FIELD_PREP(ASPEED_PECI_CTRL_SAMPLING_MASK, rd_sampling_point) |
+	writel(ASPEED_PECI_CTRL_CLK_SOURCE_MASK | FIELD_PREP(ASPEED_PECI_CTRL_SAMPLING_MASK, rd_sampling_point) |
 	       FIELD_PREP(ASPEED_PECI_CTRL_CLK_DIV_MASK, clk_div_val) |
-	       ASPEED_PECI_CTRL_PECI_EN | ASPEED_PECI_CTRL_PECI_CLK_EN,
+	       ASPEED_PECI_CTRL_PECI_EN | ASPEED_PECI_CTRL_PECI_CLK_EN |
+		(priv->xfer_mode ? PECI_CTRL_64BYTE_MODE_EN : 0),
 	       priv->base + ASPEED_PECI_CTRL);
 
 	return 0;
