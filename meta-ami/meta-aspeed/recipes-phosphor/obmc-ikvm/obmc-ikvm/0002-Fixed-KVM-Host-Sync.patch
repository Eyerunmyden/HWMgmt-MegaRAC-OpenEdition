diff -Naur a/create_usbhid.sh b/create_usbhid.sh
--- a/create_usbhid.sh	2021-05-07 17:02:04.902773417 +0530
+++ b/create_usbhid.sh	2021-05-07 16:46:43.562171942 +0530
@@ -1,135 +1,157 @@
 #!/bin/sh
 
-new_directory="/sys/kernel/config/usb_gadget/obmc_hid"
+hid_conf_directory="/sys/kernel/config/usb_gadget/obmc_hid"
+dev_name="1e6a0000.usb-vhub"
 
-if [ -e "${new_directory}" ]; then
-	exit 0
-fi
+create_hid() {
+    # create gadget
+    mkdir "${hid_conf_directory}"
+    cd "${hid_conf_directory}"
+
+    # add basic information
+    echo 0x0100 > bcdDevice
+    echo 0x0200 > bcdUSB
+    echo 0x0104 > idProduct		# Multifunction Composite Gadget
+    echo 0x1d6b > idVendor		# Linux Foundation
+
+    # create English locale
+    mkdir strings/0x409
+
+    echo "OpenBMC" > strings/0x409/manufacturer
+    echo "virtual_input" > strings/0x409/product
+    echo "OBMC0001" > strings/0x409/serialnumber
+
+    # Create HID keyboard function
+    mkdir functions/hid.0
+
+    echo 1 > functions/hid.0/protocol	# 1: keyboard
+    echo 8 > functions/hid.0/report_length
+    echo 1 > functions/hid.0/subclass
+
+    # Binary HID keyboard descriptor
+    #  0x05, 0x01, // USAGE_PAGE (Generic Desktop)
+    #  0x09, 0x06, // USAGE (Keyboard)
+    #  0xa1, 0x01, // COLLECTION (Application)
+    #  0x05, 0x07, //   USAGE_PAGE (Keyboard)
+    #  0x19, 0xe0, //   USAGE_MINIMUM (Keyboard LeftControl)
+    #  0x29, 0xe7, //   USAGE_MAXIMUM (Keyboard Right GUI)
+    #  0x15, 0x00, //   LOGICAL_MINIMUM (0)
+    #  0x25, 0x01, //   LOGICAL_MAXIMUM (1)
+    #  0x75, 0x01, //   REPORT_SIZE (1)
+    #  0x95, 0x08, //   REPORT_COUNT (8)
+    #  0x81, 0x02, //   INPUT (Data,Var,Abs)
+    #  0x95, 0x01, //   REPORT_COUNT (1)
+    #  0x75, 0x08, //   REPORT_SIZE (8)
+    #  0x81, 0x03, //   INPUT (Data,Var,Abs)
+    #  0x95, 0x05, //   REPORT_COUNT (5)
+    #  0x75, 0x01, //   REPORT_SIZE (1)
+    #  0x05, 0x08, //   USAGE_PAGE (LEDs)
+    #  0x19, 0x01, //   USAGE_MINIMUM (Num Lock)
+    #  0x29, 0x05, //   USAGE_MAXIMUM (Kana)
+    #  0x91, 0x02, //   OUTPUT (Data,Var,Abs)
+    #  0x95, 0x01, //   REPORT_COUNT (1)
+    #  0x75, 0x03, //   REPORT_SIZE (3)
+    #  0x91, 0x03, //   OUTPUT (Cnst,Var,Abs)
+    #  0x95, 0x06, //   REPORT_COUNT (6)
+    #  0x75, 0x08, //   REPORT_SIZE (8)
+    #  0x15, 0x00, //   LOGICAL_MINIMUM (0)
+    #  0x25, 0x65, //   LOGICAL_MAXIMUM (101)
+    #  0x05, 0x07, //   USAGE_PAGE (Keyboard)
+    #  0x19, 0x00, //   USAGE_MINIMUM (Reserved (no event indicated))
+    #  0x29, 0x65, //   USAGE_MAXIMUM (Keyboard Application)
+    #  0x81, 0x00, //   INPUT (Data,Ary,Abs)
+    #  0xc0        // END_COLLECTION
+    echo -ne '\x05\x01\x09\x06\xa1\x01\x05\x07\x19\xe0\x29\xe7\x15\x00\x25\x01\x75\x01\x95\x08\x81\x02\x95\x01\x75\x08\x81\x03\x95\x05\x75\x01\x05\x08\x19\x01\x29\x05\x91\x02\x95\x01\x75\x03\x91\x03\x95\x06\x75\x08\x15\x00\x25\x65\x05\x07\x19\x00\x29\x65\x81\x00\xc0' > functions/hid.0/report_desc
+
+    # Create HID mouse function
+    mkdir functions/hid.1
+
+    echo 2 > functions/hid.1/protocol	# 2: mouse
+    echo 5 > functions/hid.1/report_length
+    echo 1 > functions/hid.1/subclass
+
+    # Binary HID mouse descriptor (absolute coordinate)
+    #  0x05, 0x01,       // USAGE_PAGE (Generic Desktop)
+    #  0x09, 0x02,       // USAGE (Mouse)
+    #  0xa1, 0x01,       // COLLECTION (Application)
+    #  0x09, 0x01,       //   USAGE (Pointer)
+    #  0xa1, 0x00,       //   COLLECTION (Physical)
+    #  0x05, 0x09,       //     USAGE_PAGE (Button)
+    #  0x19, 0x01,       //     USAGE_MINIMUM (Button 1)
+    #  0x29, 0x03,       //     USAGE_MAXIMUM (Button 3)
+    #  0x15, 0x00,       //     LOGICAL_MINIMUM (0)
+    #  0x25, 0x01,       //     LOGICAL_MAXIMUM (1)
+    #  0x95, 0x03,       //     REPORT_COUNT (3)
+    #  0x75, 0x01,       //     REPORT_SIZE (1)
+    #  0x81, 0x02,       //     INPUT (Data,Var,Abs)
+    #  0x95, 0x01,       //     REPORT_COUNT (1)
+    #  0x75, 0x05,       //     REPORT_SIZE (5)
+    #  0x81, 0x03,       //     INPUT (Cnst,Var,Abs)
+    #  0x05, 0x01,       //     USAGE_PAGE (Generic Desktop)
+    #  0x09, 0x30,       //     USAGE (X)
+    #  0x09, 0x31,       //     USAGE (Y)
+    #  0x35, 0x00,       //     PHYSICAL_MINIMUM (0)
+    #  0x46, 0xff, 0x7f, //     PHYSICAL_MAXIMUM (32767)
+    #  0x15, 0x00,       //     LOGICAL_MINIMUM (0)
+    #  0x26, 0xff, 0x7f, //     LOGICAL_MAXIMUM (32767)
+    #  0x65, 0x11,       //     UNIT (SI Lin:Distance)
+    #  0x55, 0x00,       //     UNIT_EXPONENT (0)
+    #  0x75, 0x10,       //     REPORT_SIZE (16)
+    #  0x95, 0x02,       //     REPORT_COUNT (2)
+    #  0x81, 0x02,       //     INPUT (Data,Var,Abs)
+    #  0xc0,             //   END_COLLECTION
+    #  0xc0              // END_COLLECTION
+    echo -ne '\x05\x01\x09\x02\xa1\x01\x09\x01\xa1\x00\x05\x09\x19\x01\x29\x03\x15\x00\x25\x01\x95\x03\x75\x01\x81\x02\x95\x01\x75\x05\x81\x03\x05\x01\x09\x30\x09\x31\x35\x00\x46\xff\x7f\x15\x00\x26\xff\x7f\x65\x11\x55\x00\x75\x10\x95\x02\x81\x02\xc0\xc0' > functions/hid.1/report_desc
+
+    # Create configuration
+    mkdir configs/c.1
+    mkdir configs/c.1/strings/0x409
+
+    echo 0x80 > configs/c.1/bmAttributes
+    echo 200 > configs/c.1/MaxPower
+    echo "" > configs/c.1/strings/0x409/configuration
+
+    # Link HID functions to configuration
+    ln -s functions/hid.0 configs/c.1
+    ln -s functions/hid.1 configs/c.1
+}
+
+connect_hid() {
+    if ! [[ `cat UDC` =~ "${dev_name}:p" ]]; then
+        i=0
+        num_ports=5
+        base_usb_dir="/sys/bus/platform/devices/${dev_name}/${dev_name}:p"
+        while [ $i -lt $num_ports ]; do
+            port=$(($i + 1))
+            i=$port
+            if [ ! -e "${base_usb_dir}${port}/gadget/suspended" ]; then
+                break
+            fi
+        done
+        echo "${dev_name}:p${port}" > UDC
+    fi
+}
+
+disconnect_hid() {
+    if [[ `cat UDC` =~ "${dev_name}:p" ]]; then
+        echo "" > UDC
+    fi
+}
 
-# create gadget
 original_directory="$(pwd)"
-mkdir "${new_directory}"
-cd "${new_directory}"
 
-# add basic information
-echo 0x0100 > bcdDevice
-echo 0x0200 > bcdUSB
-echo 0x0104 > idProduct		# Multifunction Composite Gadget
-echo 0x1d6b > idVendor		# Linux Foundation
-
-# create English locale
-mkdir strings/0x409
-
-echo "OpenBMC" > strings/0x409/manufacturer
-echo "virtual_input" > strings/0x409/product
-echo "OBMC0001" > strings/0x409/serialnumber
-
-# Create HID keyboard function
-mkdir functions/hid.0
-
-echo 1 > functions/hid.0/protocol	# 1: keyboard
-echo 8 > functions/hid.0/report_length
-echo 1 > functions/hid.0/subclass
-
-# Binary HID keyboard descriptor
-#  0x05, 0x01, // USAGE_PAGE (Generic Desktop)
-#  0x09, 0x06, // USAGE (Keyboard)
-#  0xa1, 0x01, // COLLECTION (Application)
-#  0x05, 0x07, //   USAGE_PAGE (Keyboard)
-#  0x19, 0xe0, //   USAGE_MINIMUM (Keyboard LeftControl)
-#  0x29, 0xe7, //   USAGE_MAXIMUM (Keyboard Right GUI)
-#  0x15, 0x00, //   LOGICAL_MINIMUM (0)
-#  0x25, 0x01, //   LOGICAL_MAXIMUM (1)
-#  0x75, 0x01, //   REPORT_SIZE (1)
-#  0x95, 0x08, //   REPORT_COUNT (8)
-#  0x81, 0x02, //   INPUT (Data,Var,Abs)
-#  0x95, 0x01, //   REPORT_COUNT (1)
-#  0x75, 0x08, //   REPORT_SIZE (8)
-#  0x81, 0x03, //   INPUT (Data,Var,Abs)
-#  0x95, 0x05, //   REPORT_COUNT (5)
-#  0x75, 0x01, //   REPORT_SIZE (1)
-#  0x05, 0x08, //   USAGE_PAGE (LEDs)
-#  0x19, 0x01, //   USAGE_MINIMUM (Num Lock)
-#  0x29, 0x05, //   USAGE_MAXIMUM (Kana)
-#  0x91, 0x02, //   OUTPUT (Data,Var,Abs)
-#  0x95, 0x01, //   REPORT_COUNT (1)
-#  0x75, 0x03, //   REPORT_SIZE (3)
-#  0x91, 0x03, //   OUTPUT (Cnst,Var,Abs)
-#  0x95, 0x06, //   REPORT_COUNT (6)
-#  0x75, 0x08, //   REPORT_SIZE (8)
-#  0x15, 0x00, //   LOGICAL_MINIMUM (0)
-#  0x25, 0x65, //   LOGICAL_MAXIMUM (101)
-#  0x05, 0x07, //   USAGE_PAGE (Keyboard)
-#  0x19, 0x00, //   USAGE_MINIMUM (Reserved (no event indicated))
-#  0x29, 0x65, //   USAGE_MAXIMUM (Keyboard Application)
-#  0x81, 0x00, //   INPUT (Data,Ary,Abs)
-#  0xc0        // END_COLLECTION
-echo -ne '\x05\x01\x09\x06\xa1\x01\x05\x07\x19\xe0\x29\xe7\x15\x00\x25\x01\x75\x01\x95\x08\x81\x02\x95\x01\x75\x08\x81\x03\x95\x05\x75\x01\x05\x08\x19\x01\x29\x05\x91\x02\x95\x01\x75\x03\x91\x03\x95\x06\x75\x08\x15\x00\x25\x65\x05\x07\x19\x00\x29\x65\x81\x00\xc0' > functions/hid.0/report_desc
-
-# Create HID mouse function
-mkdir functions/hid.1
-
-echo 2 > functions/hid.1/protocol	# 2: mouse
-echo 5 > functions/hid.1/report_length
-echo 1 > functions/hid.1/subclass
-
-# Binary HID mouse descriptor (absolute coordinate)
-#  0x05, 0x01,       // USAGE_PAGE (Generic Desktop)
-#  0x09, 0x02,       // USAGE (Mouse)
-#  0xa1, 0x01,       // COLLECTION (Application)
-#  0x09, 0x01,       //   USAGE (Pointer)
-#  0xa1, 0x00,       //   COLLECTION (Physical)
-#  0x05, 0x09,       //     USAGE_PAGE (Button)
-#  0x19, 0x01,       //     USAGE_MINIMUM (Button 1)
-#  0x29, 0x03,       //     USAGE_MAXIMUM (Button 3)
-#  0x15, 0x00,       //     LOGICAL_MINIMUM (0)
-#  0x25, 0x01,       //     LOGICAL_MAXIMUM (1)
-#  0x95, 0x03,       //     REPORT_COUNT (3)
-#  0x75, 0x01,       //     REPORT_SIZE (1)
-#  0x81, 0x02,       //     INPUT (Data,Var,Abs)
-#  0x95, 0x01,       //     REPORT_COUNT (1)
-#  0x75, 0x05,       //     REPORT_SIZE (5)
-#  0x81, 0x03,       //     INPUT (Cnst,Var,Abs)
-#  0x05, 0x01,       //     USAGE_PAGE (Generic Desktop)
-#  0x09, 0x30,       //     USAGE (X)
-#  0x09, 0x31,       //     USAGE (Y)
-#  0x35, 0x00,       //     PHYSICAL_MINIMUM (0)
-#  0x46, 0xff, 0x7f, //     PHYSICAL_MAXIMUM (32767)
-#  0x15, 0x00,       //     LOGICAL_MINIMUM (0)
-#  0x26, 0xff, 0x7f, //     LOGICAL_MAXIMUM (32767)
-#  0x65, 0x11,       //     UNIT (SI Lin:Distance)
-#  0x55, 0x00,       //     UNIT_EXPONENT (0)
-#  0x75, 0x10,       //     REPORT_SIZE (16)
-#  0x95, 0x02,       //     REPORT_COUNT (2)
-#  0x81, 0x02,       //     INPUT (Data,Var,Abs)
-#  0xc0,             //   END_COLLECTION
-#  0xc0              // END_COLLECTION
-echo -ne '\x05\x01\x09\x02\xa1\x01\x09\x01\xa1\x00\x05\x09\x19\x01\x29\x03\x15\x00\x25\x01\x95\x03\x75\x01\x81\x02\x95\x01\x75\x05\x81\x03\x05\x01\x09\x30\x09\x31\x35\x00\x46\xff\x7f\x15\x00\x26\xff\x7f\x65\x11\x55\x00\x75\x10\x95\x02\x81\x02\xc0\xc0' > functions/hid.1/report_desc
-
-# Create configuration
-mkdir configs/c.1
-mkdir configs/c.1/strings/0x409
-
-echo 0x80 > configs/c.1/bmAttributes
-echo 200 > configs/c.1/MaxPower
-echo "" > configs/c.1/strings/0x409/configuration
-
-# Link HID functions to configuration
-ln -s functions/hid.0 configs/c.1
-ln -s functions/hid.1 configs/c.1
+if [ ! -e "${hid_conf_directory}" ]; then
+    create_hid
+else
+    cd "${hid_conf_directory}"
+fi
 
-# Enable gadget
-dev_name="1e6a0000.usb-vhub"
-i=0
-num_ports=5
-base_usb_dir="/sys/bus/platform/devices/${dev_name}/${dev_name}:p"
-while [ $i -lt $num_ports ]; do
-	port=$(($i + 1))
-	i=$port
-	if [ ! -e "${base_usb_dir}${port}/gadget/suspended" ]; then
-		break
-	fi
-done
-echo "${dev_name}:p${port}" > UDC
+if [ "$1" = "connect" ]; then
+    connect_hid
+elif [ "$1" = "disconnect" ]; then
+    disconnect_hid
+else
+    echo "Invalid option: $1. Use 'connect' or 'disconnect'."
+fi
 
 cd "${original_directory}"
diff -Naur a/ikvm_input.cpp b/ikvm_input.cpp
--- a/ikvm_input.cpp	2021-05-07 17:02:04.902773417 +0530
+++ b/ikvm_input.cpp	2021-05-07 16:46:43.570171909 +0530
@@ -16,6 +16,8 @@
 
 #include "scancodes.hpp"
 
+namespace fs = std::filesystem;
+
 namespace ikvm
 {
 
@@ -23,13 +25,61 @@
 using namespace sdbusplus::xyz::openbmc_project::Common::File::Error;
 
 Input::Input(const std::string& kbdPath, const std::string& ptrPath) :
-    pointerError(false), sendKeyboard(false), sendPointer(false),
     keyboardFd(-1), pointerFd(-1), keyboardReport{0}, pointerReport{0},
     keyboardPath(kbdPath), pointerPath(ptrPath)
 {
+    hidUdcStream.exceptions(std::ofstream::failbit | std::ofstream::badbit);
+    hidUdcStream.open(hidUdcPath, std::ios::out | std::ios::app);
+}
+
+Input::~Input()
+{
+    if (keyboardFd >= 0)
+    {
+        close(keyboardFd);
+    }
+
+    if (pointerFd >= 0)
+    {
+        close(pointerFd);
+    }
+
+    disconnect();
+    hidUdcStream.close();
+}
+
+void Input::connect()
+{
+    try
+    {
+        for (const auto& port : fs::directory_iterator(usbVirtualHubPath))
+        {
+            if (fs::is_directory(port) && !fs::is_symlink(port) &&
+                !fs::exists(port.path() / "gadget/suspended"))
+            {
+                const std::string portId = port.path().filename();
+                hidUdcStream << portId << std::endl;
+                break;
+            }
+        }
+    }
+    catch (fs::filesystem_error& e)
+    {
+        log<level::ERR>("Failed to search USB virtual hub port",
+                        entry("ERROR=%s", e.what()));
+        return;
+    }
+    catch (std::ofstream::failure& e)
+    {
+        log<level::ERR>("Failed to connect HID gadget",
+                        entry("ERROR=%s", e.what()));
+        return;
+    }
+
     if (!keyboardPath.empty())
     {
-        keyboardFd = open(keyboardPath.c_str(), O_RDWR | O_CLOEXEC);
+        keyboardFd = open(keyboardPath.c_str(),
+                          O_RDWR | O_CLOEXEC | O_NONBLOCK);
         if (keyboardFd < 0)
         {
             log<level::ERR>("Failed to open input device",
@@ -56,16 +106,28 @@
     }
 }
 
-Input::~Input()
+void Input::disconnect()
 {
     if (keyboardFd >= 0)
     {
         close(keyboardFd);
+        keyboardFd = -1;
     }
 
     if (pointerFd >= 0)
     {
         close(pointerFd);
+        pointerFd = -1;
+    }
+
+    try
+    {
+        hidUdcStream << "" << std::endl;
+    }
+    catch (std::ofstream::failure& e)
+    {
+        log<level::ERR>("Failed to disconnect HID gadget",
+                        entry("ERROR=%s", e.what()));
     }
 }
 
@@ -73,6 +135,12 @@
 {
     Server::ClientData* cd = (Server::ClientData*)cl->clientData;
     Input* input = cd->input;
+    bool sendKeyboard = false;
+
+    if (input->keyboardFd < 0)
+    {
+        return;
+    }
 
     if (down)
     {
@@ -88,7 +156,7 @@
                     {
                         input->keyboardReport[i] = sc;
                         input->keysDown.insert(std::make_pair(key, i));
-                        input->sendKeyboard = true;
+                        sendKeyboard = true;
                         break;
                     }
                 }
@@ -101,7 +169,7 @@
             if (mod)
             {
                 input->keyboardReport[0] |= mod;
-                input->sendKeyboard = true;
+                sendKeyboard = true;
             }
         }
     }
@@ -113,7 +181,7 @@
         {
             input->keyboardReport[it->second] = 0;
             input->keysDown.erase(it);
-            input->sendKeyboard = true;
+            sendKeyboard = true;
         }
         else
         {
@@ -122,10 +190,15 @@
             if (mod)
             {
                 input->keyboardReport[0] &= ~mod;
-                input->sendKeyboard = true;
+                sendKeyboard = true;
             }
         }
     }
+
+    if (sendKeyboard)
+    {
+        input->writeKeyboard(input->keyboardReport);
+    }
 }
 
 void Input::pointerEvent(int buttonMask, int x, int y, rfbClientPtr cl)
@@ -135,6 +208,11 @@
     Server* server = (Server*)cl->screen->screenData;
     const Video& video = server->getVideo();
 
+    if (input->pointerFd < 0)
+    {
+        return;
+    }
+
     input->pointerReport[0] = ((buttonMask & 0x4) >> 1) |
                               ((buttonMask & 0x2) << 1) | (buttonMask & 0x1);
 
@@ -152,38 +230,8 @@
         memcpy(&input->pointerReport[3], &yy, 2);
     }
 
-    input->sendPointer = true;
     rfbDefaultPtrAddEvent(buttonMask, x, y, cl);
-}
-
-void Input::restart()
-{
-    if (!keyboardPath.empty() && keyboardFd < 0)
-    {
-        keyboardFd = open(keyboardPath.c_str(), O_RDWR | O_CLOEXEC);
-        if (keyboardFd < 0)
-        {
-            log<level::ERR>("Failed to open input device",
-                            entry("PATH=%s", keyboardPath.c_str()),
-                            entry("ERROR=%s", strerror(errno)));
-        }
-
-        sendKeyboard = false;
-    }
-
-    if (!pointerPath.empty() && pointerFd < 0)
-    {
-        pointerFd = open(pointerPath.c_str(), O_RDWR | O_CLOEXEC | O_NONBLOCK);
-        if (pointerFd < 0)
-        {
-            log<level::ERR>("Failed to open input device",
-                            entry("PATH=%s", pointerPath.c_str()),
-                            entry("ERROR=%s", strerror(errno)));
-        }
-
-        pointerError = false;
-        sendPointer = false;
-    }
+    input->writePointer(input->pointerReport);
 }
 
 void Input::sendWakeupPacket()
@@ -217,23 +265,6 @@
     }
 }
 
-void Input::sendReport()
-{
-    if (sendKeyboard && keyboardFd >= 0)
-    {
-        writeKeyboard(keyboardReport);
-
-        sendKeyboard = false;
-    }
-
-    if (sendPointer && pointerFd >= 0)
-    {
-        writePointer(pointerReport);
-
-        sendPointer = false;
-    }
-}
-
 uint8_t Input::keyToMod(rfbKeySym key)
 {
     uint8_t mod = 0;
@@ -457,17 +488,35 @@
 
 bool Input::writeKeyboard(const uint8_t *report)
 {
-    if (write(keyboardFd, report, KEY_REPORT_LENGTH) != KEY_REPORT_LENGTH)
+    std::unique_lock<std::mutex> lk(keyMutex);
+    uint retryCount = HID_REPORT_RETRY_MAX;
+
+    while (retryCount > 0)
     {
-        log<level::ERR>("Failed to write keyboard report",
-                        entry("ERROR=%s", strerror(errno)));
+        if (write(keyboardFd, report, KEY_REPORT_LENGTH) == KEY_REPORT_LENGTH)
+        {
+            break;
+        }
 
-        if (errno == ESHUTDOWN)
+        if (errno != EAGAIN)
         {
-            close(keyboardFd);
-            keyboardFd = -1;
+            if (errno != ESHUTDOWN)
+            {
+                log<level::ERR>("Failed to write keyboard report",
+                                entry("ERROR=%s", strerror(errno)));
+            }
+
+            break;
         }
 
+        lk.unlock();
+        std::this_thread::sleep_for(std::chrono::milliseconds(10));
+        lk.lock();
+        retryCount--;
+    }
+
+    if (!retryCount || errno)
+    {
         return false;
     }
 
@@ -476,24 +525,31 @@
 
 void Input::writePointer(const uint8_t *report)
 {
-    if (write(pointerFd, report, PTR_REPORT_LENGTH) != PTR_REPORT_LENGTH)
+    std::unique_lock<std::mutex> lk(ptrMutex);
+    uint retryCount = HID_REPORT_RETRY_MAX;
+
+    while (retryCount > 0)
     {
-        if (!pointerError)
+        if (write(pointerFd, report, PTR_REPORT_LENGTH) == PTR_REPORT_LENGTH)
         {
-            log<level::ERR>("Failed to write pointer report",
-                            entry("ERROR=%s", strerror(errno)));
-            pointerError = true;
+            break;
         }
 
-        if (errno == ESHUTDOWN)
+        if (errno != EAGAIN)
         {
-            close(pointerFd);
-            pointerFd = -1;
+            if (errno != ESHUTDOWN)
+            {
+                log<level::ERR>("Failed to write pointer report",
+                                entry("ERROR=%s", strerror(errno)));
+            }
+
+            break;
         }
-    }
-    else
-    {
-        pointerError = false;
+
+        lk.unlock();
+        std::this_thread::sleep_for(std::chrono::milliseconds(10));
+        lk.lock();
+        retryCount--;
     }
 }
 
diff -Naur a/ikvm_input.hpp b/ikvm_input.hpp
--- a/ikvm_input.hpp	2021-05-07 17:02:04.902773417 +0530
+++ b/ikvm_input.hpp	2021-05-07 16:46:43.570171909 +0530
@@ -2,7 +2,10 @@
 
 #include <rfb/rfb.h>
 
+#include <filesystem>
+#include <fstream>
 #include <map>
+#include <mutex>
 #include <string>
 
 namespace ikvm
@@ -29,6 +32,10 @@
     Input(Input&&) = default;
     Input& operator=(Input&&) = default;
 
+    /* @brief Connects HID gadget to host */
+    void connect();
+    /* @brief Disconnects HID gadget from host */
+    void disconnect();
     /*
      * @brief RFB client key event handler
      *
@@ -48,12 +55,8 @@
      */
     static void pointerEvent(int buttonMask, int x, int y, rfbClientPtr cl);
 
-    /* @brief Re-opens USB device in case the endpoint shutdown */
-    void restart();
     /* @brief Sends a wakeup data packet to the USB input device */
     void sendWakeupPacket();
-    /* @brief Sends an HID report to the USB input device */
-    void sendReport();
 
   private:
     static constexpr int NUM_MODIFIER_BITS = 4;
@@ -74,6 +77,14 @@
         0x04, // left alt
         0x40  // right alt
     };
+    /* @brief Path to the HID gadget UDC */
+    static constexpr const char* hidUdcPath =
+        "/sys/kernel/config/usb_gadget/obmc_hid/UDC";
+    /* @brief Path to the USB virtual hub */
+    static constexpr const char* usbVirtualHubPath =
+        "/sys/bus/platform/devices/1e6a0000.usb-vhub";
+    /* @brief Retry limit for writing an HID report */
+    static constexpr int HID_REPORT_RETRY_MAX = 5;
     /*
      * @brief Translates a RFB-specific key code to HID modifier bit
      *
@@ -90,12 +101,6 @@
     bool writeKeyboard(const uint8_t *report);
     void writePointer(const uint8_t *report);
 
-    /* @brief Indicates whether or not a pointer report error has occurred */
-    bool pointerError;
-    /* @brief Indicates whether or not to send a keyboard report */
-    bool sendKeyboard;
-    /* @brief Indicates whether or not to send a pointer report */
-    bool sendPointer;
     /* @brief File descriptor for the USB keyboard device */
     int keyboardFd;
     /* @brief File descriptor for the USB mouse device */
@@ -113,6 +118,12 @@
      *        of which keys are down
      */
     std::map<int, int> keysDown;
+    /* @brief Handle of the HID gadget UDC */
+    std::ofstream hidUdcStream;
+    /* @brief Mutex for sending keyboard reports */
+    std::mutex keyMutex;
+    /* @brief Mutex for sending pointer reports */
+    std::mutex ptrMutex;
 };
 
 } // namespace ikvm
diff -Naur a/ikvm_server.cpp b/ikvm_server.cpp
--- a/ikvm_server.cpp	2021-05-07 17:02:04.902773417 +0530
+++ b/ikvm_server.cpp	2021-05-07 16:46:43.578171875 +0530
@@ -79,8 +79,6 @@
 
     if (server->clientHead)
     {
-        input.sendReport();
-
         frameCounter++;
         if (pendingResize && frameCounter > video.getFrameRate())
         {
@@ -178,6 +176,7 @@
 
     if (server->numClients-- == 1)
     {
+        server->input.disconnect();
         rfbMarkRectAsModified(server->server, 0, 0, server->video.getWidth(),
                               server->video.getHeight());
     }
@@ -193,6 +192,7 @@
     cl->clientFramebufferUpdateRequestHook = clientFramebufferUpdateRequest;
     if (!server->numClients++)
     {
+        server->input.connect();
         server->pendingResize = false;
         server->frameCounter = 0;
     }
diff -Naur a/ikvm_video.cpp b/ikvm_video.cpp
--- a/ikvm_video.cpp	2021-05-07 17:02:04.902773417 +0530
+++ b/ikvm_video.cpp	2021-05-07 16:46:43.578171875 +0530
@@ -163,10 +163,9 @@
         restart();
         return false;
     }
-    else if (timingsError)
+    else
     {
         timingsError = false;
-        input.restart();
     }
 
     if (timings.bt.width != width || timings.bt.height != height)
diff -Naur a/start-ipkvm.service b/start-ipkvm.service
--- a/start-ipkvm.service	2021-05-07 17:02:04.918773361 +0530
+++ b/start-ipkvm.service	2021-05-07 16:46:43.522172111 +0530
@@ -4,7 +4,7 @@
 
 [Service]
 Restart=always
-ExecStartPre=/usr/bin/create_usbhid.sh
+ExecStartPre=/usr/bin/create_usbhid.sh disconnect
 ExecStart=/usr/bin/obmc-ikvm -v /dev/video0 -k /dev/hidg0 -p /dev/hidg1
 
 [Install]
